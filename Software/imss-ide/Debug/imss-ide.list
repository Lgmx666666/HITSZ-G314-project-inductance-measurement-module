
imss-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d4c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08010e90  08010e90  00011e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080123d8  080123d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080123e0  080123e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080123e4  080123e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000008  080123e8  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000041  200001f8  080125d8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000023c  08012619  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001654  20000250  0801262a  00014250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018a4  0801262a  000148a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00016000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00016000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801262a  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00036bfc  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000073a8  00000000  00000000  0004c693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000031b0  00000000  00000000  00053a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002659  00000000  00000000  00056bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002fe5b  00000000  00000000  00059249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b91d  00000000  00000000  000890a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001083a8  00000000  00000000  000c49c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001ccd69  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e38c  00000000  00000000  001ccdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000095  00000000  00000000  001db138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000250 	.word	0x20000250
 800015c:	00000000 	.word	0x00000000
 8000160:	08010e74 	.word	0x08010e74

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000254 	.word	0x20000254
 800017c:	08010e74 	.word	0x08010e74

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <LL_EXTI_EnableIT_32_63+0x24>)
 8000ef2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000ef6:	4905      	ldr	r1, [pc, #20]	@ (8000f0c <LL_EXTI_EnableIT_32_63+0x24>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	58000800 	.word	0x58000800

08000f10 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f34:	68fb      	ldr	r3, [r7, #12]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f4e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000f52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f62:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f7e:	f002 fd4f 	bl	8003a20 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f82:	f002 fd53 	bl	8003a2c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f86:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000f8a:	f7ff ffad 	bl	8000ee8 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f8e:	f00a fd7b 	bl	800ba88 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f92:	f000 f821 	bl	8000fd8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f96:	f000 f8c1 	bl	800111c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f9a:	bf00      	nop
}
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <APPD_EnableCPU2+0x34>)
 8000fa8:	1d3c      	adds	r4, r7, #4
 8000faa:	461d      	mov	r5, r3
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb4:	c403      	stmia	r4!, {r0, r1}
 8000fb6:	8022      	strh	r2, [r4, #0]
 8000fb8:	3402      	adds	r4, #2
 8000fba:	0c13      	lsrs	r3, r2, #16
 8000fbc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fbe:	f00a fc77 	bl	800b8b0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 ff08 	bl	800adda <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fca:	bf00      	nop
}
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08010e90 	.word	0x08010e90

08000fd8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	77fb      	strb	r3, [r7, #31]
 8000ffc:	e036      	b.n	800106c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	4a43      	ldr	r2, [pc, #268]	@ (8001110 <APPD_SetCPU2GpioConfig+0x138>)
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	799b      	ldrb	r3, [r3, #6]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02c      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800100c:	7ffb      	ldrb	r3, [r7, #31]
 800100e:	4a40      	ldr	r2, [pc, #256]	@ (8001110 <APPD_SetCPU2GpioConfig+0x138>)
 8001010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001014:	4a3f      	ldr	r2, [pc, #252]	@ (8001114 <APPD_SetCPU2GpioConfig+0x13c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01b      	beq.n	8001052 <APPD_SetCPU2GpioConfig+0x7a>
 800101a:	4a3e      	ldr	r2, [pc, #248]	@ (8001114 <APPD_SetCPU2GpioConfig+0x13c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d821      	bhi.n	8001064 <APPD_SetCPU2GpioConfig+0x8c>
 8001020:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001024:	d003      	beq.n	800102e <APPD_SetCPU2GpioConfig+0x56>
 8001026:	4a3c      	ldr	r2, [pc, #240]	@ (8001118 <APPD_SetCPU2GpioConfig+0x140>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d009      	beq.n	8001040 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 800102c:	e01a      	b.n	8001064 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800102e:	7ffb      	ldrb	r3, [r7, #31]
 8001030:	4a37      	ldr	r2, [pc, #220]	@ (8001110 <APPD_SetCPU2GpioConfig+0x138>)
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	889a      	ldrh	r2, [r3, #4]
 8001038:	8bbb      	ldrh	r3, [r7, #28]
 800103a:	4313      	orrs	r3, r2
 800103c:	83bb      	strh	r3, [r7, #28]
          break;
 800103e:	e012      	b.n	8001066 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001040:	7ffb      	ldrb	r3, [r7, #31]
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <APPD_SetCPU2GpioConfig+0x138>)
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	889a      	ldrh	r2, [r3, #4]
 800104a:	8b7b      	ldrh	r3, [r7, #26]
 800104c:	4313      	orrs	r3, r2
 800104e:	837b      	strh	r3, [r7, #26]
          break;
 8001050:	e009      	b.n	8001066 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	4a2e      	ldr	r2, [pc, #184]	@ (8001110 <APPD_SetCPU2GpioConfig+0x138>)
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	889a      	ldrh	r2, [r3, #4]
 800105c:	8b3b      	ldrh	r3, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	833b      	strh	r3, [r7, #24]
          break;
 8001062:	e000      	b.n	8001066 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001064:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001066:	7ffb      	ldrb	r3, [r7, #31]
 8001068:	3301      	adds	r3, #1
 800106a:	77fb      	strb	r3, [r7, #31]
 800106c:	7ffb      	ldrb	r3, [r7, #31]
 800106e:	2b25      	cmp	r3, #37	@ 0x25
 8001070:	d9c5      	bls.n	8000ffe <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800107e:	8bbb      	ldrh	r3, [r7, #28]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d014      	beq.n	80010ae <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001084:	8bbb      	ldrh	r3, [r7, #28]
 8001086:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff ff41 	bl	8000f10 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ff57 	bl	8000f42 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109c:	f003 f998 	bl	80043d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80010a0:	8bbb      	ldrh	r3, [r7, #28]
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010aa:	f003 fb01 	bl	80046b0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80010ae:	8b7b      	ldrh	r3, [r7, #26]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d012      	beq.n	80010da <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80010b4:	8b7b      	ldrh	r3, [r7, #26]
 80010b6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff ff29 	bl	8000f10 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff ff3f 	bl	8000f42 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4813      	ldr	r0, [pc, #76]	@ (8001118 <APPD_SetCPU2GpioConfig+0x140>)
 80010ca:	f003 f981 	bl	80043d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010ce:	8b7b      	ldrh	r3, [r7, #26]
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4810      	ldr	r0, [pc, #64]	@ (8001118 <APPD_SetCPU2GpioConfig+0x140>)
 80010d6:	f003 faeb 	bl	80046b0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80010da:	8b3b      	ldrh	r3, [r7, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 80010e0:	8b3b      	ldrh	r3, [r7, #24]
 80010e2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	2004      	movs	r0, #4
 80010e6:	f7ff ff13 	bl	8000f10 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff ff29 	bl	8000f42 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <APPD_SetCPU2GpioConfig+0x13c>)
 80010f6:	f003 f96b 	bl	80043d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80010fa:	8b3b      	ldrh	r3, [r7, #24]
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <APPD_SetCPU2GpioConfig+0x13c>)
 8001102:	f003 fad5 	bl	80046b0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001106:	bf00      	nop
 8001108:	bf00      	nop
}
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	08011d8c 	.word	0x08011d8c
 8001114:	48000800 	.word	0x48000800
 8001118:	48000400 	.word	0x48000400

0800111c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001120:	bf00      	nop
}
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
#ifdef CFG_DEBUG_TRACE_UART
if (CFG_DEBUG_TRACE_UART == hw_lpuart1)
{
#if(CFG_HW_LPUART1_ENABLED == 1)
    MX_LPUART1_UART_Init();
 800112e:	f001 fe67 	bl	8002e00 <MX_LPUART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001132:	bf00      	nop
}
 8001134:	bd80      	pop	{r7, pc}

08001136 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	460b      	mov	r3, r1
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001144:	897a      	ldrh	r2, [r7, #10]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68f9      	ldr	r1, [r7, #12]
 800114a:	2002      	movs	r0, #2
 800114c:	f001 fa9a 	bl	8002684 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001150:	bf00      	nop
}
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <LL_PWR_SMPS_Enable+0x1c>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <LL_PWR_SMPS_Enable+0x1c>)
 8001162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001166:	61d3      	str	r3, [r2, #28]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	58000400 	.word	0x58000400

08001178 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001188:	4904      	ldr	r1, [pc, #16]	@ (800119c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	61cb      	str	r3, [r1, #28]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	58000400 	.word	0x58000400

080011a0 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d108      	bne.n	80011cc <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f023 020f 	bic.w	r2, r3, #15
 80011c2:	4913      	ldr	r1, [pc, #76]	@ (8001210 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 80011ca:	e019      	b.n	8001200 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3b06      	subs	r3, #6
 80011d0:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4413      	add	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da02      	bge.n	80011e6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e004      	b.n	80011f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	dd01      	ble.n	80011f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80011ec:	230f      	movs	r3, #15
 80011ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	f023 020f 	bic.w	r2, r3, #15
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	4905      	ldr	r1, [pc, #20]	@ (8001210 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61cb      	str	r3, [r1, #28]
}
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	1fff7558 	.word	0x1fff7558
 8001210:	58000400 	.word	0x58000400

08001214 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <LL_C2_PWR_SetPowerMode+0x28>)
 800121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001222:	f023 0207 	bic.w	r2, r3, #7
 8001226:	4905      	ldr	r1, [pc, #20]	@ (800123c <LL_C2_PWR_SetPowerMode+0x28>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4313      	orrs	r3, r2
 800122c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	58000400 	.word	0x58000400

08001240 <LL_EXTI_EnableIT_32_63>:
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <LL_EXTI_EnableIT_32_63+0x24>)
 800124a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800124e:	4905      	ldr	r1, [pc, #20]	@ (8001264 <LL_EXTI_EnableIT_32_63+0x24>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	58000800 	.word	0x58000800

08001268 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001276:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001282:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800128e:	4313      	orrs	r3, r2
 8001290:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	cafecafe 	.word	0xcafecafe

080012a4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80012b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <LL_DBGMCU_GetDeviceID+0x18>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e0042000 	.word	0xe0042000

080012e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <LL_DBGMCU_GetRevisionID+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0c1b      	lsrs	r3, r3, #16
 80012f2:	b29b      	uxth	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e0042000 	.word	0xe0042000

08001304 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <LL_LPM_EnableSleep+0x1c>)
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <LL_LPM_EnableSleep+0x1c>)
 800130e:	f023 0304 	bic.w	r3, r3, #4
 8001312:	6113      	str	r3, [r2, #16]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	22ff      	movs	r2, #255	@ 0xff
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	22ca      	movs	r2, #202	@ 0xca
 800134a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2253      	movs	r2, #83	@ 0x53
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f023 0207 	bic.w	r2, r3, #7
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <MX_APPE_Config+0x18>)
 800138a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800138e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001390:	f000 f82b 	bl	80013ea <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001394:	f000 f830 	bl	80013f8 <Config_HSE>

  return;
 8001398:	bf00      	nop
}
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58004000 	.word	0x58004000

080013a0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80013a4:	f000 f83c 	bl	8001420 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80013a8:	f000 f854 	bl	8001454 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80013ac:	4904      	ldr	r1, [pc, #16]	@ (80013c0 <MX_APPE_Init+0x20>)
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 fefc 	bl	80021ac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80013b4:	f7ff fde1 	bl	8000f7a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80013b8:	f000 f85a 	bl	8001470 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80013bc:	bf00      	nop
}
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200004a4 	.word	0x200004a4

080013c4 <Init_Smps>:

void Init_Smps(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fed5 	bl	8001178 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80013ce:	2004      	movs	r0, #4
 80013d0:	f7ff fee6 	bl	80011a0 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80013d4:	f7ff fec0 	bl	8001158 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80013d8:	bf00      	nop
}
 80013da:	bd80      	pop	{r7, pc}

080013dc <Init_Exti>:

void Init_Exti(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80013e0:	2050      	movs	r0, #80	@ 0x50
 80013e2:	f7ff ff2d 	bl	8001240 <LL_EXTI_EnableIT_32_63>

  return;
 80013e6:	bf00      	nop
}
 80013e8:	bd80      	pop	{r7, pc}

080013ea <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80013ee:	bf00      	nop
}
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80013fe:	2000      	movs	r0, #0
 8001400:	f00a fbc0 	bl	800bb84 <OTP_Read>
 8001404:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	799b      	ldrb	r3, [r3, #6]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff29 	bl	8001268 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001416:	bf00      	nop
 8001418:	bf00      	nop
}
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <System_Init>:

static void System_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  Init_Smps();
 8001424:	f7ff ffce 	bl	80013c4 <Init_Smps>

  Init_Exti();
 8001428:	f7ff ffd8 	bl	80013dc <Init_Exti>

  Init_Rtc();
 800142c:	f000 f802 	bl	8001434 <Init_Rtc>

  return;
 8001430:	bf00      	nop
}
 8001432:	bd80      	pop	{r7, pc}

08001434 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <Init_Rtc+0x1c>)
 800143a:	f7ff ff80 	bl	800133e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800143e:	2100      	movs	r1, #0
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <Init_Rtc+0x1c>)
 8001442:	f7ff ff8c 	bl	800135e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <Init_Rtc+0x1c>)
 8001448:	f7ff ff6c 	bl	8001324 <LL_RTC_EnableWriteProtection>

  return;
 800144c:	bf00      	nop
}
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40002800 	.word	0x40002800

08001454 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001458:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800145c:	f7ff ff22 	bl	80012a4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001460:	f00c fb8c 	bl	800db7c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001464:	2004      	movs	r0, #4
 8001466:	f7ff fed5 	bl	8001214 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800146a:	bf00      	nop
}
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001476:	f00a f865 	bl	800b544 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <appe_Tl_Init+0x50>)
 800147c:	2100      	movs	r1, #0
 800147e:	2008      	movs	r0, #8
 8001480:	f00c fcba 	bl	800ddf8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <appe_Tl_Init+0x54>)
 8001486:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <appe_Tl_Init+0x58>)
 800148a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	480e      	ldr	r0, [pc, #56]	@ (80014cc <appe_Tl_Init+0x5c>)
 8001492:	f009 ff19 	bl	800b2c8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <appe_Tl_Init+0x60>)
 8001498:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <appe_Tl_Init+0x64>)
 800149c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <appe_Tl_Init+0x68>)
 80014a0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80014a2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80014a6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00a f98b 	bl	800b7c8 <TL_MM_Init>

  TL_Enable();
 80014b2:	f00a f841 	bl	800b538 <TL_Enable>

  return;
 80014b6:	bf00      	nop
}
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800b301 	.word	0x0800b301
 80014c4:	20030734 	.word	0x20030734
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	2003094c 	.word	0x2003094c
 80014d4:	20030840 	.word	0x20030840
 80014d8:	200301f8 	.word	0x200301f8

080014dc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80014e6:	bf00      	nop
}
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	330b      	adds	r3, #11
 8001502:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800150e:	2b07      	cmp	r3, #7
 8001510:	f200 80d0 	bhi.w	80016b4 <APPE_SysUserEvtRx+0x1c0>
 8001514:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <APPE_SysUserEvtRx+0x28>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800153d 	.word	0x0800153d
 8001520:	080015cf 	.word	0x080015cf
 8001524:	080015f1 	.word	0x080015f1
 8001528:	080016b5 	.word	0x080016b5
 800152c:	08001635 	.word	0x08001635
 8001530:	08001659 	.word	0x08001659
 8001534:	08001675 	.word	0x08001675
 8001538:	08001699 	.word	0x08001699
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4618      	mov	r0, r3
 8001542:	f009 fc77 	bl	800ae34 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001546:	485e      	ldr	r0, [pc, #376]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 8001548:	f00a fa3e 	bl	800b9c8 <DbgTraceGetFileName>
 800154c:	4601      	mov	r1, r0
 800154e:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001552:	4a5c      	ldr	r2, [pc, #368]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001554:	485c      	ldr	r0, [pc, #368]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 8001556:	f00d faa7 	bl	800eaa8 <iprintf>
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	4619      	mov	r1, r3
 800155e:	7b7b      	ldrb	r3, [r7, #13]
 8001560:	461a      	mov	r2, r3
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	4859      	ldr	r0, [pc, #356]	@ (80016cc <APPE_SysUserEvtRx+0x1d8>)
 8001566:	f00d fa9f 	bl	800eaa8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800156a:	4855      	ldr	r0, [pc, #340]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 800156c:	f00a fa2c 	bl	800b9c8 <DbgTraceGetFileName>
 8001570:	4601      	mov	r1, r0
 8001572:	f240 136b 	movw	r3, #363	@ 0x16b
 8001576:	4a53      	ldr	r2, [pc, #332]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001578:	4853      	ldr	r0, [pc, #332]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 800157a:	f00d fa95 	bl	800eaa8 <iprintf>
 800157e:	7c3b      	ldrb	r3, [r7, #16]
 8001580:	4619      	mov	r1, r3
 8001582:	4853      	ldr	r0, [pc, #332]	@ (80016d0 <APPE_SysUserEvtRx+0x1dc>)
 8001584:	f00d fa90 	bl	800eaa8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001588:	484d      	ldr	r0, [pc, #308]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 800158a:	f00a fa1d 	bl	800b9c8 <DbgTraceGetFileName>
 800158e:	4601      	mov	r1, r0
 8001590:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001594:	4a4b      	ldr	r2, [pc, #300]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001596:	484c      	ldr	r0, [pc, #304]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 8001598:	f00d fa86 	bl	800eaa8 <iprintf>
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	4619      	mov	r1, r3
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	461a      	mov	r2, r3
 80015a4:	7e3b      	ldrb	r3, [r7, #24]
 80015a6:	484b      	ldr	r0, [pc, #300]	@ (80016d4 <APPE_SysUserEvtRx+0x1e0>)
 80015a8:	f00d fa7e 	bl	800eaa8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80015ac:	4844      	ldr	r0, [pc, #272]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 80015ae:	f00a fa0b 	bl	800b9c8 <DbgTraceGetFileName>
 80015b2:	4601      	mov	r1, r0
 80015b4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80015b8:	4a42      	ldr	r2, [pc, #264]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 80015ba:	4843      	ldr	r0, [pc, #268]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 80015bc:	f00d fa74 	bl	800eaa8 <iprintf>
 80015c0:	4845      	ldr	r0, [pc, #276]	@ (80016d8 <APPE_SysUserEvtRx+0x1e4>)
 80015c2:	f00d fa71 	bl	800eaa8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8e0 	bl	800178c <APPE_SysEvtReadyProcessing>
    break;
 80015cc:	e073      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80015ce:	483c      	ldr	r0, [pc, #240]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 80015d0:	f00a f9fa 	bl	800b9c8 <DbgTraceGetFileName>
 80015d4:	4601      	mov	r1, r0
 80015d6:	f240 1373 	movw	r3, #371	@ 0x173
 80015da:	4a3a      	ldr	r2, [pc, #232]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 80015dc:	483a      	ldr	r0, [pc, #232]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 80015de:	f00d fa63 	bl	800eaa8 <iprintf>
 80015e2:	483e      	ldr	r0, [pc, #248]	@ (80016dc <APPE_SysUserEvtRx+0x1e8>)
 80015e4:	f00d fa60 	bl	800eaa8 <iprintf>
    APPE_SysEvtError(pPayload);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f885 	bl	80016f8 <APPE_SysEvtError>
    break;
 80015ee:	e062      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80015f0:	4833      	ldr	r0, [pc, #204]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 80015f2:	f00a f9e9 	bl	800b9c8 <DbgTraceGetFileName>
 80015f6:	4601      	mov	r1, r0
 80015f8:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 80015fc:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 80015fe:	4832      	ldr	r0, [pc, #200]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 8001600:	f00d fa52 	bl	800eaa8 <iprintf>
 8001604:	4836      	ldr	r0, [pc, #216]	@ (80016e0 <APPE_SysUserEvtRx+0x1ec>)
 8001606:	f00d fab7 	bl	800eb78 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800160a:	482d      	ldr	r0, [pc, #180]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 800160c:	f00a f9dc 	bl	800b9c8 <DbgTraceGetFileName>
 8001610:	4601      	mov	r1, r0
 8001612:	f240 1379 	movw	r3, #377	@ 0x179
 8001616:	4a2b      	ldr	r2, [pc, #172]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001618:	482b      	ldr	r0, [pc, #172]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 800161a:	f00d fa45 	bl	800eaa8 <iprintf>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3302      	adds	r3, #2
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3302      	adds	r3, #2
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	482d      	ldr	r0, [pc, #180]	@ (80016e4 <APPE_SysUserEvtRx+0x1f0>)
 800162e:	f00d fa3b 	bl	800eaa8 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001632:	e040      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001634:	4822      	ldr	r0, [pc, #136]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 8001636:	f00a f9c7 	bl	800b9c8 <DbgTraceGetFileName>
 800163a:	4601      	mov	r1, r0
 800163c:	f240 137f 	movw	r3, #383	@ 0x17f
 8001640:	4a20      	ldr	r2, [pc, #128]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001642:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 8001644:	f00d fa30 	bl	800eaa8 <iprintf>
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	3302      	adds	r3, #2
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4619      	mov	r1, r3
 8001650:	4825      	ldr	r0, [pc, #148]	@ (80016e8 <APPE_SysUserEvtRx+0x1f4>)
 8001652:	f00d fa29 	bl	800eaa8 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001656:	e02e      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001658:	4819      	ldr	r0, [pc, #100]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 800165a:	f00a f9b5 	bl	800b9c8 <DbgTraceGetFileName>
 800165e:	4601      	mov	r1, r0
 8001660:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001664:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001666:	4818      	ldr	r0, [pc, #96]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 8001668:	f00d fa1e 	bl	800eaa8 <iprintf>
 800166c:	481f      	ldr	r0, [pc, #124]	@ (80016ec <APPE_SysUserEvtRx+0x1f8>)
 800166e:	f00d fa1b 	bl	800eaa8 <iprintf>
    break;
 8001672:	e020      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 8001676:	f00a f9a7 	bl	800b9c8 <DbgTraceGetFileName>
 800167a:	4601      	mov	r1, r0
 800167c:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001680:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 8001682:	4811      	ldr	r0, [pc, #68]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 8001684:	f00d fa10 	bl	800eaa8 <iprintf>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	3302      	adds	r3, #2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4817      	ldr	r0, [pc, #92]	@ (80016f0 <APPE_SysUserEvtRx+0x1fc>)
 8001692:	f00d fa09 	bl	800eaa8 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001696:	e00e      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <APPE_SysUserEvtRx+0x1cc>)
 800169a:	f00a f995 	bl	800b9c8 <DbgTraceGetFileName>
 800169e:	4601      	mov	r1, r0
 80016a0:	f240 138d 	movw	r3, #397	@ 0x18d
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <APPE_SysUserEvtRx+0x1d0>)
 80016a6:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <APPE_SysUserEvtRx+0x1d4>)
 80016a8:	f00d f9fe 	bl	800eaa8 <iprintf>
 80016ac:	4811      	ldr	r0, [pc, #68]	@ (80016f4 <APPE_SysUserEvtRx+0x200>)
 80016ae:	f00d f9fb 	bl	800eaa8 <iprintf>
    break;
 80016b2:	e000      	b.n	80016b6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80016b4:	bf00      	nop
  }

  return;
 80016b6:	bf00      	nop
}
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	08010eac 	.word	0x08010eac
 80016c4:	08011ebc 	.word	0x08011ebc
 80016c8:	08010ec4 	.word	0x08010ec4
 80016cc:	08010ed8 	.word	0x08010ed8
 80016d0:	08010efc 	.word	0x08010efc
 80016d4:	08010f18 	.word	0x08010f18
 80016d8:	08010f30 	.word	0x08010f30
 80016dc:	08010f50 	.word	0x08010f50
 80016e0:	08010f74 	.word	0x08010f74
 80016e4:	08010fc4 	.word	0x08010fc4
 80016e8:	08010fec 	.word	0x08010fec
 80016ec:	08011028 	.word	0x08011028
 80016f0:	0801104c 	.word	0x0801104c
 80016f4:	08011088 	.word	0x08011088

080016f8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	330b      	adds	r3, #11
 8001706:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3302      	adds	r3, #2
 800170c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800170e:	4819      	ldr	r0, [pc, #100]	@ (8001774 <APPE_SysEvtError+0x7c>)
 8001710:	f00a f95a 	bl	800b9c8 <DbgTraceGetFileName>
 8001714:	4601      	mov	r1, r0
 8001716:	f240 13a5 	movw	r3, #421	@ 0x1a5
 800171a:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <APPE_SysEvtError+0x80>)
 800171c:	4817      	ldr	r0, [pc, #92]	@ (800177c <APPE_SysEvtError+0x84>)
 800171e:	f00d f9c3 	bl	800eaa8 <iprintf>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	4815      	ldr	r0, [pc, #84]	@ (8001780 <APPE_SysEvtError+0x88>)
 800172a:	f00d f9bd 	bl	800eaa8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001736:	480f      	ldr	r0, [pc, #60]	@ (8001774 <APPE_SysEvtError+0x7c>)
 8001738:	f00a f946 	bl	800b9c8 <DbgTraceGetFileName>
 800173c:	4601      	mov	r1, r0
 800173e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001742:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <APPE_SysEvtError+0x80>)
 8001744:	480d      	ldr	r0, [pc, #52]	@ (800177c <APPE_SysEvtError+0x84>)
 8001746:	f00d f9af 	bl	800eaa8 <iprintf>
 800174a:	480e      	ldr	r0, [pc, #56]	@ (8001784 <APPE_SysEvtError+0x8c>)
 800174c:	f00d fa14 	bl	800eb78 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001750:	e00d      	b.n	800176e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001752:	4808      	ldr	r0, [pc, #32]	@ (8001774 <APPE_SysEvtError+0x7c>)
 8001754:	f00a f938 	bl	800b9c8 <DbgTraceGetFileName>
 8001758:	4601      	mov	r1, r0
 800175a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 800175e:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <APPE_SysEvtError+0x80>)
 8001760:	4806      	ldr	r0, [pc, #24]	@ (800177c <APPE_SysEvtError+0x84>)
 8001762:	f00d f9a1 	bl	800eaa8 <iprintf>
 8001766:	4808      	ldr	r0, [pc, #32]	@ (8001788 <APPE_SysEvtError+0x90>)
 8001768:	f00d fa06 	bl	800eb78 <puts>
  return;
 800176c:	bf00      	nop
}
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	08010eac 	.word	0x08010eac
 8001778:	08011ed0 	.word	0x08011ed0
 800177c:	08010ec4 	.word	0x08010ec4
 8001780:	080110ac 	.word	0x080110ac
 8001784:	080110dc 	.word	0x080110dc
 8001788:	08011118 	.word	0x08011118

0800178c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	330b      	adds	r3, #11
 80017b0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3302      	adds	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d146      	bne.n	800184e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80017c0:	4836      	ldr	r0, [pc, #216]	@ (800189c <APPE_SysEvtReadyProcessing+0x110>)
 80017c2:	f00a f901 	bl	800b9c8 <DbgTraceGetFileName>
 80017c6:	4601      	mov	r1, r0
 80017c8:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80017cc:	4a34      	ldr	r2, [pc, #208]	@ (80018a0 <APPE_SysEvtReadyProcessing+0x114>)
 80017ce:	4835      	ldr	r0, [pc, #212]	@ (80018a4 <APPE_SysEvtReadyProcessing+0x118>)
 80017d0:	f00d f96a 	bl	800eaa8 <iprintf>
 80017d4:	4834      	ldr	r0, [pc, #208]	@ (80018a8 <APPE_SysEvtReadyProcessing+0x11c>)
 80017d6:	f00d f9cf 	bl	800eb78 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80017da:	f7ff fbe1 	bl	8000fa0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80017de:	230f      	movs	r3, #15
 80017e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80017e2:	237f      	movs	r3, #127	@ 0x7f
 80017e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80017e6:	f7ff fd7f 	bl	80012e8 <LL_DBGMCU_GetRevisionID>
 80017ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80017ec:	482b      	ldr	r0, [pc, #172]	@ (800189c <APPE_SysEvtReadyProcessing+0x110>)
 80017ee:	f00a f8eb 	bl	800b9c8 <DbgTraceGetFileName>
 80017f2:	4601      	mov	r1, r0
 80017f4:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80017f8:	4a29      	ldr	r2, [pc, #164]	@ (80018a0 <APPE_SysEvtReadyProcessing+0x114>)
 80017fa:	482a      	ldr	r0, [pc, #168]	@ (80018a4 <APPE_SysEvtReadyProcessing+0x118>)
 80017fc:	f00d f954 	bl	800eaa8 <iprintf>
 8001800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001802:	482a      	ldr	r0, [pc, #168]	@ (80018ac <APPE_SysEvtReadyProcessing+0x120>)
 8001804:	f00d f950 	bl	800eaa8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	b29b      	uxth	r3, r3
 800180c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800180e:	f7ff fd5d 	bl	80012cc <LL_DBGMCU_GetDeviceID>
 8001812:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001814:	4821      	ldr	r0, [pc, #132]	@ (800189c <APPE_SysEvtReadyProcessing+0x110>)
 8001816:	f00a f8d7 	bl	800b9c8 <DbgTraceGetFileName>
 800181a:	4601      	mov	r1, r0
 800181c:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001820:	4a1f      	ldr	r2, [pc, #124]	@ (80018a0 <APPE_SysEvtReadyProcessing+0x114>)
 8001822:	4820      	ldr	r0, [pc, #128]	@ (80018a4 <APPE_SysEvtReadyProcessing+0x118>)
 8001824:	f00d f940 	bl	800eaa8 <iprintf>
 8001828:	6a39      	ldr	r1, [r7, #32]
 800182a:	4821      	ldr	r0, [pc, #132]	@ (80018b0 <APPE_SysEvtReadyProcessing+0x124>)
 800182c:	f00d f93c 	bl	800eaa8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	b29b      	uxth	r3, r3
 8001834:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4618      	mov	r0, r3
 800183c:	f009 fae4 	bl	800ae08 <SHCI_C2_Config>

    APP_BLE_Init();
 8001840:	f00a fea6 	bl	800c590 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001844:	2100      	movs	r1, #0
 8001846:	2001      	movs	r0, #1
 8001848:	f00c f9aa 	bl	800dba0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800184c:	e022      	b.n	8001894 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d110      	bne.n	8001878 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001856:	4811      	ldr	r0, [pc, #68]	@ (800189c <APPE_SysEvtReadyProcessing+0x110>)
 8001858:	f00a f8b6 	bl	800b9c8 <DbgTraceGetFileName>
 800185c:	4601      	mov	r1, r0
 800185e:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001862:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <APPE_SysEvtReadyProcessing+0x114>)
 8001864:	480f      	ldr	r0, [pc, #60]	@ (80018a4 <APPE_SysEvtReadyProcessing+0x118>)
 8001866:	f00d f91f 	bl	800eaa8 <iprintf>
 800186a:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <APPE_SysEvtReadyProcessing+0x128>)
 800186c:	f00d f91c 	bl	800eaa8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
  return;
 8001876:	e00d      	b.n	8001894 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001878:	4808      	ldr	r0, [pc, #32]	@ (800189c <APPE_SysEvtReadyProcessing+0x110>)
 800187a:	f00a f8a5 	bl	800b9c8 <DbgTraceGetFileName>
 800187e:	4601      	mov	r1, r0
 8001880:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <APPE_SysEvtReadyProcessing+0x114>)
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <APPE_SysEvtReadyProcessing+0x118>)
 8001888:	f00d f90e 	bl	800eaa8 <iprintf>
 800188c:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <APPE_SysEvtReadyProcessing+0x12c>)
 800188e:	f00d f90b 	bl	800eaa8 <iprintf>
  return;
 8001892:	bf00      	nop
}
 8001894:	3728      	adds	r7, #40	@ 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	08010eac 	.word	0x08010eac
 80018a0:	08011ee4 	.word	0x08011ee4
 80018a4:	08010ec4 	.word	0x08010ec4
 80018a8:	08011150 	.word	0x08011150
 80018ac:	0801116c 	.word	0x0801116c
 80018b0:	08011190 	.word	0x08011190
 80018b4:	080111b0 	.word	0x080111b0
 80018b8:	080111e4 	.word	0x080111e4

080018bc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f002 f888 	bl	80039d8 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d00a      	beq.n	80018ec <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80018d6:	f002 f897 	bl	8003a08 <HAL_GetTickFreq>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e4:	e002      	b.n	80018ec <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80018e6:	f7ff fd0d 	bl	8001304 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80018ea:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80018ec:	f002 f874 	bl	80039d8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f4      	bhi.n	80018e6 <HAL_Delay+0x2a>
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	f00c f977 	bl	800dc00 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}

08001916 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800191a:	bf00      	nop
}
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800192e:	f04f 30ff 	mov.w	r0, #4294967295
 8001932:	f00c f965 	bl	800dc00 <UTIL_SEQ_Run>
  return;
 8001936:	bf00      	nop
}
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001946:	2100      	movs	r1, #0
 8001948:	2008      	movs	r0, #8
 800194a:	f00c fa77 	bl	800de3c <UTIL_SEQ_SetTask>
  return;
 800194e:	bf00      	nop
}
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800195e:	2002      	movs	r0, #2
 8001960:	f00c fad8 	bl	800df14 <UTIL_SEQ_SetEvt>
  return;
 8001964:	bf00      	nop
}
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001974:	2002      	movs	r0, #2
 8001976:	f00c faed 	bl	800df54 <UTIL_SEQ_WaitEvt>
  return;
 800197a:	bf00      	nop
}
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <LL_EXTI_EnableIT_0_31>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <LL_EXTI_EnableIT_0_31+0x24>)
 800198e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001992:	4905      	ldr	r1, [pc, #20]	@ (80019a8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	58000800 	.word	0x58000800

080019ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4904      	ldr	r1, [pc, #16]	@ (80019cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	58000800 	.word	0x58000800

080019d0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <ReadRtcSsrValue+0x3c>)
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	b29b      	uxth	r3, r3
 80019dc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <ReadRtcSsrValue+0x3c>)
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019e6:	e005      	b.n	80019f4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <ReadRtcSsrValue+0x3c>)
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1f5      	bne.n	80019e8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019fc:	683b      	ldr	r3, [r7, #0]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40002800 	.word	0x40002800

08001a10 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001a20:	79ba      	ldrb	r2, [r7, #6]
 8001a22:	491d      	ldr	r1, [pc, #116]	@ (8001a98 <LinkTimerAfter+0x88>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3315      	adds	r3, #21
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d009      	beq.n	8001a4e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	4916      	ldr	r1, [pc, #88]	@ (8001a98 <LinkTimerAfter+0x88>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3314      	adds	r3, #20
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	4911      	ldr	r1, [pc, #68]	@ (8001a98 <LinkTimerAfter+0x88>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3315      	adds	r3, #21
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a62:	79fa      	ldrb	r2, [r7, #7]
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <LinkTimerAfter+0x88>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3314      	adds	r3, #20
 8001a72:	79ba      	ldrb	r2, [r7, #6]
 8001a74:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a76:	79ba      	ldrb	r2, [r7, #6]
 8001a78:	4907      	ldr	r1, [pc, #28]	@ (8001a98 <LinkTimerAfter+0x88>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3315      	adds	r3, #21
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	701a      	strb	r2, [r3, #0]

  return;
 8001a8a:	bf00      	nop
}
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000026c 	.word	0x2000026c

08001a9c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001aac:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <LinkTimerBefore+0xb8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	79ba      	ldrb	r2, [r7, #6]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d032      	beq.n	8001b1e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001ab8:	79ba      	ldrb	r2, [r7, #6]
 8001aba:	4927      	ldr	r1, [pc, #156]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3315      	adds	r3, #21
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ae0:	79fa      	ldrb	r2, [r7, #7]
 8001ae2:	491d      	ldr	r1, [pc, #116]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	3315      	adds	r3, #21
 8001af0:	79ba      	ldrb	r2, [r7, #6]
 8001af2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	4918      	ldr	r1, [pc, #96]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	3314      	adds	r3, #20
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b08:	79ba      	ldrb	r2, [r7, #6]
 8001b0a:	4913      	ldr	r1, [pc, #76]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	3314      	adds	r3, #20
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001b1c:	e014      	b.n	8001b48 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3315      	adds	r3, #21
 8001b2e:	79ba      	ldrb	r2, [r7, #6]
 8001b30:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b32:	79ba      	ldrb	r2, [r7, #6]
 8001b34:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <LinkTimerBefore+0xbc>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3314      	adds	r3, #20
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	701a      	strb	r2, [r3, #0]
  return;
 8001b46:	bf00      	nop
}
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200002fc 	.word	0x200002fc
 8001b58:	2000026c 	.word	0x2000026c

08001b5c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <linkTimer+0x144>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b06      	cmp	r3, #6
 8001b6e:	d118      	bne.n	8001ba2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca0 <linkTimer+0x144>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca4 <linkTimer+0x148>)
 8001b78:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b7a:	4a49      	ldr	r2, [pc, #292]	@ (8001ca0 <linkTimer+0x144>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b80:	79fa      	ldrb	r2, [r7, #7]
 8001b82:	4949      	ldr	r1, [pc, #292]	@ (8001ca8 <linkTimer+0x14c>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3315      	adds	r3, #21
 8001b90:	2206      	movs	r2, #6
 8001b92:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <linkTimer+0x150>)
 8001b96:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	81fb      	strh	r3, [r7, #14]
 8001ba0:	e078      	b.n	8001c94 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001ba2:	f000 f909 	bl	8001db8 <ReturnTimeElapsed>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001baa:	79fa      	ldrb	r2, [r7, #7]
 8001bac:	493e      	ldr	r1, [pc, #248]	@ (8001ca8 <linkTimer+0x14c>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3308      	adds	r3, #8
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	4419      	add	r1, r3
 8001bc2:	4839      	ldr	r0, [pc, #228]	@ (8001ca8 <linkTimer+0x14c>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4403      	add	r3, r0
 8001bce:	3308      	adds	r3, #8
 8001bd0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	4934      	ldr	r1, [pc, #208]	@ (8001ca8 <linkTimer+0x14c>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3308      	adds	r3, #8
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <linkTimer+0x144>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca8 <linkTimer+0x14c>)
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d337      	bcc.n	8001c74 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001c04:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <linkTimer+0x144>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001c0a:	7b7a      	ldrb	r2, [r7, #13]
 8001c0c:	4926      	ldr	r1, [pc, #152]	@ (8001ca8 <linkTimer+0x14c>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3315      	adds	r3, #21
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c1e:	e013      	b.n	8001c48 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001c20:	7b7a      	ldrb	r2, [r7, #13]
 8001c22:	4921      	ldr	r1, [pc, #132]	@ (8001ca8 <linkTimer+0x14c>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3315      	adds	r3, #21
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c34:	7b7a      	ldrb	r2, [r7, #13]
 8001c36:	491c      	ldr	r1, [pc, #112]	@ (8001ca8 <linkTimer+0x14c>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3315      	adds	r3, #21
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c48:	7b3b      	ldrb	r3, [r7, #12]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d00b      	beq.n	8001c66 <linkTimer+0x10a>
 8001c4e:	7b3a      	ldrb	r2, [r7, #12]
 8001c50:	4915      	ldr	r1, [pc, #84]	@ (8001ca8 <linkTimer+0x14c>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3308      	adds	r3, #8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d2dc      	bcs.n	8001c20 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c66:	7b7a      	ldrb	r2, [r7, #13]
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fecf 	bl	8001a10 <LinkTimerAfter>
 8001c72:	e00f      	b.n	8001c94 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <linkTimer+0x144>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff0c 	bl	8001a9c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <linkTimer+0x144>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <linkTimer+0x148>)
 8001c8c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <linkTimer+0x144>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c94:	89fb      	ldrh	r3, [r7, #14]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200002fc 	.word	0x200002fc
 8001ca4:	200002fd 	.word	0x200002fd
 8001ca8:	2000026c 	.word	0x2000026c
 8001cac:	20000300 	.word	0x20000300

08001cb0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001cc0:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <UnlinkTimer+0xf8>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d111      	bne.n	8001cf0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ccc:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <UnlinkTimer+0xf8>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <UnlinkTimer+0xfc>)
 8001cd4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001cd6:	79fa      	ldrb	r2, [r7, #7]
 8001cd8:	4935      	ldr	r1, [pc, #212]	@ (8001db0 <UnlinkTimer+0x100>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3315      	adds	r3, #21
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <UnlinkTimer+0xf8>)
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e03e      	b.n	8001d6e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	492f      	ldr	r1, [pc, #188]	@ (8001db0 <UnlinkTimer+0x100>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3314      	adds	r3, #20
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001d04:	79fa      	ldrb	r2, [r7, #7]
 8001d06:	492a      	ldr	r1, [pc, #168]	@ (8001db0 <UnlinkTimer+0x100>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3315      	adds	r3, #21
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001d18:	79f9      	ldrb	r1, [r7, #7]
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	4824      	ldr	r0, [pc, #144]	@ (8001db0 <UnlinkTimer+0x100>)
 8001d1e:	460b      	mov	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	440b      	add	r3, r1
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4403      	add	r3, r0
 8001d28:	3315      	adds	r3, #21
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b2d8      	uxtb	r0, r3
 8001d2e:	4920      	ldr	r1, [pc, #128]	@ (8001db0 <UnlinkTimer+0x100>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	3315      	adds	r3, #21
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d013      	beq.n	8001d6e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d46:	79f9      	ldrb	r1, [r7, #7]
 8001d48:	7bba      	ldrb	r2, [r7, #14]
 8001d4a:	4819      	ldr	r0, [pc, #100]	@ (8001db0 <UnlinkTimer+0x100>)
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	440b      	add	r3, r1
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4403      	add	r3, r0
 8001d56:	3314      	adds	r3, #20
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2d8      	uxtb	r0, r3
 8001d5c:	4914      	ldr	r1, [pc, #80]	@ (8001db0 <UnlinkTimer+0x100>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3314      	adds	r3, #20
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	490f      	ldr	r1, [pc, #60]	@ (8001db0 <UnlinkTimer+0x100>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <UnlinkTimer+0xf8>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d107      	bne.n	8001d9c <UnlinkTimer+0xec>
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d104      	bne.n	8001d9c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <UnlinkTimer+0x104>)
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
}
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	200002fc 	.word	0x200002fc
 8001dac:	200002fd 	.word	0x200002fd
 8001db0:	2000026c 	.word	0x2000026c
 8001db4:	20000300 	.word	0x20000300

08001db8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <ReturnTimeElapsed+0x70>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d026      	beq.n	8001e16 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001dc8:	f7ff fe02 	bl	80019d0 <ReadRtcSsrValue>
 8001dcc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <ReturnTimeElapsed+0x70>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d805      	bhi.n	8001de4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <ReturnTimeElapsed+0x70>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	e00a      	b.n	8001dfa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <ReturnTimeElapsed+0x74>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <ReturnTimeElapsed+0x70>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <ReturnTimeElapsed+0x78>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <ReturnTimeElapsed+0x7c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	40d3      	lsrs	r3, r2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	b29b      	uxth	r3, r3
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000300 	.word	0x20000300
 8001e2c:	20000308 	.word	0x20000308
 8001e30:	20000306 	.word	0x20000306
 8001e34:	20000305 	.word	0x20000305

08001e38 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d108      	bne.n	8001e5a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e48:	f7ff fdc2 	bl	80019d0 <ReadRtcSsrValue>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <RestartWakeupCounter+0x9c>)
 8001e50:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f001 ff6d 	bl	8003d32 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e58:	e039      	b.n	8001ece <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d803      	bhi.n	8001e68 <RestartWakeupCounter+0x30>
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <RestartWakeupCounter+0xa0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d002      	beq.n	8001e6e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e6e:	bf00      	nop
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <RestartWakeupCounter+0xa4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f8      	beq.n	8001e70 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <RestartWakeupCounter+0xa4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <RestartWakeupCounter+0xa4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e8e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <RestartWakeupCounter+0xa8>)
 8001e92:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e96:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f001 ff58 	bl	8003d4e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <RestartWakeupCounter+0xac>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	88fa      	ldrh	r2, [r7, #6]
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <RestartWakeupCounter+0xac>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001eae:	f7ff fd8f 	bl	80019d0 <ReadRtcSsrValue>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <RestartWakeupCounter+0x9c>)
 8001eb6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <RestartWakeupCounter+0xa4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <RestartWakeupCounter+0xa4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ec6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ec8:	f3af 8000 	nop.w
  return ;
 8001ecc:	bf00      	nop
}
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000300 	.word	0x20000300
 8001ed8:	20000305 	.word	0x20000305
 8001edc:	200004a4 	.word	0x200004a4
 8001ee0:	58000800 	.word	0x58000800
 8001ee4:	40002800 	.word	0x40002800

08001ee8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001eee:	4b45      	ldr	r3, [pc, #276]	@ (8002004 <RescheduleTimerList+0x11c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d107      	bne.n	8001f0c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001efc:	bf00      	nop
 8001efe:	4b42      	ldr	r3, [pc, #264]	@ (8002008 <RescheduleTimerList+0x120>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f8      	bne.n	8001efe <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <RescheduleTimerList+0x120>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <RescheduleTimerList+0x120>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <RescheduleTimerList+0x124>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	493a      	ldr	r1, [pc, #232]	@ (8002010 <RescheduleTimerList+0x128>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	3308      	adds	r3, #8
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f36:	f7ff ff3f 	bl	8001db8 <ReturnTimeElapsed>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d205      	bcs.n	8001f52 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f4a:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <RescheduleTimerList+0x12c>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e04d      	b.n	8001fee <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4a30      	ldr	r2, [pc, #192]	@ (8002018 <RescheduleTimerList+0x130>)
 8001f56:	8812      	ldrh	r2, [r2, #0]
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d906      	bls.n	8001f72 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f64:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <RescheduleTimerList+0x130>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <RescheduleTimerList+0x12c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	e03d      	b.n	8001fee <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <RescheduleTimerList+0x12c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f82:	e034      	b.n	8001fee <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	4922      	ldr	r1, [pc, #136]	@ (8002010 <RescheduleTimerList+0x128>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	3308      	adds	r3, #8
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d20a      	bcs.n	8001fb2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	491c      	ldr	r1, [pc, #112]	@ (8002010 <RescheduleTimerList+0x128>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	3308      	adds	r3, #8
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e013      	b.n	8001fda <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	4916      	ldr	r1, [pc, #88]	@ (8002010 <RescheduleTimerList+0x128>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	1ac9      	subs	r1, r1, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	@ (8002010 <RescheduleTimerList+0x128>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4403      	add	r3, r0
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	490c      	ldr	r1, [pc, #48]	@ (8002010 <RescheduleTimerList+0x128>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3315      	adds	r3, #21
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b06      	cmp	r3, #6
 8001ff2:	d1c7      	bne.n	8001f84 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001ff4:	89bb      	ldrh	r3, [r7, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff1e 	bl	8001e38 <RestartWakeupCounter>

  return ;
 8001ffc:	bf00      	nop
}
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40002800 	.word	0x40002800
 8002008:	200004a4 	.word	0x200004a4
 800200c:	200002fc 	.word	0x200002fc
 8002010:	2000026c 	.word	0x2000026c
 8002014:	20000304 	.word	0x20000304
 8002018:	2000030a 	.word	0x2000030a

0800201c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002022:	f3ef 8310 	mrs	r3, PRIMASK
 8002026:	617b      	str	r3, [r7, #20]
  return(result);
 8002028:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002030:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	22ca      	movs	r2, #202	@ 0xca
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24
 8002038:	4b57      	ldr	r3, [pc, #348]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2253      	movs	r2, #83	@ 0x53
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002040:	4b55      	ldr	r3, [pc, #340]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b54      	ldr	r3, [pc, #336]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800204e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002050:	4b52      	ldr	r3, [pc, #328]	@ (800219c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002058:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800205c:	4950      	ldr	r1, [pc, #320]	@ (80021a0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	330c      	adds	r3, #12
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d16e      	bne.n	8002150 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002072:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002076:	494a      	ldr	r1, [pc, #296]	@ (80021a0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002086:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800208a:	4945      	ldr	r1, [pc, #276]	@ (80021a0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	3310      	adds	r3, #16
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800209c:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04c      	beq.n	8002140 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80020a6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020aa:	493d      	ldr	r1, [pc, #244]	@ (80021a0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	330d      	adds	r3, #13
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d124      	bne.n	800210a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020c4:	2101      	movs	r1, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fdf2 	bl	8001cb0 <UnlinkTimer>
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f383 8810 	msr	PRIMASK, r3
}
 80020d6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80020d8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020dc:	4930      	ldr	r1, [pc, #192]	@ (80021a0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3304      	adds	r3, #4
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa32 	bl	800255c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	22ca      	movs	r2, #202	@ 0xca
 80020fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2253      	movs	r2, #83	@ 0x53
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24
 8002108:	e012      	b.n	8002130 <HW_TS_RTC_Wakeup_Handler+0x114>
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f383 8810 	msr	PRIMASK, r3
}
 8002114:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002116:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f99a 	bl	8002454 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	22ca      	movs	r2, #202	@ 0xca
 8002126:	625a      	str	r2, [r3, #36]	@ 0x24
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2253      	movs	r2, #83	@ 0x53
 800212e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	4619      	mov	r1, r3
 8002138:	69b8      	ldr	r0, [r7, #24]
 800213a:	f000 fa95 	bl	8002668 <HW_TS_RTC_Int_AppNot>
 800213e:	e022      	b.n	8002186 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002140:	f7ff fed2 	bl	8001ee8 <RescheduleTimerList>
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f383 8810 	msr	PRIMASK, r3
}
 800214e:	e01a      	b.n	8002186 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002150:	bf00      	nop
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f8      	beq.n	8002152 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002170:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002174:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f383 8810 	msr	PRIMASK, r3
}
 8002184:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002186:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	22ff      	movs	r2, #255	@ 0xff
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800218e:	bf00      	nop
}
 8002190:	3728      	adds	r7, #40	@ 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200004a4 	.word	0x200004a4
 800219c:	200002fc 	.word	0x200002fc
 80021a0:	2000026c 	.word	0x2000026c
 80021a4:	20000304 	.word	0x20000304
 80021a8:	58000800 	.word	0x58000800

080021ac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <HW_TS_Init+0x188>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	22ca      	movs	r2, #202	@ 0xca
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24
 80021c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002334 <HW_TS_Init+0x188>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2253      	movs	r2, #83	@ 0x53
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80021c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002338 <HW_TS_Init+0x18c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <HW_TS_Init+0x18c>)
 80021ce:	f043 0320 	orr.w	r3, r3, #32
 80021d2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80021d4:	4b58      	ldr	r3, [pc, #352]	@ (8002338 <HW_TS_Init+0x18c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f1c3 0304 	rsb	r3, r3, #4
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b55      	ldr	r3, [pc, #340]	@ (800233c <HW_TS_Init+0x190>)
 80021e8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021ea:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HW_TS_Init+0x18c>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021f2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021f6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	fa92 f2a2 	rbit	r2, r2
 80021fe:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	2a00      	cmp	r2, #0
 8002208:	d101      	bne.n	800220e <HW_TS_Init+0x62>
  {
    return 32U;
 800220a:	2220      	movs	r2, #32
 800220c:	e003      	b.n	8002216 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3301      	adds	r3, #1
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b48      	ldr	r3, [pc, #288]	@ (8002340 <HW_TS_Init+0x194>)
 8002220:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002222:	4b45      	ldr	r3, [pc, #276]	@ (8002338 <HW_TS_Init+0x18c>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800222c:	b29b      	uxth	r3, r3
 800222e:	3301      	adds	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b44      	ldr	r3, [pc, #272]	@ (8002344 <HW_TS_Init+0x198>)
 8002234:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HW_TS_Init+0x198>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	3b01      	subs	r3, #1
 800223c:	4a40      	ldr	r2, [pc, #256]	@ (8002340 <HW_TS_Init+0x194>)
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002248:	4a3c      	ldr	r2, [pc, #240]	@ (800233c <HW_TS_Init+0x190>)
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	40d3      	lsrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002256:	4293      	cmp	r3, r2
 8002258:	d904      	bls.n	8002264 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HW_TS_Init+0x19c>)
 800225c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002260:	801a      	strh	r2, [r3, #0]
 8002262:	e003      	b.n	800226c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HW_TS_Init+0x19c>)
 800226a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800226c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002270:	f7ff fb9c 	bl	80019ac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002274:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002278:	f7ff fb84 	bl	8001984 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d13d      	bne.n	80022fe <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002282:	4b32      	ldr	r3, [pc, #200]	@ (800234c <HW_TS_Init+0x1a0>)
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002288:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HW_TS_Init+0x1a4>)
 800228a:	f04f 32ff 	mov.w	r2, #4294967295
 800228e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002290:	2300      	movs	r3, #0
 8002292:	77fb      	strb	r3, [r7, #31]
 8002294:	e00c      	b.n	80022b0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002296:	7ffa      	ldrb	r2, [r7, #31]
 8002298:	492e      	ldr	r1, [pc, #184]	@ (8002354 <HW_TS_Init+0x1a8>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	330c      	adds	r3, #12
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80022aa:	7ffb      	ldrb	r3, [r7, #31]
 80022ac:	3301      	adds	r3, #1
 80022ae:	77fb      	strb	r3, [r7, #31]
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d9ef      	bls.n	8002296 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80022b6:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <HW_TS_Init+0x1ac>)
 80022b8:	2206      	movs	r2, #6
 80022ba:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80022bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <HW_TS_Init+0x188>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <HW_TS_Init+0x188>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HW_TS_Init+0x188>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <HW_TS_Init+0x188>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022dc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022de:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <HW_TS_Init+0x1b0>)
 80022e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022e4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022e6:	2003      	movs	r0, #3
 80022e8:	f001 fd31 	bl	8003d4e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HW_TS_Init+0x188>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HW_TS_Init+0x188>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e009      	b.n	8002312 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <HW_TS_Init+0x188>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800230c:	2003      	movs	r0, #3
 800230e:	f001 fd10 	bl	8003d32 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HW_TS_Init+0x188>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	22ff      	movs	r2, #255	@ 0xff
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800231a:	2200      	movs	r2, #0
 800231c:	2103      	movs	r1, #3
 800231e:	2003      	movs	r0, #3
 8002320:	f001 fcc5 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002324:	2003      	movs	r0, #3
 8002326:	f001 fcdc 	bl	8003ce2 <HAL_NVIC_EnableIRQ>

  return;
 800232a:	bf00      	nop
}
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200004a4 	.word	0x200004a4
 8002338:	40002800 	.word	0x40002800
 800233c:	20000305 	.word	0x20000305
 8002340:	20000306 	.word	0x20000306
 8002344:	20000308 	.word	0x20000308
 8002348:	2000030a 	.word	0x2000030a
 800234c:	20000304 	.word	0x20000304
 8002350:	20000300 	.word	0x20000300
 8002354:	2000026c 	.word	0x2000026c
 8002358:	200002fc 	.word	0x200002fc
 800235c:	58000800 	.word	0x58000800

08002360 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	@ 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002376:	f3ef 8310 	mrs	r3, PRIMASK
 800237a:	61fb      	str	r3, [r7, #28]
  return(result);
 800237c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800237e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002384:	e004      	b.n	8002390 <HW_TS_Create+0x30>
  {
    loop++;
 8002386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800238a:	3301      	adds	r3, #1
 800238c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002390:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002394:	2b05      	cmp	r3, #5
 8002396:	d80c      	bhi.n	80023b2 <HW_TS_Create+0x52>
 8002398:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800239c:	492c      	ldr	r1, [pc, #176]	@ (8002450 <HW_TS_Create+0xf0>)
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	330c      	adds	r3, #12
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e9      	bne.n	8002386 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d038      	beq.n	800242c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80023ba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023be:	4924      	ldr	r1, [pc, #144]	@ (8002450 <HW_TS_Create+0xf0>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	330c      	adds	r3, #12
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f383 8810 	msr	PRIMASK, r3
}
 80023da:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80023dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023e0:	491b      	ldr	r1, [pc, #108]	@ (8002450 <HW_TS_Create+0xf0>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3310      	adds	r3, #16
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80023f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023f6:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HW_TS_Create+0xf0>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	330d      	adds	r3, #13
 8002404:	79fa      	ldrb	r2, [r7, #7]
 8002406:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002408:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800240c:	4910      	ldr	r1, [pc, #64]	@ (8002450 <HW_TS_Create+0xf0>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002422:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800242a:	e008      	b.n	800243e <HW_TS_Create+0xde>
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f383 8810 	msr	PRIMASK, r3
}
 8002436:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800243e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002442:	4618      	mov	r0, r3
 8002444:	372c      	adds	r7, #44	@ 0x2c
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000026c 	.word	0x2000026c

08002454 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245e:	f3ef 8310 	mrs	r3, PRIMASK
 8002462:	60fb      	str	r3, [r7, #12]
  return(result);
 8002464:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002466:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800246c:	2003      	movs	r0, #3
 800246e:	f001 fc46 	bl	8003cfe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002472:	4b34      	ldr	r3, [pc, #208]	@ (8002544 <HW_TS_Stop+0xf0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	22ca      	movs	r2, #202	@ 0xca
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24
 800247a:	4b32      	ldr	r3, [pc, #200]	@ (8002544 <HW_TS_Stop+0xf0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2253      	movs	r2, #83	@ 0x53
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	4930      	ldr	r1, [pc, #192]	@ (8002548 <HW_TS_Stop+0xf4>)
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	330c      	adds	r3, #12
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d142      	bne.n	8002520 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fc06 	bl	8001cb0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <HW_TS_Stop+0xf8>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d12f      	bne.n	8002510 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HW_TS_Stop+0xfc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024bc:	d107      	bne.n	80024ce <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80024be:	bf00      	nop
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HW_TS_Stop+0xf0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f8      	bne.n	80024c0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HW_TS_Stop+0xf0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HW_TS_Stop+0xf0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024dc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024de:	bf00      	nop
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HW_TS_Stop+0xf0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f8      	beq.n	80024e0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HW_TS_Stop+0xf0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <HW_TS_Stop+0xf0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024fe:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <HW_TS_Stop+0x100>)
 8002502:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002506:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002508:	2003      	movs	r0, #3
 800250a:	f001 fc20 	bl	8003d4e <HAL_NVIC_ClearPendingIRQ>
 800250e:	e007      	b.n	8002520 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HW_TS_Stop+0x104>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	7cfa      	ldrb	r2, [r7, #19]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800251c:	f7ff fce4 	bl	8001ee8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HW_TS_Stop+0xf0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	22ff      	movs	r2, #255	@ 0xff
 8002526:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002528:	2003      	movs	r0, #3
 800252a:	f001 fbda 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f383 8810 	msr	PRIMASK, r3
}
 8002538:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800253a:	bf00      	nop
}
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200004a4 	.word	0x200004a4
 8002548:	2000026c 	.word	0x2000026c
 800254c:	200002fc 	.word	0x200002fc
 8002550:	40002800 	.word	0x40002800
 8002554:	58000800 	.word	0x58000800
 8002558:	200002fd 	.word	0x200002fd

0800255c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	493b      	ldr	r1, [pc, #236]	@ (8002658 <HW_TS_Start+0xfc>)
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	330c      	adds	r3, #12
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d103      	bne.n	8002588 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff66 	bl	8002454 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002588:	f3ef 8310 	mrs	r3, PRIMASK
 800258c:	60fb      	str	r3, [r7, #12]
  return(result);
 800258e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002592:	b672      	cpsid	i
}
 8002594:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002596:	2003      	movs	r0, #3
 8002598:	f001 fbb1 	bl	8003cfe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <HW_TS_Start+0x100>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	22ca      	movs	r2, #202	@ 0xca
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80025a4:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HW_TS_Start+0x100>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2253      	movs	r2, #83	@ 0x53
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	492a      	ldr	r1, [pc, #168]	@ (8002658 <HW_TS_Start+0xfc>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	330c      	adds	r3, #12
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	4925      	ldr	r1, [pc, #148]	@ (8002658 <HW_TS_Start+0xfc>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3308      	adds	r3, #8
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	4920      	ldr	r1, [pc, #128]	@ (8002658 <HW_TS_Start+0xfc>)
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	3304      	adds	r3, #4
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fab6 	bl	8001b5c <linkTimer>
 80025f0:	4603      	mov	r3, r0
 80025f2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <HW_TS_Start+0x104>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <HW_TS_Start+0x108>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	7c7a      	ldrb	r2, [r7, #17]
 8002602:	429a      	cmp	r2, r3
 8002604:	d002      	beq.n	800260c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002606:	f7ff fc6f 	bl	8001ee8 <RescheduleTimerList>
 800260a:	e013      	b.n	8002634 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	4912      	ldr	r1, [pc, #72]	@ (8002658 <HW_TS_Start+0xfc>)
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3308      	adds	r3, #8
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	8a7b      	ldrh	r3, [r7, #18]
 8002620:	79fa      	ldrb	r2, [r7, #7]
 8002622:	1ac9      	subs	r1, r1, r3
 8002624:	480c      	ldr	r0, [pc, #48]	@ (8002658 <HW_TS_Start+0xfc>)
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4403      	add	r3, r0
 8002630:	3308      	adds	r3, #8
 8002632:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HW_TS_Start+0x100>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22ff      	movs	r2, #255	@ 0xff
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800263c:	2003      	movs	r0, #3
 800263e:	f001 fb50 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800264e:	bf00      	nop
}
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000026c 	.word	0x2000026c
 800265c:	200004a4 	.word	0x200004a4
 8002660:	200002fc 	.word	0x200002fc
 8002664:	200002fd 	.word	0x200002fd

08002668 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	460b      	mov	r3, r1
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4798      	blx	r3

  return;
 800267a:	bf00      	nop
}
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	4613      	mov	r3, r2
 8002694:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800269a:	2300      	movs	r3, #0
 800269c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d10e      	bne.n	80026c2 <HW_UART_Transmit_DMA+0x3e>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 80026a4:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <HW_UART_Transmit_DMA+0x80>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80026aa:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <HW_UART_Transmit_DMA+0x84>)
 80026ac:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HW_UART_Transmit_DMA+0x88>)
 80026ae:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80026b0:	89bb      	ldrh	r3, [r7, #12]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	4814      	ldr	r0, [pc, #80]	@ (8002708 <HW_UART_Transmit_DMA+0x84>)
 80026b8:	f005 fc32 	bl	8007f20 <HAL_UART_Transmit_DMA>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]
            break;
 80026c0:	e000      	b.n	80026c4 <HW_UART_Transmit_DMA+0x40>
#endif

        default:
            break;
 80026c2:	bf00      	nop
    }

    switch (hal_status)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d816      	bhi.n	80026f8 <HW_UART_Transmit_DMA+0x74>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <HW_UART_Transmit_DMA+0x4c>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026e7 	.word	0x080026e7
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026f3 	.word	0x080026f3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80026e0:	2300      	movs	r3, #0
 80026e2:	75bb      	strb	r3, [r7, #22]
            break;
 80026e4:	e009      	b.n	80026fa <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75bb      	strb	r3, [r7, #22]
            break;
 80026ea:	e006      	b.n	80026fa <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80026ec:	2302      	movs	r3, #2
 80026ee:	75bb      	strb	r3, [r7, #22]
            break;
 80026f0:	e003      	b.n	80026fa <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80026f2:	2303      	movs	r3, #3
 80026f4:	75bb      	strb	r3, [r7, #22]
            break;
 80026f6:	e000      	b.n	80026fa <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80026f8:	bf00      	nop
    }

    return hw_status;
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000030c 	.word	0x2000030c
 8002708:	200003b0 	.word	0x200003b0
 800270c:	40008000 	.word	0x40008000

08002710 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_UART_TxCpltCallback+0x34>)
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_UART_TxCpltCallback+0x24>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <HAL_UART_TxCpltCallback+0x38>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_hlpuart1TxCb();
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_UART_TxCpltCallback+0x38>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4798      	blx	r3
            }
            break;
 8002732:	e001      	b.n	8002738 <HAL_UART_TxCpltCallback+0x28>
#endif

        default:
            break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002738:	bf00      	nop
    }

    return;
 800273a:	bf00      	nop
}
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40008000 	.word	0x40008000
 8002748:	2000030c 	.word	0x2000030c

0800274c <ldc1614_writeWord>:
static uint8_t default_addr = LDC1614_DEFAULT_I2CADDR << 1;
extern UART_HandleTypeDef hlpuart1;
extern TIM_HandleTypeDef htim2;
uint8_t info = 0xFF;

void ldc1614_writeWord(uint8_t addr, uint16_t cmd){
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af04      	add	r7, sp, #16
 8002752:	4603      	mov	r3, r0
 8002754:	460a      	mov	r2, r1
 8002756:	71fb      	strb	r3, [r7, #7]
 8002758:	4613      	mov	r3, r2
 800275a:	80bb      	strh	r3, [r7, #4]
  uint8_t transmittedData[2];
  transmittedData[0] = cmd >> 8;
 800275c:	88bb      	ldrh	r3, [r7, #4]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b29b      	uxth	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	733b      	strb	r3, [r7, #12]
  transmittedData[1] = cmd & 0xFF;
 8002766:	88bb      	ldrh	r3, [r7, #4]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Mem_Write(&hi2c1, default_addr, (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, transmittedData, 2, 0xffff);
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <ldc1614_writeWord+0x4c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2302      	movs	r3, #2
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	4804      	ldr	r0, [pc, #16]	@ (800279c <ldc1614_writeWord+0x50>)
 800278a:	f002 f8a7 	bl	80048dc <HAL_I2C_Mem_Write>
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000008 	.word	0x20000008
 800279c:	20000320 	.word	0x20000320

080027a0 <ldc1614_readWord>:

uint16_t ldc1614_readWord(uint8_t addr){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af04      	add	r7, sp, #16
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedData[2];

  if(HAL_OK == HAL_I2C_Mem_Read(&hi2c1, default_addr, (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, receivedData, 2, 0xffff)){
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <ldc1614_readWord+0x50>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	2302      	movs	r3, #2
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	480b      	ldr	r0, [pc, #44]	@ (80027f4 <ldc1614_readWord+0x54>)
 80027c8:	f002 f99c 	bl	8004b04 <HAL_I2C_Mem_Read>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <ldc1614_readWord+0x44>
    return ((receivedData[0]<<8) | receivedData[1]);
 80027d2:	7b3b      	ldrb	r3, [r7, #12]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	7b7b      	ldrb	r3, [r7, #13]
 80027da:	b21b      	sxth	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b21b      	sxth	r3, r3
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	e001      	b.n	80027e8 <ldc1614_readWord+0x48>
  }
  else Error_Handler();
 80027e4:	f000 fccc 	bl	8003180 <Error_Handler>
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000320 	.word	0x20000320

080027f8 <ldc1614_init>:

uint8_t ldc1614_init(void){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 80027fc:	4835      	ldr	r0, [pc, #212]	@ (80028d4 <ldc1614_init+0xdc>)
 80027fe:	f004 fe91 	bl	8007524 <HAL_TIM_Base_Start_IT>
  SD_LOW;
 8002802:	2200      	movs	r2, #0
 8002804:	2120      	movs	r1, #32
 8002806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280a:	f001 ff51 	bl	80046b0 <HAL_GPIO_WritePin>
  // soft reset
  ldc1614_writeWord(LDC13xx16xx_CMD_RESET_DEVICE, 0x8000);
 800280e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002812:	201c      	movs	r0, #28
 8002814:	f7ff ff9a 	bl	800274c <ldc1614_writeWord>
  // clock divider
  ldc1614_writeWord(LDC13xx16xx_CMD_CLOCK_DIVIDERS_CH0, 0x1002);
 8002818:	f241 0102 	movw	r1, #4098	@ 0x1002
 800281c:	2014      	movs	r0, #20
 800281e:	f7ff ff95 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_CLOCK_DIVIDERS_CH1, 0x1002);
 8002822:	f241 0102 	movw	r1, #4098	@ 0x1002
 8002826:	2015      	movs	r0, #21
 8002828:	f7ff ff90 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_CLOCK_DIVIDERS_CH2, 0x1002);
 800282c:	f241 0102 	movw	r1, #4098	@ 0x1002
 8002830:	2016      	movs	r0, #22
 8002832:	f7ff ff8b 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_CLOCK_DIVIDERS_CH3, 0x1002);
 8002836:	f241 0102 	movw	r1, #4098	@ 0x1002
 800283a:	2017      	movs	r0, #23
 800283c:	f7ff ff86 	bl	800274c <ldc1614_writeWord>
  // settle time
  ldc1614_writeWord(LDC13xx16xx_CMD_SETTLE_COUNT_CH0, 0x0014);  //before: 0x000D
 8002840:	2114      	movs	r1, #20
 8002842:	2010      	movs	r0, #16
 8002844:	f7ff ff82 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_SETTLE_COUNT_CH1, 0x0014);
 8002848:	2114      	movs	r1, #20
 800284a:	2011      	movs	r0, #17
 800284c:	f7ff ff7e 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_SETTLE_COUNT_CH2, 0x0014);
 8002850:	2114      	movs	r1, #20
 8002852:	2012      	movs	r0, #18
 8002854:	f7ff ff7a 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_SETTLE_COUNT_CH3, 0x0014);
 8002858:	2114      	movs	r1, #20
 800285a:	2013      	movs	r0, #19
 800285c:	f7ff ff76 	bl	800274c <ldc1614_writeWord>
  // conversion time
  ldc1614_writeWord(LDC13xx16xx_CMD_REF_COUNT_CH0, 0x09AD);
 8002860:	f640 11ad 	movw	r1, #2477	@ 0x9ad
 8002864:	2008      	movs	r0, #8
 8002866:	f7ff ff71 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_REF_COUNT_CH1, 0x09AD);
 800286a:	f640 11ad 	movw	r1, #2477	@ 0x9ad
 800286e:	2009      	movs	r0, #9
 8002870:	f7ff ff6c 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_REF_COUNT_CH2, 0x09AD);
 8002874:	f640 11ad 	movw	r1, #2477	@ 0x9ad
 8002878:	200a      	movs	r0, #10
 800287a:	f7ff ff67 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_REF_COUNT_CH3, 0x09AD);
 800287e:	f640 11ad 	movw	r1, #2477	@ 0x9ad
 8002882:	200b      	movs	r0, #11
 8002884:	f7ff ff62 	bl	800274c <ldc1614_writeWord>
  //error_config
  ldc1614_writeWord(LDC13xx16xx_CMD_ERROR_CONFIG, 0x0000);
 8002888:	2100      	movs	r1, #0
 800288a:	2019      	movs	r0, #25
 800288c:	f7ff ff5e 	bl	800274c <ldc1614_writeWord>
  // drive current config for all channels!!!
  ldc1614_writeWord(LDC13xx16xx_CMD_DRIVE_CURRENT_CH0, 0xE900);
 8002890:	f44f 4169 	mov.w	r1, #59648	@ 0xe900
 8002894:	201e      	movs	r0, #30
 8002896:	f7ff ff59 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_DRIVE_CURRENT_CH1, 0xE900);
 800289a:	f44f 4169 	mov.w	r1, #59648	@ 0xe900
 800289e:	201f      	movs	r0, #31
 80028a0:	f7ff ff54 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_DRIVE_CURRENT_CH2, 0xE900);
 80028a4:	f44f 4169 	mov.w	r1, #59648	@ 0xe900
 80028a8:	2020      	movs	r0, #32
 80028aa:	f7ff ff4f 	bl	800274c <ldc1614_writeWord>
  ldc1614_writeWord(LDC13xx16xx_CMD_DRIVE_CURRENT_CH3, 0xE900);
 80028ae:	f44f 4169 	mov.w	r1, #59648	@ 0xe900
 80028b2:	2021      	movs	r0, #33	@ 0x21
 80028b4:	f7ff ff4a 	bl	800274c <ldc1614_writeWord>
  // mux_config
  ldc1614_writeWord(LDC13xx16xx_CMD_MUX_CONFIG, 0xC20D); // for auto-conv bit 15->1, bit 14:13-> to select channels default:0xA20D
 80028b8:	f24c 210d 	movw	r1, #49677	@ 0xc20d
 80028bc:	201b      	movs	r0, #27
 80028be:	f7ff ff45 	bl	800274c <ldc1614_writeWord>
  // config
  ldc1614_writeWord(LDC13xx16xx_CMD_CONFIG, 0x1601);
 80028c2:	f241 6101 	movw	r1, #5633	@ 0x1601
 80028c6:	201a      	movs	r0, #26
 80028c8:	f7ff ff40 	bl	800274c <ldc1614_writeWord>
}
 80028cc:	bf00      	nop
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004c8 	.word	0x200004c8

080028d8 <ldc1614_processDRDY>:

void ldc1614_processDRDY(void){
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  allData[0] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_MSB_CH0);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7ff ff5f 	bl	80027a0 <ldc1614_readWord>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <ldc1614_processDRDY+0x78>)
 80028e8:	801a      	strh	r2, [r3, #0]
  allData[1] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_LSB_CH0);
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7ff ff58 	bl	80027a0 <ldc1614_readWord>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <ldc1614_processDRDY+0x78>)
 80028f6:	805a      	strh	r2, [r3, #2]
  allData[2] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_MSB_CH1);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7ff ff51 	bl	80027a0 <ldc1614_readWord>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <ldc1614_processDRDY+0x78>)
 8002904:	809a      	strh	r2, [r3, #4]
  allData[3] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_LSB_CH1);
 8002906:	2003      	movs	r0, #3
 8002908:	f7ff ff4a 	bl	80027a0 <ldc1614_readWord>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <ldc1614_processDRDY+0x78>)
 8002912:	80da      	strh	r2, [r3, #6]
  allData[4] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_MSB_CH2);
 8002914:	2004      	movs	r0, #4
 8002916:	f7ff ff43 	bl	80027a0 <ldc1614_readWord>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <ldc1614_processDRDY+0x78>)
 8002920:	811a      	strh	r2, [r3, #8]
  allData[5] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_LSB_CH2);
 8002922:	2005      	movs	r0, #5
 8002924:	f7ff ff3c 	bl	80027a0 <ldc1614_readWord>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <ldc1614_processDRDY+0x78>)
 800292e:	815a      	strh	r2, [r3, #10]
  allData[6] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_MSB_CH3);
 8002930:	2006      	movs	r0, #6
 8002932:	f7ff ff35 	bl	80027a0 <ldc1614_readWord>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <ldc1614_processDRDY+0x78>)
 800293c:	819a      	strh	r2, [r3, #12]
  allData[7] = ldc1614_readWord(LDC13xx16xx_CMD_DATA_LSB_CH3);
 800293e:	2007      	movs	r0, #7
 8002940:	f7ff ff2e 	bl	80027a0 <ldc1614_readWord>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	4b01      	ldr	r3, [pc, #4]	@ (8002950 <ldc1614_processDRDY+0x78>)
 800294a:	81da      	strh	r2, [r3, #14]
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000310 	.word	0x20000310

08002954 <ldc1614_readFreq>:
        powf(2, 28);

  return num;
}

float ldc1614_readFreq(uint8_t ch){
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  uint8_t data[4];
  float num;

  data[0] = allData[ch*2] >> 8;
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4a2d      	ldr	r2, [pc, #180]	@ (8002a18 <ldc1614_readFreq+0xc4>)
 8002964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	723b      	strb	r3, [r7, #8]
  data[1] = allData[ch*2] & 0xFF;
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4a28      	ldr	r2, [pc, #160]	@ (8002a18 <ldc1614_readFreq+0xc4>)
 8002976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	727b      	strb	r3, [r7, #9]
  data[2] = allData[ch*2+1] >> 8;
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	3301      	adds	r3, #1
 8002984:	4a24      	ldr	r2, [pc, #144]	@ (8002a18 <ldc1614_readFreq+0xc4>)
 8002986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	b29b      	uxth	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	72bb      	strb	r3, [r7, #10]
  data[3] = allData[ch*2+1] & 0xFF;
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	3301      	adds	r3, #1
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <ldc1614_readFreq+0xc4>)
 800299a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	72fb      	strb	r3, [r7, #11]

  num = FREQUENCY_REF*(((float)data[0])*powf(256, 3) + ((float)data[1])*powf(256, 2) + ((float)data[2])*powf(256, 1) + (float)data[3])/
 80029a2:	7a3b      	ldrb	r3, [r7, #8]
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002a1c <ldc1614_readFreq+0xc8>
 80029b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029b4:	7a7b      	ldrb	r3, [r7, #9]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002a20 <ldc1614_readFreq+0xcc>
 80029c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ca:	7abb      	ldrb	r3, [r7, #10]
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002a24 <ldc1614_readFreq+0xd0>
 80029d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e0:	7afb      	ldrb	r3, [r7, #11]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002a28 <ldc1614_readFreq+0xd4>
 80029f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002a2c <ldc1614_readFreq+0xd8>
 80029fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fe:	edc7 7a03 	vstr	s15, [r7, #12]
        powf(2, 28);

  return num;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	ee07 3a90 	vmov	s15, r3
}
 8002a08:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000310 	.word	0x20000310
 8002a1c:	4b800000 	.word	0x4b800000
 8002a20:	47800000 	.word	0x47800000
 8002a24:	43800000 	.word	0x43800000
 8002a28:	42200000 	.word	0x42200000
 8002a2c:	4d800000 	.word	0x4d800000

08002a30 <ldc1614_readInductance>:

float ldc1614_readInductance(uint8_t ch){
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  float freq, inductance;

  freq = ldc1614_readFreq(ch);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff89 	bl	8002954 <ldc1614_readFreq>
 8002a42:	ed87 0a03 	vstr	s0, [r7, #12]
  inductance = 1e6/(4*M_PI*M_PI*CAP_VALUE*freq*freq); // uH in Hertz
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7fd fd56 	bl	80004f8 <__aeabi_f2d>
 8002a4c:	a314      	add	r3, pc, #80	@ (adr r3, 8002aa0 <ldc1614_readInductance+0x70>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fda9 	bl	80005a8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	461d      	mov	r5, r3
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7fd fd4a 	bl	80004f8 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fd9c 	bl	80005a8 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	a10c      	add	r1, pc, #48	@ (adr r1, 8002aa8 <ldc1614_readInductance+0x78>)
 8002a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a7a:	f7fd febf 	bl	80007fc <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f867 	bl	8000b58 <__aeabi_d2f>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60bb      	str	r3, [r7, #8]

  return inductance;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	ee07 3a90 	vmov	s15, r3
}
 8002a94:	eeb0 0a67 	vmov.f32	s0, s15
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	5c0f4610 	.word	0x5c0f4610
 8002aa4:	40c971f0 	.word	0x40c971f0
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	412e8480 	.word	0x412e8480

08002ab0 <LL_AHB1_GRP1_EnableClock>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002abc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002acc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_AHB2_GRP1_EnableClock>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002af0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4013      	ands	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1c:	f000 feee 	bl	80038fc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002b20:	f7fe fc30 	bl	8001384 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b24:	f000 f8a2 	bl	8002c6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002b28:	f000 f8f6 	bl	8002d18 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002b2c:	f000 f954 	bl	8002dd8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002b30:	f000 f9b2 	bl	8002e98 <MX_RF_Init>
  MX_GPIO_Init();
 8002b34:	f000 fa4c 	bl	8002fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b38:	f000 fa38 	bl	8002fac <MX_DMA_Init>
  MX_I2C1_Init();
 8002b3c:	f000 f90c 	bl	8002d58 <MX_I2C1_Init>
  MX_RTC_Init();
 8002b40:	f000 f9b2 	bl	8002ea8 <MX_RTC_Init>
  MX_TIM2_Init();
 8002b44:	f000 f9e4 	bl	8002f10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2180      	movs	r1, #128	@ 0x80
 8002b4c:	483c      	ldr	r0, [pc, #240]	@ (8002c40 <main+0x12c>)
 8002b4e:	f001 fdaf 	bl	80046b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2104      	movs	r1, #4
 8002b56:	483a      	ldr	r0, [pc, #232]	@ (8002c40 <main+0x12c>)
 8002b58:	f001 fdaa 	bl	80046b0 <HAL_GPIO_WritePin>

  ldc1614_init();
 8002b5c:	f7ff fe4c 	bl	80027f8 <ldc1614_init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b60:	f7fe fc1e 	bl	80013a0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b64:	f7fe fecf 	bl	8001906 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	if(read_flag == 1){
 8002b68:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <main+0x130>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d15e      	bne.n	8002c2e <main+0x11a>
		HAL_TIM_Base_Stop_IT(&htim2);
 8002b70:	4835      	ldr	r0, [pc, #212]	@ (8002c48 <main+0x134>)
 8002b72:	f004 fd25 	bl	80075c0 <HAL_TIM_Base_Stop_IT>
		read_flag = 0;
 8002b76:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <main+0x130>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
		ldc1614_processDRDY();
 8002b7c:	f7ff feac 	bl	80028d8 <ldc1614_processDRDY>
		induct_ch0 = ldc1614_readInductance(0);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff ff55 	bl	8002a30 <ldc1614_readInductance>
 8002b86:	eef0 7a40 	vmov.f32	s15, s0
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <main+0x138>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
		induct_ch1 = ldc1614_readInductance(1);
 8002b90:	2001      	movs	r0, #1
 8002b92:	f7ff ff4d 	bl	8002a30 <ldc1614_readInductance>
 8002b96:	eef0 7a40 	vmov.f32	s15, s0
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c50 <main+0x13c>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
		induct_ch2 = ldc1614_readInductance(2);
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f7ff ff45 	bl	8002a30 <ldc1614_readInductance>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <main+0x140>)
 8002bac:	edc3 7a00 	vstr	s15, [r3]
		induct_ch3 = ldc1614_readInductance(3);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f7ff ff3d 	bl	8002a30 <ldc1614_readInductance>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <main+0x144>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
		HAL_TIM_Base_Start_IT(&htim2);
 8002bc0:	4821      	ldr	r0, [pc, #132]	@ (8002c48 <main+0x134>)
 8002bc2:	f004 fcaf 	bl	8007524 <HAL_TIM_Base_Start_IT>
		datalen = sprintf(dataframe, "inductance:%.5f,%.5f,%.5f,%.5f\n\r", induct_ch0, induct_ch1, induct_ch2, induct_ch3);
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <main+0x138>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc94 	bl	80004f8 <__aeabi_f2d>
 8002bd0:	4682      	mov	sl, r0
 8002bd2:	468b      	mov	fp, r1
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <main+0x13c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fc8d 	bl	80004f8 <__aeabi_f2d>
 8002bde:	4604      	mov	r4, r0
 8002be0:	460d      	mov	r5, r1
 8002be2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <main+0x140>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc86 	bl	80004f8 <__aeabi_f2d>
 8002bec:	4680      	mov	r8, r0
 8002bee:	4689      	mov	r9, r1
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <main+0x144>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fc7f 	bl	80004f8 <__aeabi_f2d>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c02:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002c06:	e9cd 4500 	strd	r4, r5, [sp]
 8002c0a:	4652      	mov	r2, sl
 8002c0c:	465b      	mov	r3, fp
 8002c0e:	4913      	ldr	r1, [pc, #76]	@ (8002c5c <main+0x148>)
 8002c10:	4813      	ldr	r0, [pc, #76]	@ (8002c60 <main+0x14c>)
 8002c12:	f00b ffb9 	bl	800eb88 <siprintf>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <main+0x150>)
 8002c1a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)dataframe, datalen, 1000);
 8002c1c:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <main+0x150>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c26:	490e      	ldr	r1, [pc, #56]	@ (8002c60 <main+0x14c>)
 8002c28:	480f      	ldr	r0, [pc, #60]	@ (8002c68 <main+0x154>)
 8002c2a:	f005 f8eb 	bl	8007e04 <HAL_UART_Transmit>
	}
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002c2e:	2180      	movs	r1, #128	@ 0x80
 8002c30:	4803      	ldr	r0, [pc, #12]	@ (8002c40 <main+0x12c>)
 8002c32:	f001 fd55 	bl	80046e0 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7fe fe40 	bl	80018bc <HAL_Delay>
    MX_APPE_Process();
 8002c3c:	e792      	b.n	8002b64 <main+0x50>
 8002c3e:	bf00      	nop
 8002c40:	48000c00 	.word	0x48000c00
 8002c44:	20000514 	.word	0x20000514
 8002c48:	200004c8 	.word	0x200004c8
 8002c4c:	20000518 	.word	0x20000518
 8002c50:	2000051c 	.word	0x2000051c
 8002c54:	20000520 	.word	0x20000520
 8002c58:	20000524 	.word	0x20000524
 8002c5c:	08011218 	.word	0x08011218
 8002c60:	20000528 	.word	0x20000528
 8002c64:	20000568 	.word	0x20000568
 8002c68:	200003b0 	.word	0x200003b0

08002c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b09a      	sub	sp, #104	@ 0x68
 8002c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c72:	f107 0320 	add.w	r3, r7, #32
 8002c76:	2248      	movs	r2, #72	@ 0x48
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f00c f87c 	bl	800ed78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	611a      	str	r2, [r3, #16]
 8002c8e:	615a      	str	r2, [r3, #20]
 8002c90:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <SystemClock_Config+0xa8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d14 <SystemClock_Config+0xa8>)
 8002c9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <SystemClock_Config+0xa8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cbe:	2340      	movs	r3, #64	@ 0x40
 8002cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc6:	f107 0320 	add.w	r3, r7, #32
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 ffa8 	bl	8005c20 <HAL_RCC_OscConfig>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002cd6:	f000 fa53 	bl	8003180 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002cda:	236f      	movs	r3, #111	@ 0x6f
 8002cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fb04 	bl	8006308 <HAL_RCC_ClockConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d06:	f000 fa3b 	bl	8003180 <Error_Handler>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3768      	adds	r7, #104	@ 0x68
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	58000400 	.word	0x58000400

08002d18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b094      	sub	sp, #80	@ 0x50
 8002d1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1e:	463b      	mov	r3, r7
 8002d20:	2250      	movs	r2, #80	@ 0x50
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f00c f827 	bl	800ed78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002d2a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002d30:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d34:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002d36:	2302      	movs	r3, #2
 8002d38:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3e:	463b      	mov	r3, r7
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 ff1e 	bl	8006b82 <HAL_RCCEx_PeriphCLKConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d4c:	f000 fa18 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d50:	bf00      	nop
 8002d52:	3750      	adds	r7, #80	@ 0x50
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd0 <MX_I2C1_Init+0x78>)
 8002d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d64:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <MX_I2C1_Init+0x7c>)
 8002d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d68:	4b18      	ldr	r3, [pc, #96]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d74:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d80:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d92:	480e      	ldr	r0, [pc, #56]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002d94:	f001 fd06 	bl	80047a4 <HAL_I2C_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d9e:	f000 f9ef 	bl	8003180 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002da2:	2100      	movs	r1, #0
 8002da4:	4809      	ldr	r0, [pc, #36]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002da6:	f002 fa89 	bl	80052bc <HAL_I2CEx_ConfigAnalogFilter>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002db0:	f000 f9e6 	bl	8003180 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002db4:	2100      	movs	r1, #0
 8002db6:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <MX_I2C1_Init+0x74>)
 8002db8:	f002 facb 	bl	8005352 <HAL_I2CEx_ConfigDigitalFilter>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002dc2:	f000 f9dd 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000320 	.word	0x20000320
 8002dd0:	40005400 	.word	0x40005400
 8002dd4:	00707cbb 	.word	0x00707cbb

08002dd8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <MX_IPCC_Init+0x20>)
 8002dde:	4a07      	ldr	r2, [pc, #28]	@ (8002dfc <MX_IPCC_Init+0x24>)
 8002de0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002de2:	4805      	ldr	r0, [pc, #20]	@ (8002df8 <MX_IPCC_Init+0x20>)
 8002de4:	f002 fb02 	bl	80053ec <HAL_IPCC_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002dee:	f000 f9c7 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000374 	.word	0x20000374
 8002dfc:	58000c00 	.word	0x58000c00

08002e00 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e06:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <MX_LPUART1_UART_Init+0x94>)
 8002e08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e10:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e12:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e24:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e26:	220c      	movs	r2, #12
 8002e28:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2a:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e30:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e36:	4b16      	ldr	r3, [pc, #88]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e42:	4b13      	ldr	r3, [pc, #76]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e48:	4811      	ldr	r0, [pc, #68]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e4a:	f004 ff8b 	bl	8007d64 <HAL_UART_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e54:	f000 f994 	bl	8003180 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e58:	2100      	movs	r1, #0
 8002e5a:	480d      	ldr	r0, [pc, #52]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e5c:	f006 f9df 	bl	800921e <HAL_UARTEx_SetTxFifoThreshold>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e66:	f000 f98b 	bl	8003180 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4808      	ldr	r0, [pc, #32]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e6e:	f006 fa14 	bl	800929a <HAL_UARTEx_SetRxFifoThreshold>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e78:	f000 f982 	bl	8003180 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002e7c:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <MX_LPUART1_UART_Init+0x90>)
 8002e7e:	f006 f995 	bl	80091ac <HAL_UARTEx_DisableFifoMode>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e88:	f000 f97a 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	200003b0 	.word	0x200003b0
 8002e94:	40008000 	.word	0x40008000

08002e98 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002eac:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002eae:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <MX_RTC_Init+0x64>)
 8002eb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002eb8:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002eba:	220f      	movs	r2, #15
 8002ebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002ec0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002ec4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ede:	480a      	ldr	r0, [pc, #40]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002ee0:	f004 f8d6 	bl	8007090 <HAL_RTC_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002eea:	f000 f949 	bl	8003180 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4805      	ldr	r0, [pc, #20]	@ (8002f08 <MX_RTC_Init+0x60>)
 8002ef4:	f004 f9cc 	bl	8007290 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002efe:	f000 f93f 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200004a4 	.word	0x200004a4
 8002f0c:	40002800 	.word	0x40002800

08002f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f38:	221f      	movs	r2, #31
 8002f3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002f48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f50:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f56:	4814      	ldr	r0, [pc, #80]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f58:	f004 fa8c 	bl	8007474 <HAL_TIM_Base_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002f62:	f000 f90d 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	4619      	mov	r1, r3
 8002f72:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f74:	f004 fc5a 	bl	800782c <HAL_TIM_ConfigClockSource>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002f7e:	f000 f8ff 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4806      	ldr	r0, [pc, #24]	@ (8002fa8 <MX_TIM2_Init+0x98>)
 8002f90:	f004 fe4a 	bl	8007c28 <HAL_TIMEx_MasterConfigSynchronization>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002f9a:	f000 f8f1 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200004c8 	.word	0x200004c8

08002fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002fb0:	2004      	movs	r0, #4
 8002fb2:	f7ff fd7d 	bl	8002ab0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7ff fd7a 	bl	8002ab0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	200b      	movs	r0, #11
 8002fc2:	f000 fe74 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fc6:	200b      	movs	r0, #11
 8002fc8:	f000 fe8b 	bl	8003ce2 <HAL_NVIC_EnableIRQ>

}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7ff fd7c 	bl	8002ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	2004      	movs	r0, #4
 8002fec:	f7ff fd79 	bl	8002ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff0:	2008      	movs	r0, #8
 8002ff2:	f7ff fd76 	bl	8002ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f7ff fd73 	bl	8002ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ffc:	2010      	movs	r0, #16
 8002ffe:	f7ff fd70 	bl	8002ae2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003002:	2080      	movs	r0, #128	@ 0x80
 8003004:	f7ff fd6d 	bl	8002ae2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8003008:	2200      	movs	r2, #0
 800300a:	2184      	movs	r1, #132	@ 0x84
 800300c:	484c      	ldr	r0, [pc, #304]	@ (8003140 <MX_GPIO_Init+0x170>)
 800300e:	f001 fb4f 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDC_SD_GPIO_Port, LDC_SD_Pin, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	2120      	movs	r1, #32
 8003016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800301a:	f001 fb49 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 PA15 PA10
                           PA2 PA1 PA0 PA7
                           PA6 PA8 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_10
 800301e:	f649 53cf 	movw	r3, #40399	@ 0x9dcf
 8003022:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_7
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003024:	2303      	movs	r3, #3
 8003026:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003034:	f001 f9cc 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800303c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800303e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003044:	2301      	movs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4619      	mov	r1, r3
 800304c:	483d      	ldr	r0, [pc, #244]	@ (8003144 <MX_GPIO_Init+0x174>)
 800304e:	f001 f9bf 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8003052:	2384      	movs	r3, #132	@ 0x84
 8003054:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003056:	2301      	movs	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4836      	ldr	r0, [pc, #216]	@ (8003140 <MX_GPIO_Init+0x170>)
 8003068:	f001 f9b2 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB13 PB4 PB5
                           PB7 PB14 PB15 PB6
                           PB8 PB12 PB1 PB0
                           PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 800306c:	f24f 13ff 	movw	r3, #61951	@ 0xf1ff
 8003070:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003072:	2303      	movs	r3, #3
 8003074:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4832      	ldr	r0, [pc, #200]	@ (8003148 <MX_GPIO_Init+0x178>)
 8003080:	f001 f9a6 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC11 PC12 PC6
                           PC15 PC14 PC7 PC8
                           PC0 PC4 PC13 PC1
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_6
 8003084:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8003088:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308a:	2303      	movs	r3, #3
 800308c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	4619      	mov	r1, r3
 8003096:	482b      	ldr	r0, [pc, #172]	@ (8003144 <MX_GPIO_Init+0x174>)
 8003098:	f001 f99a 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD12 PD3 PD1
                           PD0 PD6 PD13 PD4
                           PD8 PD9 PD14 PD10
                           PD11 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_1
 800309c:	f64f 737b 	movw	r3, #65403	@ 0xff7b
 80030a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_4
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030a2:	2303      	movs	r3, #3
 80030a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4824      	ldr	r0, [pc, #144]	@ (8003140 <MX_GPIO_Init+0x170>)
 80030b0:	f001 f98e 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE2 PE4
                           PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80030b4:	231f      	movs	r3, #31
 80030b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b8:	2303      	movs	r3, #3
 80030ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4821      	ldr	r0, [pc, #132]	@ (800314c <MX_GPIO_Init+0x17c>)
 80030c6:	f001 f983 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH3 PH1 PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 80030ca:	230b      	movs	r3, #11
 80030cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ce:	2303      	movs	r3, #3
 80030d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	481d      	ldr	r0, [pc, #116]	@ (8003150 <MX_GPIO_Init+0x180>)
 80030dc:	f001 f978 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDC_SD_Pin */
  GPIO_InitStruct.Pin = LDC_SD_Pin;
 80030e0:	2320      	movs	r3, #32
 80030e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LDC_SD_GPIO_Port, &GPIO_InitStruct);
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	4619      	mov	r1, r3
 80030f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f8:	f001 f96a 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDC_INT_Pin */
  GPIO_InitStruct.Pin = LDC_INT_Pin;
 80030fc:	2310      	movs	r3, #16
 80030fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003100:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LDC_INT_GPIO_Port, &GPIO_InitStruct);
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	4619      	mov	r1, r3
 800310e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003112:	f001 f95d 	bl	80043d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	200a      	movs	r0, #10
 800311c:	f000 fdc7 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003120:	200a      	movs	r0, #10
 8003122:	f000 fdde 	bl	8003ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	2028      	movs	r0, #40	@ 0x28
 800312c:	f000 fdbf 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003130:	2028      	movs	r0, #40	@ 0x28
 8003132:	f000 fdd6 	bl	8003ce2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	48000c00 	.word	0x48000c00
 8003144:	48000800 	.word	0x48000800
 8003148:	48000400 	.word	0x48000400
 800314c:	48001000 	.word	0x48001000
 8003150:	48001c00 	.word	0x48001c00

08003154 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if(htim == (&htim2)) read_flag = 1;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a06      	ldr	r2, [pc, #24]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d102      	bne.n	800316a <HAL_TIM_PeriodElapsedCallback+0x16>
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	200004c8 	.word	0x200004c8
 800317c:	20000514 	.word	0x20000514

08003180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003184:	b672      	cpsid	i
}
 8003186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <Error_Handler+0x8>

0800318c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_AHB2_GRP1_EnableClock>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4013      	ands	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_AHB3_GRP1_EnableClock>:
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800321a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4313      	orrs	r3, r2
 8003222:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_APB1_GRP1_EnableClock>:
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800324c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4313      	orrs	r3, r2
 8003254:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800325a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4013      	ands	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_APB1_GRP2_EnableClock>:
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800327e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4313      	orrs	r3, r2
 8003286:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80032a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80032aa:	f7ff ffaf 	bl	800320c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	202e      	movs	r0, #46	@ 0x2e
 80032b4:	f000 fcfb 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80032b8:	202e      	movs	r0, #46	@ 0x2e
 80032ba:	f000 fd12 	bl	8003ce2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b09c      	sub	sp, #112	@ 0x70
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	2250      	movs	r2, #80	@ 0x50
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00b fd47 	bl	800ed78 <memset>
  if(hi2c->Instance==I2C1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_I2C_MspInit+0xb0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d13b      	bne.n	800336c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032f4:	2304      	movs	r3, #4
 80032f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032f8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fc3d 	bl	8006b82 <HAL_RCCEx_PeriphCLKConfig>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800330e:	f7ff ff37 	bl	8003180 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	2002      	movs	r0, #2
 8003314:	f7ff ff61 	bl	80031da <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	2001      	movs	r0, #1
 800331a:	f7ff ff5e 	bl	80031da <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800331e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003322:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003324:	2312      	movs	r3, #18
 8003326:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003330:	2304      	movs	r3, #4
 8003332:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003334:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003338:	4619      	mov	r1, r3
 800333a:	480f      	ldr	r0, [pc, #60]	@ (8003378 <HAL_I2C_MspInit+0xb4>)
 800333c:	f001 f848 	bl	80043d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003344:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003346:	2312      	movs	r3, #18
 8003348:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003352:	2304      	movs	r3, #4
 8003354:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003360:	f001 f836 	bl	80043d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003364:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003368:	f7ff ff69 	bl	800323e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800336c:	bf00      	nop
 800336e:	3770      	adds	r7, #112	@ 0x70
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40005400 	.word	0x40005400
 8003378:	48000400 	.word	0x48000400

0800337c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	@ (80033c0 <HAL_IPCC_MspInit+0x44>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d113      	bne.n	80033b6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800338e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003392:	f7ff ff3b 	bl	800320c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2100      	movs	r1, #0
 800339a:	202c      	movs	r0, #44	@ 0x2c
 800339c:	f000 fc87 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80033a0:	202c      	movs	r0, #44	@ 0x2c
 80033a2:	f000 fc9e 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	202d      	movs	r0, #45	@ 0x2d
 80033ac:	f000 fc7f 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80033b0:	202d      	movs	r0, #45	@ 0x2d
 80033b2:	f000 fc96 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	58000c00 	.word	0x58000c00

080033c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b09c      	sub	sp, #112	@ 0x70
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	2250      	movs	r2, #80	@ 0x50
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f00b fcc7 	bl	800ed78 <memset>
  if(huart->Instance==LPUART1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2e      	ldr	r2, [pc, #184]	@ (80034a8 <HAL_UART_MspInit+0xe4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d155      	bne.n	80034a0 <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fbbe 	bl	8006b82 <HAL_RCCEx_PeriphCLKConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800340c:	f7ff feb8 	bl	8003180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003410:	2001      	movs	r0, #1
 8003412:	f7ff ff2d 	bl	8003270 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003416:	2002      	movs	r0, #2
 8003418:	f7ff fedf 	bl	80031da <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB11     ------> LPUART1_TX
    PB10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800341c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003420:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342a:	2300      	movs	r3, #0
 800342c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800342e:	2308      	movs	r3, #8
 8003430:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003432:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003436:	4619      	mov	r1, r3
 8003438:	481c      	ldr	r0, [pc, #112]	@ (80034ac <HAL_UART_MspInit+0xe8>)
 800343a:	f000 ffc9 	bl	80043d0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 800343e:	4b1c      	ldr	r3, [pc, #112]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003440:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <HAL_UART_MspInit+0xf0>)
 8003442:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003444:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003446:	2211      	movs	r2, #17
 8003448:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800344a:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 800344c:	2210      	movs	r2, #16
 800344e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003450:	4b17      	ldr	r3, [pc, #92]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003456:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345c:	4b14      	ldr	r3, [pc, #80]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003462:	4b13      	ldr	r3, [pc, #76]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003468:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003474:	480e      	ldr	r0, [pc, #56]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003476:	f000 fc79 	bl	8003d6c <HAL_DMA_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003480:	f7ff fe7e 	bl	8003180 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 8003488:	67da      	str	r2, [r3, #124]	@ 0x7c
 800348a:	4a09      	ldr	r2, [pc, #36]	@ (80034b0 <HAL_UART_MspInit+0xec>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003490:	2200      	movs	r2, #0
 8003492:	2100      	movs	r1, #0
 8003494:	2025      	movs	r0, #37	@ 0x25
 8003496:	f000 fc0a 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800349a:	2025      	movs	r0, #37	@ 0x25
 800349c:	f000 fc21 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80034a0:	bf00      	nop
 80034a2:	3770      	adds	r7, #112	@ 0x70
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40008000 	.word	0x40008000
 80034ac:	48000400 	.word	0x48000400
 80034b0:	20000444 	.word	0x20000444
 80034b4:	40020008 	.word	0x40020008

080034b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b096      	sub	sp, #88	@ 0x58
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034c0:	f107 0308 	add.w	r3, r7, #8
 80034c4:	2250      	movs	r2, #80	@ 0x50
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00b fc55 	bl	800ed78 <memset>
  if(hrtc->Instance==RTC)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_RTC_MspInit+0x7c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d128      	bne.n	800352a <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
	  HAL_PWR_EnableBkUpAccess();
 80034d8:	f002 f80e 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

	  HAL_PWR_EnableBkUpAccess();
 80034dc:	f002 f80c 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

	  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_HSE_DIV32);
 80034e0:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80034e4:	f7ff fe52 	bl	800318c <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034ec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80034ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fb42 	bl	8006b82 <HAL_RCCEx_PeriphCLKConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8003504:	f7ff fe3c 	bl	8003180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003508:	f7ff fe56 	bl	80031b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800350c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003510:	f7ff fe95 	bl	800323e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003514:	2200      	movs	r2, #0
 8003516:	2100      	movs	r1, #0
 8003518:	2003      	movs	r0, #3
 800351a:	f000 fbc8 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800351e:	2003      	movs	r0, #3
 8003520:	f000 fbdf 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    HAL_RTCEx_EnableBypassShadow(hrtc);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f003 ff6f 	bl	8007408 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800352a:	bf00      	nop
 800352c:	3758      	adds	r7, #88	@ 0x58
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40002800 	.word	0x40002800

08003538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003548:	d10a      	bne.n	8003560 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800354a:	2001      	movs	r0, #1
 800354c:	f7ff fe77 	bl	800323e <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	201c      	movs	r0, #28
 8003556:	f000 fbaa 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800355a:	201c      	movs	r0, #28
 800355c:	f000 fbc1 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <NMI_Handler+0x4>

08003570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <HardFault_Handler+0x4>

08003578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <MemManage_Handler+0x4>

08003580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <UsageFault_Handler+0x4>

08003590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035be:	f000 f9f7 	bl	80039b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80035ca:	f7fe fd27 	bl	800201c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LDC_INT_Pin);
 80035d6:	2010      	movs	r0, #16
 80035d8:	f001 f89c 	bl	8004714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}

080035e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80035e4:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <DMA1_Channel1_IRQHandler+0x10>)
 80035e6:	f000 fda2 	bl	800412e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000444 	.word	0x20000444

080035f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035f8:	4802      	ldr	r0, [pc, #8]	@ (8003604 <TIM2_IRQHandler+0x10>)
 80035fa:	f004 f810 	bl	800761e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200004c8 	.word	0x200004c8

08003608 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <LPUART1_IRQHandler+0x10>)
 800360e:	f004 fd07 	bl	8008020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200003b0 	.word	0x200003b0

0800361c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003620:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003624:	f001 f876 	bl	8004714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}

0800362c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003630:	f00a f966 	bl	800d900 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}

08003638 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800363c:	f00a f996 	bl	800d96c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}

08003644 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003648:	f001 f888 	bl	800475c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}

08003650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return 1;
 8003654:	2301      	movs	r3, #1
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_kill>:

int _kill(int pid, int sig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800366a:	f00b fbed 	bl	800ee48 <__errno>
 800366e:	4603      	mov	r3, r0
 8003670:	2216      	movs	r2, #22
 8003672:	601a      	str	r2, [r3, #0]
  return -1;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_exit>:

void _exit (int status)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ffe7 	bl	8003660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <_exit+0x12>

08003696 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e00a      	b.n	80036be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036a8:	f3af 8000 	nop.w
 80036ac:	4601      	mov	r1, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	60ba      	str	r2, [r7, #8]
 80036b4:	b2ca      	uxtb	r2, r1
 80036b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3301      	adds	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	dbf0      	blt.n	80036a8 <_read+0x12>
  }

  return len;
 80036c6:	687b      	ldr	r3, [r7, #4]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036f8:	605a      	str	r2, [r3, #4]
  return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <_isatty>:

int _isatty(int file)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003710:	2301      	movs	r3, #1
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003740:	4a14      	ldr	r2, [pc, #80]	@ (8003794 <_sbrk+0x5c>)
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <_sbrk+0x60>)
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800374c:	4b13      	ldr	r3, [pc, #76]	@ (800379c <_sbrk+0x64>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <_sbrk+0x64>)
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <_sbrk+0x68>)
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <_sbrk+0x64>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	429a      	cmp	r2, r3
 8003766:	d207      	bcs.n	8003778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003768:	f00b fb6e 	bl	800ee48 <__errno>
 800376c:	4603      	mov	r3, r0
 800376e:	220c      	movs	r2, #12
 8003770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	e009      	b.n	800378c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <_sbrk+0x64>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <_sbrk+0x64>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	4a05      	ldr	r2, [pc, #20]	@ (800379c <_sbrk+0x64>)
 8003788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20030000 	.word	0x20030000
 8003798:	00000400 	.word	0x00000400
 800379c:	2000056c 	.word	0x2000056c
 80037a0:	200018a8 	.word	0x200018a8

080037a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80037a8:	4b24      	ldr	r3, [pc, #144]	@ (800383c <SystemInit+0x98>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	4a23      	ldr	r2, [pc, #140]	@ (800383c <SystemInit+0x98>)
 80037b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80037b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037cc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80037d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <SystemInit+0x9c>)
 80037de:	4013      	ands	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ee:	f023 0305 	bic.w	r3, r3, #5
 80037f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380e:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <SystemInit+0xa0>)
 8003810:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	4a0b      	ldr	r2, [pc, #44]	@ (8003844 <SystemInit+0xa0>)
 8003818:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003824:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003828:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382e:	2200      	movs	r2, #0
 8003830:	619a      	str	r2, [r3, #24]
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00
 8003840:	faf6fefb 	.word	0xfaf6fefb
 8003844:	22041000 	.word	0x22041000

08003848 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003848:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800384a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384c:	3304      	adds	r3, #4

0800384e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800384e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003850:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003852:	d3f9      	bcc.n	8003848 <CopyDataInit>
  bx lr
 8003854:	4770      	bx	lr

08003856 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003856:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003858:	3004      	adds	r0, #4

0800385a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800385a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800385c:	d3fb      	bcc.n	8003856 <FillZerobss>
  bx lr
 800385e:	4770      	bx	lr

08003860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003860:	480c      	ldr	r0, [pc, #48]	@ (8003894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003862:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003864:	f7ff ff9e 	bl	80037a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003868:	480b      	ldr	r0, [pc, #44]	@ (8003898 <LoopForever+0x6>)
 800386a:	490c      	ldr	r1, [pc, #48]	@ (800389c <LoopForever+0xa>)
 800386c:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <LoopForever+0xe>)
 800386e:	2300      	movs	r3, #0
 8003870:	f7ff ffed 	bl	800384e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003874:	480b      	ldr	r0, [pc, #44]	@ (80038a4 <LoopForever+0x12>)
 8003876:	490c      	ldr	r1, [pc, #48]	@ (80038a8 <LoopForever+0x16>)
 8003878:	4a0c      	ldr	r2, [pc, #48]	@ (80038ac <LoopForever+0x1a>)
 800387a:	2300      	movs	r3, #0
 800387c:	f7ff ffe7 	bl	800384e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003880:	480b      	ldr	r0, [pc, #44]	@ (80038b0 <LoopForever+0x1e>)
 8003882:	490c      	ldr	r1, [pc, #48]	@ (80038b4 <LoopForever+0x22>)
 8003884:	2300      	movs	r3, #0
 8003886:	f7ff ffe8 	bl	800385a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800388a:	f00b fae3 	bl	800ee54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800388e:	f7ff f941 	bl	8002b14 <main>

08003892 <LoopForever>:

LoopForever:
  b LoopForever
 8003892:	e7fe      	b.n	8003892 <LoopForever>
  ldr   r0, =_estack
 8003894:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003898:	20000008 	.word	0x20000008
 800389c:	200001f8 	.word	0x200001f8
 80038a0:	080123e8 	.word	0x080123e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80038a4:	200301e4 	.word	0x200301e4
 80038a8:	20030a67 	.word	0x20030a67
 80038ac:	0801262a 	.word	0x0801262a
  INIT_BSS _sbss, _ebss
 80038b0:	20000250 	.word	0x20000250
 80038b4:	200018a4 	.word	0x200018a4

080038b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038b8:	e7fe      	b.n	80038b8 <ADC1_IRQHandler>
	...

080038bc <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a04      	ldr	r2, [pc, #16]	@ (80038d8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6053      	str	r3, [r2, #4]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	e0042000 	.word	0xe0042000

080038dc <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	6053      	str	r3, [r2, #4]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e0042000 	.word	0xe0042000

080038fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003906:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <HAL_Init+0x3c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <HAL_Init+0x3c>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003912:	2003      	movs	r0, #3
 8003914:	f000 f9c0 	bl	8003c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003918:	200f      	movs	r0, #15
 800391a:	f000 f80f 	bl	800393c <HAL_InitTick>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	e001      	b.n	800392e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800392a:	f7ff fcba 	bl	80032a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800392e:	79fb      	ldrb	r3, [r7, #7]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	58004000 	.word	0x58004000

0800393c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003948:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <HAL_InitTick+0x6c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d024      	beq.n	800399a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003950:	f002 fe86 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <HAL_InitTick+0x6c>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	4619      	mov	r1, r3
 800395c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003960:	fbb3 f3f1 	udiv	r3, r3, r1
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f9d6 	bl	8003d1a <HAL_SYSTICK_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10f      	bne.n	8003994 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	d809      	bhi.n	800398e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800397a:	2200      	movs	r2, #0
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
 8003982:	f000 f994 	bl	8003cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003986:	4a09      	ldr	r2, [pc, #36]	@ (80039ac <HAL_InitTick+0x70>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e007      	b.n	800399e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e004      	b.n	800399e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
 8003998:	e001      	b.n	800399e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000014 	.word	0x20000014
 80039ac:	20000010 	.word	0x20000010

080039b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039b4:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <HAL_IncTick+0x20>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_IncTick+0x24>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <HAL_IncTick+0x24>)
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000014 	.word	0x20000014
 80039d4:	20000570 	.word	0x20000570

080039d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return uwTick;
 80039dc:	4b03      	ldr	r3, [pc, #12]	@ (80039ec <HAL_GetTick+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000570 	.word	0x20000570

080039f0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <HAL_GetTickPrio+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000010 	.word	0x20000010

08003a08 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <HAL_GetTickFreq+0x14>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000014 	.word	0x20000014

08003a20 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003a24:	f7ff ff4a 	bl	80038bc <LL_DBGMCU_EnableDBGSleepMode>
}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003a30:	f7ff ff54 	bl	80038dc <LL_DBGMCU_EnableDBGStopMode>
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a6a:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	60d3      	str	r3, [r2, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a84:	4b04      	ldr	r3, [pc, #16]	@ (8003a98 <__NVIC_GetPriorityGrouping+0x18>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0307 	and.w	r3, r3, #7
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db0b      	blt.n	8003ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4907      	ldr	r1, [pc, #28]	@ (8003ad4 <__NVIC_EnableIRQ+0x38>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000e100 	.word	0xe000e100

08003ad8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	db12      	blt.n	8003b10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	490a      	ldr	r1, [pc, #40]	@ (8003b1c <__NVIC_DisableIRQ+0x44>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2001      	movs	r0, #1
 8003afa:	fa00 f202 	lsl.w	r2, r0, r2
 8003afe:	3320      	adds	r3, #32
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b04:	f3bf 8f4f 	dsb	sy
}
 8003b08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b0a:	f3bf 8f6f 	isb	sy
}
 8003b0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db0c      	blt.n	8003b4c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4907      	ldr	r1, [pc, #28]	@ (8003b58 <__NVIC_SetPendingIRQ+0x38>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2001      	movs	r0, #1
 8003b42:	fa00 f202 	lsl.w	r2, r0, r2
 8003b46:	3340      	adds	r3, #64	@ 0x40
 8003b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0c      	blt.n	8003b88 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	@ (8003b94 <__NVIC_ClearPendingIRQ+0x38>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	3360      	adds	r3, #96	@ 0x60
 8003b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	@ (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f1c3 0307 	rsb	r3, r3, #7
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	bf28      	it	cs
 8003c0a:	2304      	movcs	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d902      	bls.n	8003c1c <NVIC_EncodePriority+0x30>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	e000      	b.n	8003c1e <NVIC_EncodePriority+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c34:	f04f 31ff 	mov.w	r1, #4294967295
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43d9      	mvns	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	4313      	orrs	r3, r2
         );
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c64:	d301      	bcc.n	8003c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00f      	b.n	8003c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c94 <SysTick_Config+0x40>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c72:	210f      	movs	r1, #15
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f7ff ff8e 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <SysTick_Config+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c82:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <SysTick_Config+0x40>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	e000e010 	.word	0xe000e010

08003c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fec9 	bl	8003a38 <__NVIC_SetPriorityGrouping>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cbc:	f7ff fee0 	bl	8003a80 <__NVIC_GetPriorityGrouping>
 8003cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	6978      	ldr	r0, [r7, #20]
 8003cc8:	f7ff ff90 	bl	8003bec <NVIC_EncodePriority>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff5f 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fed3 	bl	8003a9c <__NVIC_EnableIRQ>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fee3 	bl	8003ad8 <__NVIC_DisableIRQ>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff96 	bl	8003c54 <SysTick_Config>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff feed 	bl	8003b20 <__NVIC_SetPendingIRQ>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fefd 	bl	8003b5c <__NVIC_ClearPendingIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e08e      	b.n	8003e9c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b47      	ldr	r3, [pc, #284]	@ (8003ea4 <HAL_DMA_Init+0x138>)
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d80f      	bhi.n	8003daa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4b45      	ldr	r3, [pc, #276]	@ (8003ea8 <HAL_DMA_Init+0x13c>)
 8003d92:	4413      	add	r3, r2
 8003d94:	4a45      	ldr	r2, [pc, #276]	@ (8003eac <HAL_DMA_Init+0x140>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	009a      	lsls	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a42      	ldr	r2, [pc, #264]	@ (8003eb0 <HAL_DMA_Init+0x144>)
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003da8:	e00e      	b.n	8003dc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_DMA_Init+0x148>)
 8003db2:	4413      	add	r3, r2
 8003db4:	4a3d      	ldr	r2, [pc, #244]	@ (8003eac <HAL_DMA_Init+0x140>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	009a      	lsls	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb8 <HAL_DMA_Init+0x14c>)
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa74 	bl	8004308 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e28:	d102      	bne.n	8003e30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_DMA_Init+0x106>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d80c      	bhi.n	8003e72 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fa93 	bl	8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	e008      	b.n	8003e84 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40020407 	.word	0x40020407
 8003ea8:	bffdfff8 	.word	0xbffdfff8
 8003eac:	cccccccd 	.word	0xcccccccd
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	bffdfbf8 	.word	0xbffdfbf8
 8003eb8:	40020400 	.word	0x40020400

08003ebc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_DMA_Start_IT+0x20>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e066      	b.n	8003faa <HAL_DMA_Start_IT+0xee>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d155      	bne.n	8003f9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f9b9 	bl	800428c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 020e 	orr.w	r2, r2, #14
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e00f      	b.n	8003f54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0204 	bic.w	r2, r2, #4
 8003f42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 020a 	orr.w	r2, r2, #10
 8003f52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f70:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e005      	b.n	8003fa8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04f      	b.n	8004064 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d008      	beq.n	8003fe2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e040      	b.n	8004064 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 020e 	bic.w	r2, r2, #14
 8003ff0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004000:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f003 021c 	and.w	r2, r3, #28
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f202 	lsl.w	r2, r1, r2
 8004024:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800402e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004046:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004050:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d005      	beq.n	8004094 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2204      	movs	r2, #4
 800408c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
 8004092:	e047      	b.n	8004124 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 020e 	bic.w	r2, r2, #14
 80040a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	f003 021c 	and.w	r2, r3, #28
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f202 	lsl.w	r2, r1, r2
 80040d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004102:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
    }
  }
  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f003 031c 	and.w	r3, r3, #28
 800414e:	2204      	movs	r2, #4
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d026      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x7a>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d021      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0204 	bic.w	r2, r2, #4
 8004180:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f003 021c 	and.w	r2, r3, #28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	2104      	movs	r1, #4
 8004190:	fa01 f202 	lsl.w	r2, r1, r2
 8004194:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	2b00      	cmp	r3, #0
 800419c:	d071      	beq.n	8004282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80041a6:	e06c      	b.n	8004282 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	f003 031c 	and.w	r3, r3, #28
 80041b0:	2202      	movs	r2, #2
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02e      	beq.n	800421a <HAL_DMA_IRQHandler+0xec>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d029      	beq.n	800421a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020a 	bic.w	r2, r2, #10
 80041e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f0:	f003 021c 	and.w	r2, r3, #28
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	2102      	movs	r1, #2
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d038      	beq.n	8004282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004218:	e033      	b.n	8004282 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f003 031c 	and.w	r3, r3, #28
 8004222:	2208      	movs	r2, #8
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d02a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x156>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d025      	beq.n	8004284 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 020e 	bic.w	r2, r2, #14
 8004246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	f003 021c 	and.w	r2, r3, #28
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004282:	bf00      	nop
 8004284:	bf00      	nop
}
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f003 021c 	and.w	r2, r3, #28
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f202 	lsl.w	r2, r1, r2
 80042c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d108      	bne.n	80042ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ea:	e007      	b.n	80042fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004318:	429a      	cmp	r2, r3
 800431a:	d80a      	bhi.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004328:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6493      	str	r3, [r2, #72]	@ 0x48
 8004330:	e007      	b.n	8004342 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	009a      	lsls	r2, r3, #2
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800433c:	4413      	add	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	3b08      	subs	r3, #8
 800434a:	4a0c      	ldr	r2, [pc, #48]	@ (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0a      	ldr	r2, [pc, #40]	@ (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004358:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40020407 	.word	0x40020407
 8004378:	4002081c 	.word	0x4002081c
 800437c:	cccccccd 	.word	0xcccccccd
 8004380:	40020880 	.word	0x40020880

08004384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004394:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	461a      	mov	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2201      	movs	r2, #1
 80043b4:	409a      	lsls	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	1000823f 	.word	0x1000823f
 80043cc:	40020940 	.word	0x40020940

080043d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043de:	e14c      	b.n	800467a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 813e 	beq.w	8004674 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d005      	beq.n	8004410 <HAL_GPIO_Init+0x40>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0201 	and.w	r2, r3, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d017      	beq.n	80044ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d123      	bne.n	8004502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	08da      	lsrs	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3208      	adds	r2, #8
 80044c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0203 	and.w	r2, r3, #3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8098 	beq.w	8004674 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004544:	4a54      	ldr	r2, [pc, #336]	@ (8004698 <HAL_GPIO_Init+0x2c8>)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	3302      	adds	r3, #2
 800454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	220f      	movs	r2, #15
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800456e:	d019      	beq.n	80045a4 <HAL_GPIO_Init+0x1d4>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a4a      	ldr	r2, [pc, #296]	@ (800469c <HAL_GPIO_Init+0x2cc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_GPIO_Init+0x1d0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a49      	ldr	r2, [pc, #292]	@ (80046a0 <HAL_GPIO_Init+0x2d0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00d      	beq.n	800459c <HAL_GPIO_Init+0x1cc>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a48      	ldr	r2, [pc, #288]	@ (80046a4 <HAL_GPIO_Init+0x2d4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <HAL_GPIO_Init+0x1c8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a47      	ldr	r2, [pc, #284]	@ (80046a8 <HAL_GPIO_Init+0x2d8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_GPIO_Init+0x1c4>
 8004590:	2304      	movs	r3, #4
 8004592:	e008      	b.n	80045a6 <HAL_GPIO_Init+0x1d6>
 8004594:	2307      	movs	r3, #7
 8004596:	e006      	b.n	80045a6 <HAL_GPIO_Init+0x1d6>
 8004598:	2303      	movs	r3, #3
 800459a:	e004      	b.n	80045a6 <HAL_GPIO_Init+0x1d6>
 800459c:	2302      	movs	r3, #2
 800459e:	e002      	b.n	80045a6 <HAL_GPIO_Init+0x1d6>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_GPIO_Init+0x1d6>
 80045a4:	2300      	movs	r3, #0
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	f002 0203 	and.w	r2, r2, #3
 80045ac:	0092      	lsls	r2, r2, #2
 80045ae:	4093      	lsls	r3, r2
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045b6:	4938      	ldr	r1, [pc, #224]	@ (8004698 <HAL_GPIO_Init+0x2c8>)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	3302      	adds	r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045c4:	4b39      	ldr	r3, [pc, #228]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045e8:	4a30      	ldr	r2, [pc, #192]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045ee:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004612:	4a26      	ldr	r2, [pc, #152]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004618:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800463e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004646:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800466c:	4a0f      	ldr	r2, [pc, #60]	@ (80046ac <HAL_GPIO_Init+0x2dc>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3301      	adds	r3, #1
 8004678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	f47f aeab 	bne.w	80043e0 <HAL_GPIO_Init+0x10>
  }
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40010000 	.word	0x40010000
 800469c:	48000400 	.word	0x48000400
 80046a0:	48000800 	.word	0x48000800
 80046a4:	48000c00 	.word	0x48000c00
 80046a8:	48001000 	.word	0x48001000
 80046ac:	58000800 	.word	0x58000800

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046cc:	e002      	b.n	80046d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4013      	ands	r3, r2
 80046f8:	041a      	lsls	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43d9      	mvns	r1, r3
 80046fe:	887b      	ldrh	r3, [r7, #2]
 8004700:	400b      	ands	r3, r1
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	619a      	str	r2, [r3, #24]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800471e:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800472a:	4a05      	ldr	r2, [pc, #20]	@ (8004740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f806 	bl	8004744 <HAL_GPIO_EXTI_Callback>
  }
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58000800 	.word	0x58000800

08004744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_HSEM_IRQHandler+0x30>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004768:	4b08      	ldr	r3, [pc, #32]	@ (800478c <HAL_HSEM_IRQHandler+0x30>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	43db      	mvns	r3, r3
 8004770:	4906      	ldr	r1, [pc, #24]	@ (800478c <HAL_HSEM_IRQHandler+0x30>)
 8004772:	4013      	ands	r3, r2
 8004774:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004776:	4a05      	ldr	r2, [pc, #20]	@ (800478c <HAL_HSEM_IRQHandler+0x30>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f807 	bl	8004790 <HAL_HSEM_FreeCallback>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	58001500 	.word	0x58001500

08004790 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e08d      	b.n	80048d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe fd7a 	bl	80032c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2224      	movs	r2, #36	@ 0x24
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	e006      	b.n	800482c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800482a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d108      	bne.n	8004846 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	e007      	b.n	8004856 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004854:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004868:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004878:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	f040 80f9 	bne.w	8004af6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_I2C_Mem_Write+0x34>
 800490a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004916:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0ed      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_I2C_Mem_Write+0x4e>
 8004926:	2302      	movs	r3, #2
 8004928:	e0e6      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004932:	f7ff f851 	bl	80039d8 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2319      	movs	r3, #25
 800493e:	2201      	movs	r2, #1
 8004940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fac3 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0d1      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2221      	movs	r2, #33	@ 0x21
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2240      	movs	r2, #64	@ 0x40
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800497c:	88f8      	ldrh	r0, [r7, #6]
 800497e:	893a      	ldrh	r2, [r7, #8]
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4603      	mov	r3, r0
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f9d3 	bl	8004d38 <I2C_RequestMemoryWrite>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0a9      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2bff      	cmp	r3, #255	@ 0xff
 80049ac:	d90e      	bls.n	80049cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	22ff      	movs	r2, #255	@ 0xff
 80049b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	8979      	ldrh	r1, [r7, #10]
 80049bc:	2300      	movs	r3, #0
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fc47 	bl	8005258 <I2C_TransferConfig>
 80049ca:	e00f      	b.n	80049ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	8979      	ldrh	r1, [r7, #10]
 80049de:	2300      	movs	r3, #0
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fc36 	bl	8005258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fac6 	bl	8004f82 <I2C_WaitOnTXISFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e07b      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d034      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x1c8>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d130      	bne.n	8004aa4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2180      	movs	r1, #128	@ 0x80
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fa3f 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e04d      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2bff      	cmp	r3, #255	@ 0xff
 8004a64:	d90e      	bls.n	8004a84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	22ff      	movs	r2, #255	@ 0xff
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	8979      	ldrh	r1, [r7, #10]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fbeb 	bl	8005258 <I2C_TransferConfig>
 8004a82:	e00f      	b.n	8004aa4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	8979      	ldrh	r1, [r7, #10]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fbda 	bl	8005258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d19e      	bne.n	80049ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 faac 	bl	8005010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e01a      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <HAL_I2C_Mem_Write+0x224>)
 8004ad6:	400b      	ands	r3, r1
 8004ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	fe00e800 	.word	0xfe00e800

08004b04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	460b      	mov	r3, r1
 8004b18:	813b      	strh	r3, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	f040 80fd 	bne.w	8004d26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_I2C_Mem_Read+0x34>
 8004b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0f1      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_I2C_Mem_Read+0x4e>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e0ea      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fe ff3d 	bl	80039d8 <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2319      	movs	r3, #25
 8004b66:	2201      	movs	r2, #1
 8004b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f9af 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0d5      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2222      	movs	r2, #34	@ 0x22
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2240      	movs	r2, #64	@ 0x40
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba4:	88f8      	ldrh	r0, [r7, #6]
 8004ba6:	893a      	ldrh	r2, [r7, #8]
 8004ba8:	8979      	ldrh	r1, [r7, #10]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f913 	bl	8004de0 <I2C_RequestMemoryRead>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0ad      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2bff      	cmp	r3, #255	@ 0xff
 8004bd4:	d90e      	bls.n	8004bf4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	22ff      	movs	r2, #255	@ 0xff
 8004bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	8979      	ldrh	r1, [r7, #10]
 8004be4:	4b52      	ldr	r3, [pc, #328]	@ (8004d30 <HAL_I2C_Mem_Read+0x22c>)
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fb33 	bl	8005258 <I2C_TransferConfig>
 8004bf2:	e00f      	b.n	8004c14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	8979      	ldrh	r1, [r7, #10]
 8004c06:	4b4a      	ldr	r3, [pc, #296]	@ (8004d30 <HAL_I2C_Mem_Read+0x22c>)
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fb22 	bl	8005258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f956 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07c      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d034      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x1d0>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d130      	bne.n	8004cd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f927 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e04d      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2bff      	cmp	r3, #255	@ 0xff
 8004c94:	d90e      	bls.n	8004cb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	22ff      	movs	r2, #255	@ 0xff
 8004c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	8979      	ldrh	r1, [r7, #10]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fad3 	bl	8005258 <I2C_TransferConfig>
 8004cb2:	e00f      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	8979      	ldrh	r1, [r7, #10]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fac2 	bl	8005258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d19a      	bne.n	8004c14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f994 	bl	8005010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e01a      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_I2C_Mem_Read+0x230>)
 8004d06:	400b      	ands	r3, r1
 8004d08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	80002400 	.word	0x80002400
 8004d34:	fe00e800 	.word	0xfe00e800

08004d38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	817b      	strh	r3, [r7, #10]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	813b      	strh	r3, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	8979      	ldrh	r1, [r7, #10]
 8004d58:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <I2C_RequestMemoryWrite+0xa4>)
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fa79 	bl	8005258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	69b9      	ldr	r1, [r7, #24]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f909 	bl	8004f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e02c      	b.n	8004dd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d105      	bne.n	8004d8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d8a:	e015      	b.n	8004db8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d8c:	893b      	ldrh	r3, [r7, #8]
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	69b9      	ldr	r1, [r7, #24]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8ef 	bl	8004f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e012      	b.n	8004dd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dae:	893b      	ldrh	r3, [r7, #8]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2180      	movs	r1, #128	@ 0x80
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f884 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	80002000 	.word	0x80002000

08004de0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	461a      	mov	r2, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	817b      	strh	r3, [r7, #10]
 8004df2:	460b      	mov	r3, r1
 8004df4:	813b      	strh	r3, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	8979      	ldrh	r1, [r7, #10]
 8004e00:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <I2C_RequestMemoryRead+0xa4>)
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fa26 	bl	8005258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	69b9      	ldr	r1, [r7, #24]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f8b6 	bl	8004f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e02c      	b.n	8004e7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e26:	893b      	ldrh	r3, [r7, #8]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e30:	e015      	b.n	8004e5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e32:	893b      	ldrh	r3, [r7, #8]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	69b9      	ldr	r1, [r7, #24]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f89c 	bl	8004f82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e012      	b.n	8004e7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e54:	893b      	ldrh	r3, [r7, #8]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2200      	movs	r2, #0
 8004e66:	2140      	movs	r1, #64	@ 0x40
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f831 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	80002000 	.word	0x80002000

08004e88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d103      	bne.n	8004ea6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d007      	beq.n	8004ec4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	619a      	str	r2, [r3, #24]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee0:	e03b      	b.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8d6 	bl	8005098 <I2C_IsErrorOccurred>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e041      	b.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d02d      	beq.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fe fd6b 	bl	80039d8 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d122      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d113      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e00f      	b.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d0b4      	beq.n	8004ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f8e:	e033      	b.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f87f 	bl	8005098 <I2C_IsErrorOccurred>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e031      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004faa:	d025      	beq.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fac:	f7fe fd14 	bl	80039d8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11a      	bne.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d013      	beq.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e007      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d1c4      	bne.n	8004f90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501c:	e02f      	b.n	800507e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f838 	bl	8005098 <I2C_IsErrorOccurred>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e02d      	b.n	800508e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fe fcd1 	bl	80039d8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11a      	bne.n	800507e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d013      	beq.n	800507e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e007      	b.n	800508e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b20      	cmp	r3, #32
 800508a:	d1c8      	bne.n	800501e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	@ 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d068      	beq.n	8005196 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2210      	movs	r2, #16
 80050ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050cc:	e049      	b.n	8005162 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d045      	beq.n	8005162 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fe fc7f 	bl	80039d8 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_IsErrorOccurred+0x54>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d13a      	bne.n	8005162 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800510e:	d121      	bne.n	8005154 <I2C_IsErrorOccurred+0xbc>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005116:	d01d      	beq.n	8005154 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	2b20      	cmp	r3, #32
 800511c:	d01a      	beq.n	8005154 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800512c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800512e:	f7fe fc53 	bl	80039d8 <HAL_GetTick>
 8005132:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005134:	e00e      	b.n	8005154 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005136:	f7fe fc4f 	bl	80039d8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b19      	cmp	r3, #25
 8005142:	d907      	bls.n	8005154 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f043 0320 	orr.w	r3, r3, #32
 800514a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005152:	e006      	b.n	8005162 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d1e9      	bne.n	8005136 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d003      	beq.n	8005178 <I2C_IsErrorOccurred+0xe0>
 8005170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0aa      	beq.n	80050ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2220      	movs	r2, #32
 8005186:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00b      	beq.n	80051c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f043 0302 	orr.w	r3, r3, #2
 80051f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01c      	beq.n	8005246 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff fe3b 	bl	8004e88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6859      	ldr	r1, [r3, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <I2C_IsErrorOccurred+0x1bc>)
 800521e:	400b      	ands	r3, r1
 8005220:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	@ 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	fe00e800 	.word	0xfe00e800

08005258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	4613      	mov	r3, r2
 8005268:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005270:	7a7b      	ldrb	r3, [r7, #9]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005278:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	4313      	orrs	r3, r2
 8005282:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005286:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	0d5b      	lsrs	r3, r3, #21
 8005292:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005296:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <I2C_TransferConfig+0x60>)
 8005298:	430b      	orrs	r3, r1
 800529a:	43db      	mvns	r3, r3
 800529c:	ea02 0103 	and.w	r1, r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	03ff63ff 	.word	0x03ff63ff

080052bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d138      	bne.n	8005344 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052dc:	2302      	movs	r3, #2
 80052de:	e032      	b.n	8005346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	@ 0x24
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800530e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	e000      	b.n	8005346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005344:	2302      	movs	r3, #2
  }
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b20      	cmp	r3, #32
 8005366:	d139      	bne.n	80053dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005372:	2302      	movs	r3, #2
 8005374:	e033      	b.n	80053de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	@ 0x24
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80053fe:	4b13      	ldr	r3, [pc, #76]	@ (800544c <HAL_IPCC_Init+0x60>)
 8005400:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd ffb4 	bl	800337c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005414:	68b8      	ldr	r0, [r7, #8]
 8005416:	f000 f85b 	bl	80054d0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f82c 	bl	8005484 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800543a:	e001      	b.n	8005440 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	58000c00 	.word	0x58000c00

08005450 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	4613      	mov	r3, r2
 8005476:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e00f      	b.n	80054b2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	4a0b      	ldr	r2, [pc, #44]	@ (80054c8 <IPCC_SetDefaultCallbacks+0x44>)
 800549c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3306      	adds	r3, #6
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <IPCC_SetDefaultCallbacks+0x48>)
 80054aa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	d9ec      	bls.n	8005492 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	08005451 	.word	0x08005451
 80054cc:	0800546b 	.word	0x0800546b

080054d0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80054e4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	223f      	movs	r2, #63	@ 0x3f
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054fc:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a04      	ldr	r2, [pc, #16]	@ (8005514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	58000400 	.word	0x58000400

08005518 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800551c:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <HAL_PWREx_GetVoltageRange+0x18>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	58000400 	.word	0x58000400

08005534 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005546:	d101      	bne.n	800554c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_RCC_HSE_Enable>:
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <LL_RCC_HSE_Disable>:
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800557a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	6013      	str	r3, [r2, #0]
}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_RCC_HSE_IsReady>:
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a6:	d101      	bne.n	80055ac <LL_RCC_HSE_IsReady+0x18>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <LL_RCC_HSE_IsReady+0x1a>
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <LL_RCC_HSI_Enable>:
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ca:	6013      	str	r3, [r2, #0]
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_HSI_Disable>:
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e8:	6013      	str	r3, [r2, #0]
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_HSI_IsReady>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005606:	d101      	bne.n	800560c <LL_RCC_HSI_IsReady+0x18>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <LL_RCC_HSI_IsReady+0x1a>
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_RCC_HSI48_Enable>:
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800564a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800564e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800565a:	bf00      	nop
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LL_RCC_HSI48_Disable>:
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800566c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_RCC_HSI48_IsReady>:
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800568e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d101      	bne.n	800569e <LL_RCC_HSI48_IsReady+0x18>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <LL_RCC_HSI48_IsReady+0x1a>
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <LL_RCC_LSE_Enable>:
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <LL_RCC_LSE_Disable>:
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_RCC_LSE_EnableBypass>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_RCC_LSE_DisableBypass>:
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_RCC_LSE_IsReady>:
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d101      	bne.n	800574a <LL_RCC_LSE_IsReady+0x18>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <LL_RCC_LSE_IsReady+0x1a>
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_LSI1_Enable>:
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_RCC_LSI1_Disable>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <LL_RCC_LSI1_IsReady>:
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d101      	bne.n	80057b2 <LL_RCC_LSI1_IsReady+0x18>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_RCC_LSI1_IsReady+0x1a>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <LL_RCC_LSI2_Enable>:
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80057d6:	bf00      	nop
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_RCC_LSI2_Disable>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_RCC_LSI2_IsReady>:
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b08      	cmp	r3, #8
 8005814:	d101      	bne.n	800581a <LL_RCC_LSI2_IsReady+0x18>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <LL_RCC_LSI2_IsReady+0x1a>
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <LL_RCC_LSI2_SetTrimming>:
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005836:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_RCC_MSI_Enable>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <LL_RCC_MSI_Disable>:
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6013      	str	r3, [r2, #0]
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_RCC_MSI_IsReady>:
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d101      	bne.n	80058a6 <LL_RCC_MSI_IsReady+0x16>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <LL_RCC_MSI_IsReady+0x18>
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <LL_RCC_MSI_SetRange>:
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <LL_RCC_MSI_GetRange>:
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80058e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058ea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2bb0      	cmp	r3, #176	@ 0xb0
 80058f0:	d901      	bls.n	80058f6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80058f2:	23b0      	movs	r3, #176	@ 0xb0
 80058f4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80058f6:	687b      	ldr	r3, [r7, #4]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_RCC_SetSysClkSource>:
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 0203 	bic.w	r2, r3, #3
 8005940:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <LL_RCC_GetSysClkSource>:
{
 8005956:	b480      	push	{r7}
 8005958:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 030c 	and.w	r3, r3, #12
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <LL_RCC_SetAHBPrescaler>:
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80059a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <LL_RCC_SetAHB4Prescaler>:
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80059d2:	f023 020f 	bic.w	r2, r3, #15
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	091b      	lsrs	r3, r3, #4
 80059da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_SetAPB1Prescaler>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	608b      	str	r3, [r1, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <LL_RCC_SetAPB2Prescaler>:
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	608b      	str	r3, [r1, #8]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <LL_RCC_GetAHBPrescaler>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_RCC_GetAHB4Prescaler>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a60:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_GetAPB1Prescaler>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_GetAPB2Prescaler>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	6013      	str	r3, [r2, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ad0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ad4:	6013      	str	r3, [r2, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005af2:	d101      	bne.n	8005af8 <LL_RCC_PLL_IsReady+0x18>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <LL_RCC_PLL_IsReady+0x1a>
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b36:	b480      	push	{r7}
 8005b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0303 	and.w	r3, r3, #3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d101      	bne.n	8005b7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b9e:	d101      	bne.n	8005ba4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc4:	d101      	bne.n	8005bca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be8:	d101      	bne.n	8005bee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c0c:	d101      	bne.n	8005c12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b08d      	sub	sp, #52	@ 0x34
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e363      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 808d 	beq.w	8005d5a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c40:	f7ff fe89 	bl	8005956 <LL_RCC_GetSysClkSource>
 8005c44:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c46:	f7ff ff82 	bl	8005b4e <LL_RCC_PLL_GetMainSource>
 8005c4a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCC_OscConfig+0x3e>
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d147      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d144      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e347      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005c6e:	f7ff fe34 	bl	80058da <LL_RCC_MSI_GetRange>
 8005c72:	4603      	mov	r3, r0
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d914      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fd2f 	bl	80066e0 <RCC_SetFlashLatencyFromMSIRange>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e336      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fe0e 	bl	80058b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fe32 	bl	8005904 <LL_RCC_MSI_SetCalibTrimming>
 8005ca0:	e013      	b.n	8005cca <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fe03 	bl	80058b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fe27 	bl	8005904 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fd10 	bl	80066e0 <RCC_SetFlashLatencyFromMSIRange>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e317      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005cca:	f000 fcc9 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4aa4      	ldr	r2, [pc, #656]	@ (8005f64 <HAL_RCC_OscConfig+0x344>)
 8005cd2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cd4:	4ba4      	ldr	r3, [pc, #656]	@ (8005f68 <HAL_RCC_OscConfig+0x348>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fd fe2f 	bl	800393c <HAL_InitTick>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d039      	beq.n	8005d58 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e308      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01e      	beq.n	8005d2e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cf0:	f7ff fdb0 	bl	8005854 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fe70 	bl	80039d8 <HAL_GetTick>
 8005cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cfc:	f7fd fe6c 	bl	80039d8 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e2f5      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d0e:	f7ff fdbf 	bl	8005890 <LL_RCC_MSI_IsReady>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f1      	beq.n	8005cfc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fdc8 	bl	80058b2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fdec 	bl	8005904 <LL_RCC_MSI_SetCalibTrimming>
 8005d2c:	e015      	b.n	8005d5a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d2e:	f7ff fda0 	bl	8005872 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d32:	f7fd fe51 	bl	80039d8 <HAL_GetTick>
 8005d36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d3a:	f7fd fe4d 	bl	80039d8 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e2d6      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d4c:	f7ff fda0 	bl	8005890 <LL_RCC_MSI_IsReady>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f1      	bne.n	8005d3a <HAL_RCC_OscConfig+0x11a>
 8005d56:	e000      	b.n	8005d5a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d58:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d047      	beq.n	8005df6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d66:	f7ff fdf6 	bl	8005956 <LL_RCC_GetSysClkSource>
 8005d6a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d6c:	f7ff feef 	bl	8005b4e <LL_RCC_PLL_GetMainSource>
 8005d70:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_OscConfig+0x164>
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2b0c      	cmp	r3, #12
 8005d7c:	d108      	bne.n	8005d90 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d105      	bne.n	8005d90 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d134      	bne.n	8005df6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e2b4      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d98:	d102      	bne.n	8005da0 <HAL_RCC_OscConfig+0x180>
 8005d9a:	f7ff fbdd 	bl	8005558 <LL_RCC_HSE_Enable>
 8005d9e:	e001      	b.n	8005da4 <HAL_RCC_OscConfig+0x184>
 8005da0:	f7ff fbe9 	bl	8005576 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d012      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fd fe14 	bl	80039d8 <HAL_GetTick>
 8005db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db4:	f7fd fe10 	bl	80039d8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	@ 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e299      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005dc6:	f7ff fbe5 	bl	8005594 <LL_RCC_HSE_IsReady>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f1      	beq.n	8005db4 <HAL_RCC_OscConfig+0x194>
 8005dd0:	e011      	b.n	8005df6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd2:	f7fd fe01 	bl	80039d8 <HAL_GetTick>
 8005dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dda:	f7fd fdfd 	bl	80039d8 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b64      	cmp	r3, #100	@ 0x64
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e286      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005dec:	f7ff fbd2 	bl	8005594 <LL_RCC_HSE_IsReady>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f1      	bne.n	8005dda <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e02:	f7ff fda8 	bl	8005956 <LL_RCC_GetSysClkSource>
 8005e06:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e08:	f7ff fea1 	bl	8005b4e <LL_RCC_PLL_GetMainSource>
 8005e0c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_OscConfig+0x200>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d10e      	bne.n	8005e38 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d10b      	bne.n	8005e38 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e266      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fbf1 	bl	8005618 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e36:	e031      	b.n	8005e9c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e40:	f7ff fbba 	bl	80055b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fd fdc8 	bl	80039d8 <HAL_GetTick>
 8005e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4c:	f7fd fdc4 	bl	80039d8 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e24d      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e5e:	f7ff fbc9 	bl	80055f4 <LL_RCC_HSI_IsReady>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f1      	beq.n	8005e4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fbd3 	bl	8005618 <LL_RCC_HSI_SetCalibTrimming>
 8005e72:	e013      	b.n	8005e9c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e74:	f7ff fbaf 	bl	80055d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fd fdae 	bl	80039d8 <HAL_GetTick>
 8005e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fd fdaa 	bl	80039d8 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e233      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e92:	f7ff fbaf 	bl	80055f4 <LL_RCC_HSI_IsReady>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1f1      	bne.n	8005e80 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80a3 	beq.w	8005ffc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d076      	beq.n	8005fac <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d046      	beq.n	8005f58 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005eca:	f7ff fc66 	bl	800579a <LL_RCC_LSI1_IsReady>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d113      	bne.n	8005efc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005ed4:	f7ff fc3f 	bl	8005756 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ed8:	f7fd fd7e 	bl	80039d8 <HAL_GetTick>
 8005edc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005ee0:	f7fd fd7a 	bl	80039d8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e203      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005ef2:	f7ff fc52 	bl	800579a <LL_RCC_LSI1_IsReady>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f1      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005efc:	f7ff fc5f 	bl	80057be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fd fd6a 	bl	80039d8 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f08:	f7fd fd66 	bl	80039d8 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e1ef      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f1a:	f7ff fc72 	bl	8005802 <LL_RCC_LSI2_IsReady>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f1      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fc7c 	bl	8005826 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f2e:	f7ff fc23 	bl	8005778 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f32:	f7fd fd51 	bl	80039d8 <HAL_GetTick>
 8005f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f3a:	f7fd fd4d 	bl	80039d8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e1d6      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f4c:	f7ff fc25 	bl	800579a <LL_RCC_LSI1_IsReady>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f1      	bne.n	8005f3a <HAL_RCC_OscConfig+0x31a>
 8005f56:	e051      	b.n	8005ffc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005f58:	f7ff fbfd 	bl	8005756 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fd fd3c 	bl	80039d8 <HAL_GetTick>
 8005f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005f62:	e00c      	b.n	8005f7e <HAL_RCC_OscConfig+0x35e>
 8005f64:	2000000c 	.word	0x2000000c
 8005f68:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f6c:	f7fd fd34 	bl	80039d8 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e1bd      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005f7e:	f7ff fc0c 	bl	800579a <LL_RCC_LSI1_IsReady>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f1      	beq.n	8005f6c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005f88:	f7ff fc2a 	bl	80057e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f8e:	f7fd fd23 	bl	80039d8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e1ac      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fa0:	f7ff fc2f 	bl	8005802 <LL_RCC_LSI2_IsReady>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f1      	bne.n	8005f8e <HAL_RCC_OscConfig+0x36e>
 8005faa:	e027      	b.n	8005ffc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005fac:	f7ff fc18 	bl	80057e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fd fd12 	bl	80039d8 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005fb8:	f7fd fd0e 	bl	80039d8 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e197      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005fca:	f7ff fc1a 	bl	8005802 <LL_RCC_LSI2_IsReady>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f1      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005fd4:	f7ff fbd0 	bl	8005778 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fd fcfe 	bl	80039d8 <HAL_GetTick>
 8005fdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fe0:	f7fd fcfa 	bl	80039d8 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e183      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005ff2:	f7ff fbd2 	bl	800579a <LL_RCC_LSI1_IsReady>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f1      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d05b      	beq.n	80060c0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006008:	4ba7      	ldr	r3, [pc, #668]	@ (80062a8 <HAL_RCC_OscConfig+0x688>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d114      	bne.n	800603e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006014:	f7ff fa70 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006018:	f7fd fcde 	bl	80039d8 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006020:	f7fd fcda 	bl	80039d8 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e163      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006032:	4b9d      	ldr	r3, [pc, #628]	@ (80062a8 <HAL_RCC_OscConfig+0x688>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0f0      	beq.n	8006020 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d102      	bne.n	800604c <HAL_RCC_OscConfig+0x42c>
 8006046:	f7ff fb30 	bl	80056aa <LL_RCC_LSE_Enable>
 800604a:	e00c      	b.n	8006066 <HAL_RCC_OscConfig+0x446>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b05      	cmp	r3, #5
 8006052:	d104      	bne.n	800605e <HAL_RCC_OscConfig+0x43e>
 8006054:	f7ff fb4b 	bl	80056ee <LL_RCC_LSE_EnableBypass>
 8006058:	f7ff fb27 	bl	80056aa <LL_RCC_LSE_Enable>
 800605c:	e003      	b.n	8006066 <HAL_RCC_OscConfig+0x446>
 800605e:	f7ff fb35 	bl	80056cc <LL_RCC_LSE_Disable>
 8006062:	f7ff fb55 	bl	8005710 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d014      	beq.n	8006098 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606e:	f7fd fcb3 	bl	80039d8 <HAL_GetTick>
 8006072:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006074:	e00a      	b.n	800608c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006076:	f7fd fcaf 	bl	80039d8 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006084:	4293      	cmp	r3, r2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e136      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800608c:	f7ff fb51 	bl	8005732 <LL_RCC_LSE_IsReady>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0ef      	beq.n	8006076 <HAL_RCC_OscConfig+0x456>
 8006096:	e013      	b.n	80060c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fd fc9e 	bl	80039d8 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fd fc9a 	bl	80039d8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e121      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060b6:	f7ff fb3c 	bl	8005732 <LL_RCC_LSE_IsReady>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1ef      	bne.n	80060a0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d02c      	beq.n	8006126 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d014      	beq.n	80060fe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060d4:	f7ff fab5 	bl	8005642 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d8:	f7fd fc7e 	bl	80039d8 <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060e0:	f7fd fc7a 	bl	80039d8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e103      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80060f2:	f7ff fac8 	bl	8005686 <LL_RCC_HSI48_IsReady>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f1      	beq.n	80060e0 <HAL_RCC_OscConfig+0x4c0>
 80060fc:	e013      	b.n	8006126 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060fe:	f7ff fab1 	bl	8005664 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006102:	f7fd fc69 	bl	80039d8 <HAL_GetTick>
 8006106:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800610a:	f7fd fc65 	bl	80039d8 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0ee      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800611c:	f7ff fab3 	bl	8005686 <LL_RCC_HSI48_IsReady>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f1      	bne.n	800610a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80e4 	beq.w	80062f8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006130:	f7ff fc11 	bl	8005956 <LL_RCC_GetSysClkSource>
 8006134:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	2b02      	cmp	r3, #2
 8006144:	f040 80b4 	bne.w	80062b0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0203 	and.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	429a      	cmp	r2, r3
 8006154:	d123      	bne.n	800619e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d11c      	bne.n	800619e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d114      	bne.n	800619e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800617e:	429a      	cmp	r2, r3
 8006180:	d10d      	bne.n	800619e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800618c:	429a      	cmp	r2, r3
 800618e:	d106      	bne.n	800619e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d05d      	beq.n	800625a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b0c      	cmp	r3, #12
 80061a2:	d058      	beq.n	8006256 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e0a1      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061b6:	f7ff fc84 	bl	8005ac2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061ba:	f7fd fc0d 	bl	80039d8 <HAL_GetTick>
 80061be:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c2:	f7fd fc09 	bl	80039d8 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e092      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1ef      	bne.n	80061c2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	4b30      	ldr	r3, [pc, #192]	@ (80062ac <HAL_RCC_OscConfig+0x68c>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061f4:	4311      	orrs	r1, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061fa:	0212      	lsls	r2, r2, #8
 80061fc:	4311      	orrs	r1, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006202:	4311      	orrs	r1, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006208:	4311      	orrs	r1, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800620e:	430a      	orrs	r2, r1
 8006210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006214:	4313      	orrs	r3, r2
 8006216:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006218:	f7ff fc44 	bl	8005aa4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800622a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800622c:	f7fd fbd4 	bl	80039d8 <HAL_GetTick>
 8006230:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006234:	f7fd fbd0 	bl	80039d8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e059      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0ef      	beq.n	8006234 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006254:	e050      	b.n	80062f8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e04f      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d147      	bne.n	80062f8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006268:	f7ff fc1c 	bl	8005aa4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800626c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800627a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800627c:	f7fd fbac 	bl	80039d8 <HAL_GetTick>
 8006280:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006284:	f7fd fba8 	bl	80039d8 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e031      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ef      	beq.n	8006284 <HAL_RCC_OscConfig+0x664>
 80062a4:	e028      	b.n	80062f8 <HAL_RCC_OscConfig+0x6d8>
 80062a6:	bf00      	nop
 80062a8:	58000400 	.word	0x58000400
 80062ac:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d01e      	beq.n	80062f4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b6:	f7ff fc04 	bl	8005ac2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ba:	f7fd fb8d 	bl	80039d8 <HAL_GetTick>
 80062be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fd fb89 	bl	80039d8 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e012      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1ef      	bne.n	80062c2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ec:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <HAL_RCC_OscConfig+0x6e4>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	60cb      	str	r3, [r1, #12]
 80062f2:	e001      	b.n	80062f8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3734      	adds	r7, #52	@ 0x34
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd90      	pop	{r4, r7, pc}
 8006302:	bf00      	nop
 8006304:	eefefffc 	.word	0xeefefffc

08006308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e12d      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800631c:	4b98      	ldr	r3, [pc, #608]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d91b      	bls.n	8006362 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632a:	4b95      	ldr	r3, [pc, #596]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 0207 	bic.w	r2, r3, #7
 8006332:	4993      	ldr	r1, [pc, #588]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	4313      	orrs	r3, r2
 8006338:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800633a:	f7fd fb4d 	bl	80039d8 <HAL_GetTick>
 800633e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006340:	e008      	b.n	8006354 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006342:	f7fd fb49 	bl	80039d8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e111      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006354:	4b8a      	ldr	r3, [pc, #552]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d1ef      	bne.n	8006342 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d016      	beq.n	800639c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff fafb 	bl	800596e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006378:	f7fd fb2e 	bl	80039d8 <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006380:	f7fd fb2a 	bl	80039d8 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e0f2      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006392:	f7ff fbe8 	bl	8005b66 <LL_RCC_IsActiveFlag_HPRE>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f1      	beq.n	8006380 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff faf2 	bl	8005996 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063b2:	f7fd fb11 	bl	80039d8 <HAL_GetTick>
 80063b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063ba:	f7fd fb0d 	bl	80039d8 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e0d5      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80063cc:	f7ff fbdd 	bl	8005b8a <LL_RCC_IsActiveFlag_C2HPRE>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f1      	beq.n	80063ba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff faeb 	bl	80059c2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063ec:	f7fd faf4 	bl	80039d8 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063f4:	f7fd faf0 	bl	80039d8 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e0b8      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006406:	f7ff fbd3 	bl	8005bb0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f1      	beq.n	80063f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d016      	beq.n	800644a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fae5 	bl	80059f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006426:	f7fd fad7 	bl	80039d8 <HAL_GetTick>
 800642a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800642e:	f7fd fad3 	bl	80039d8 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e09b      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006440:	f7ff fbc9 	bl	8005bd6 <LL_RCC_IsActiveFlag_PPRE1>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f1      	beq.n	800642e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d017      	beq.n	8006486 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fadb 	bl	8005a18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006462:	f7fd fab9 	bl	80039d8 <HAL_GetTick>
 8006466:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800646a:	f7fd fab5 	bl	80039d8 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e07d      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800647c:	f7ff fbbd 	bl	8005bfa <LL_RCC_IsActiveFlag_PPRE2>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f1      	beq.n	800646a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d043      	beq.n	800651a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d106      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800649a:	f7ff f87b 	bl	8005594 <LL_RCC_HSE_IsReady>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11e      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e067      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d106      	bne.n	80064be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064b0:	f7ff fb16 	bl	8005ae0 <LL_RCC_PLL_IsReady>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d113      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e05c      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064c6:	f7ff f9e3 	bl	8005890 <LL_RCC_MSI_IsReady>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e051      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80064d4:	f7ff f88e 	bl	80055f4 <LL_RCC_HSI_IsReady>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e04a      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff fa21 	bl	800592e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ec:	f7fd fa74 	bl	80039d8 <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fd fa70 	bl	80039d8 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e036      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650a:	f7ff fa24 	bl	8005956 <LL_RCC_GetSysClkSource>
 800650e:	4602      	mov	r2, r0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	429a      	cmp	r2, r3
 8006518:	d1ec      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800651a:	4b19      	ldr	r3, [pc, #100]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d21b      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006528:	4b15      	ldr	r3, [pc, #84]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f023 0207 	bic.w	r2, r3, #7
 8006530:	4913      	ldr	r1, [pc, #76]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	4313      	orrs	r3, r2
 8006536:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006538:	f7fd fa4e 	bl	80039d8 <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653e:	e008      	b.n	8006552 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006540:	f7fd fa4a 	bl	80039d8 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e012      	b.n	8006578 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <HAL_RCC_ClockConfig+0x278>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d1ef      	bne.n	8006540 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006560:	f000 f87e 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8006564:	4603      	mov	r3, r0
 8006566:	4a07      	ldr	r2, [pc, #28]	@ (8006584 <HAL_RCC_ClockConfig+0x27c>)
 8006568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800656a:	f7fd fa41 	bl	80039f0 <HAL_GetTickPrio>
 800656e:	4603      	mov	r3, r0
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd f9e3 	bl	800393c <HAL_InitTick>
 8006576:	4603      	mov	r3, r0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	58004000 	.word	0x58004000
 8006584:	2000000c 	.word	0x2000000c

08006588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800658e:	f7ff f9e2 	bl	8005956 <LL_RCC_GetSysClkSource>
 8006592:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800659a:	f7ff f99e 	bl	80058da <LL_RCC_MSI_GetRange>
 800659e:	4603      	mov	r3, r0
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006654 <HAL_RCC_GetSysClockFreq+0xcc>)
 80065a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e04b      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d102      	bne.n	80065bc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065b6:	4b28      	ldr	r3, [pc, #160]	@ (8006658 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e045      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d10a      	bne.n	80065d8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065c2:	f7fe ffb7 	bl	8005534 <LL_RCC_HSE_IsEnabledDiv2>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d102      	bne.n	80065d2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80065cc:	4b22      	ldr	r3, [pc, #136]	@ (8006658 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e03a      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80065d2:	4b22      	ldr	r3, [pc, #136]	@ (800665c <HAL_RCC_GetSysClockFreq+0xd4>)
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e037      	b.n	8006648 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80065d8:	f7ff fab9 	bl	8005b4e <LL_RCC_PLL_GetMainSource>
 80065dc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d003      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x64>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d003      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0x6a>
 80065ea:	e00d      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80065ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006658 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065ee:	60bb      	str	r3, [r7, #8]
        break;
 80065f0:	e015      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065f2:	f7fe ff9f 	bl	8005534 <LL_RCC_HSE_IsEnabledDiv2>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d102      	bne.n	8006602 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80065fc:	4b16      	ldr	r3, [pc, #88]	@ (8006658 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065fe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006600:	e00d      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006602:	4b16      	ldr	r3, [pc, #88]	@ (800665c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006604:	60bb      	str	r3, [r7, #8]
        break;
 8006606:	e00a      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006608:	f7ff f967 	bl	80058da <LL_RCC_MSI_GetRange>
 800660c:	4603      	mov	r3, r0
 800660e:	091b      	lsrs	r3, r3, #4
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	4a0f      	ldr	r2, [pc, #60]	@ (8006654 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	60bb      	str	r3, [r7, #8]
        break;
 800661c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800661e:	f7ff fa71 	bl	8005b04 <LL_RCC_PLL_GetN>
 8006622:	4602      	mov	r2, r0
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	fb03 f402 	mul.w	r4, r3, r2
 800662a:	f7ff fa84 	bl	8005b36 <LL_RCC_PLL_GetDivider>
 800662e:	4603      	mov	r3, r0
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	3301      	adds	r3, #1
 8006634:	fbb4 f4f3 	udiv	r4, r4, r3
 8006638:	f7ff fa71 	bl	8005b1e <LL_RCC_PLL_GetR>
 800663c:	4603      	mov	r3, r0
 800663e:	0f5b      	lsrs	r3, r3, #29
 8006640:	3301      	adds	r3, #1
 8006642:	fbb4 f3f3 	udiv	r3, r4, r3
 8006646:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006648:	68fb      	ldr	r3, [r7, #12]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	08011f60 	.word	0x08011f60
 8006658:	00f42400 	.word	0x00f42400
 800665c:	01e84800 	.word	0x01e84800

08006660 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006660:	b598      	push	{r3, r4, r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006664:	f7ff ff90 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8006668:	4604      	mov	r4, r0
 800666a:	f7ff f9e9 	bl	8005a40 <LL_RCC_GetAHBPrescaler>
 800666e:	4603      	mov	r3, r0
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	4a03      	ldr	r2, [pc, #12]	@ (8006684 <HAL_RCC_GetHCLKFreq+0x24>)
 8006678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006680:	4618      	mov	r0, r3
 8006682:	bd98      	pop	{r3, r4, r7, pc}
 8006684:	08011f00 	.word	0x08011f00

08006688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006688:	b598      	push	{r3, r4, r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800668c:	f7ff ffe8 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8006690:	4604      	mov	r4, r0
 8006692:	f7ff f9ef 	bl	8005a74 <LL_RCC_GetAPB1Prescaler>
 8006696:	4603      	mov	r3, r0
 8006698:	0a1b      	lsrs	r3, r3, #8
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	4a04      	ldr	r2, [pc, #16]	@ (80066b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd98      	pop	{r3, r4, r7, pc}
 80066b0:	08011f40 	.word	0x08011f40

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b598      	push	{r3, r4, r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80066b8:	f7ff ffd2 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 80066bc:	4604      	mov	r4, r0
 80066be:	f7ff f9e5 	bl	8005a8c <LL_RCC_GetAPB2Prescaler>
 80066c2:	4603      	mov	r3, r0
 80066c4:	0adb      	lsrs	r3, r3, #11
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	4a04      	ldr	r2, [pc, #16]	@ (80066dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd98      	pop	{r3, r4, r7, pc}
 80066dc:	08011f40 	.word	0x08011f40

080066e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2bb0      	cmp	r3, #176	@ 0xb0
 80066ec:	d903      	bls.n	80066f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80066ee:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e007      	b.n	8006706 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	4a11      	ldr	r2, [pc, #68]	@ (8006744 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006706:	f7ff f9a7 	bl	8005a58 <LL_RCC_GetAHB4Prescaler>
 800670a:	4603      	mov	r3, r0
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	4a0d      	ldr	r2, [pc, #52]	@ (8006748 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	fbb2 f3f3 	udiv	r3, r2, r3
 800671e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	0c9c      	lsrs	r4, r3, #18
 800672a:	f7fe fef5 	bl	8005518 <HAL_PWREx_GetVoltageRange>
 800672e:	4603      	mov	r3, r0
 8006730:	4619      	mov	r1, r3
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f80c 	bl	8006750 <RCC_SetFlashLatency>
 8006738:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	bf00      	nop
 8006744:	08011f60 	.word	0x08011f60
 8006748:	08011f00 	.word	0x08011f00
 800674c:	431bde83 	.word	0x431bde83

08006750 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b093      	sub	sp, #76	@ 0x4c
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800675a:	4b37      	ldr	r3, [pc, #220]	@ (8006838 <RCC_SetFlashLatency+0xe8>)
 800675c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006766:	4a35      	ldr	r2, [pc, #212]	@ (800683c <RCC_SetFlashLatency+0xec>)
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	ca07      	ldmia	r2, {r0, r1, r2}
 800676e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006772:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <RCC_SetFlashLatency+0xf0>)
 8006774:	f107 040c 	add.w	r4, r7, #12
 8006778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800677a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800677e:	2300      	movs	r3, #0
 8006780:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006788:	d11a      	bne.n	80067c0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800678a:	2300      	movs	r3, #0
 800678c:	643b      	str	r3, [r7, #64]	@ 0x40
 800678e:	e013      	b.n	80067b8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	3348      	adds	r3, #72	@ 0x48
 8006796:	443b      	add	r3, r7
 8006798:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d807      	bhi.n	80067b2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	3348      	adds	r3, #72	@ 0x48
 80067a8:	443b      	add	r3, r7
 80067aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067ae:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80067b0:	e020      	b.n	80067f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b4:	3301      	adds	r3, #1
 80067b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d9e8      	bls.n	8006790 <RCC_SetFlashLatency+0x40>
 80067be:	e019      	b.n	80067f4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c4:	e013      	b.n	80067ee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	3348      	adds	r3, #72	@ 0x48
 80067cc:	443b      	add	r3, r7
 80067ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d807      	bhi.n	80067e8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	3348      	adds	r3, #72	@ 0x48
 80067de:	443b      	add	r3, r7
 80067e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067e4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80067e6:	e005      	b.n	80067f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ea:	3301      	adds	r3, #1
 80067ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d9e8      	bls.n	80067c6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80067f4:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <RCC_SetFlashLatency+0xf4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f023 0207 	bic.w	r2, r3, #7
 80067fc:	4911      	ldr	r1, [pc, #68]	@ (8006844 <RCC_SetFlashLatency+0xf4>)
 80067fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006800:	4313      	orrs	r3, r2
 8006802:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006804:	f7fd f8e8 	bl	80039d8 <HAL_GetTick>
 8006808:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800680a:	e008      	b.n	800681e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800680c:	f7fd f8e4 	bl	80039d8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e007      	b.n	800682e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800681e:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <RCC_SetFlashLatency+0xf4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006828:	429a      	cmp	r2, r3
 800682a:	d1ef      	bne.n	800680c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	374c      	adds	r7, #76	@ 0x4c
 8006832:	46bd      	mov	sp, r7
 8006834:	bd90      	pop	{r4, r7, pc}
 8006836:	bf00      	nop
 8006838:	0801123c 	.word	0x0801123c
 800683c:	0801124c 	.word	0x0801124c
 8006840:	08011258 	.word	0x08011258
 8006844:	58004000 	.word	0x58004000

08006848 <LL_RCC_LSE_IsEnabled>:
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800684c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <LL_RCC_LSE_IsEnabled+0x18>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <LL_RCC_LSE_IsEnabled+0x1a>
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <LL_RCC_LSE_IsReady>:
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b02      	cmp	r3, #2
 800687e:	d101      	bne.n	8006884 <LL_RCC_LSE_IsReady+0x18>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <LL_RCC_LSE_IsReady+0x1a>
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <LL_RCC_SetRFWKPClockSource>:
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800689c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80068a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <LL_RCC_SetSMPSClockSource>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	f023 0203 	bic.w	r2, r3, #3
 80068ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <LL_RCC_SetSMPSPrescaler>:
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80068ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80068f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <LL_RCC_SetUSARTClockSource>:
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691c:	f023 0203 	bic.w	r2, r3, #3
 8006920:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <LL_RCC_SetLPUARTClockSource>:
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006948:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800694c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_SetI2CClockSource>:
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800696c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006970:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800697c:	43db      	mvns	r3, r3
 800697e:	401a      	ands	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006988:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <LL_RCC_SetLPTIMClockSource>:
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <LL_RCC_SetSAIClockSource>:
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <LL_RCC_SetRNGClockSource>:
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <LL_RCC_SetCLK48ClockSource>:
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <LL_RCC_SetUSBClockSource>:
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff ffe3 	bl	8006a2a <LL_RCC_SetCLK48ClockSource>
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <LL_RCC_SetADCClockSource>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <LL_RCC_SetRTCClockSource>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <LL_RCC_GetRTCClockSource>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <LL_RCC_ForceBackupDomainReset>:
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_RCC_PLLSAI1_Enable>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b34:	6013      	str	r3, [r2, #0]
}
 8006b36:	bf00      	nop
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <LL_RCC_PLLSAI1_Disable>:
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b52:	6013      	str	r3, [r2, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_PLLSAI1_IsReady>:
{
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b70:	d101      	bne.n	8006b76 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b088      	sub	sp, #32
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006b8e:	2300      	movs	r3, #0
 8006b90:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d034      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ba6:	d021      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006ba8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006bac:	d81b      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bb2:	d01d      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bb8:	d815      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bc2:	d110      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bd4:	e00d      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f947 	bl	8006e6e <RCCEx_PLLSAI1_ConfigNP>
 8006be0:	4603      	mov	r3, r0
 8006be2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006be4:	e005      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	77fb      	strb	r3, [r7, #31]
        break;
 8006bea:	e002      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006bec:	bf00      	nop
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf2:	7ffb      	ldrb	r3, [r7, #31]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d105      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fee8 	bl	80069d2 <LL_RCC_SetSAIClockSource>
 8006c02:	e001      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c04:	7ffb      	ldrb	r3, [r7, #31]
 8006c06:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d046      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006c14:	f7ff ff56 	bl	8006ac4 <LL_RCC_GetRTCClockSource>
 8006c18:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d03c      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c24:	f7fe fc68 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d105      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff ff30 	bl	8006a98 <LL_RCC_SetRTCClockSource>
 8006c38:	e02e      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c42:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006c44:	f7ff ff4b 	bl	8006ade <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006c48:	f7ff ff5a 	bl	8006b00 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006c64:	f7ff fdf0 	bl	8006848 <LL_RCC_LSE_IsEnabled>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d114      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c6e:	f7fc feb3 	bl	80039d8 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006c74:	e00b      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c76:	f7fc feaf 	bl	80039d8 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d902      	bls.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	77fb      	strb	r3, [r7, #31]
              break;
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006c8e:	f7ff fded 	bl	800686c <LL_RCC_LSE_IsReady>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d1ee      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006c98:	7ffb      	ldrb	r3, [r7, #31]
 8006c9a:	77bb      	strb	r3, [r7, #30]
 8006c9c:	e001      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ca0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fe2a 	bl	800690c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fe35 	bl	8006938 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fe5d 	bl	800699e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fe52 	bl	800699e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fe2a 	bl	8006964 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fe1f 	bl	8006964 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d022      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff fe8d 	bl	8006a56 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d44:	d107      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d54:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5e:	d10b      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 f8dd 	bl	8006f24 <RCCEx_PLLSAI1_ConfigNQ>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006d74:	7ffb      	ldrb	r3, [r7, #31]
 8006d76:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d02b      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8c:	d008      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d96:	d003      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d105      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fe2a 	bl	80069fe <LL_RCC_SetRNGClockSource>
 8006daa:	e00a      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	2000      	movs	r0, #0
 8006db8:	f7ff fe21 	bl	80069fe <LL_RCC_SetRNGClockSource>
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fe34 	bl	8006a2a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006dca:	d107      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d022      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fe3d 	bl	8006a6c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dfa:	d107      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e0a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f8dd 	bl	8006fda <RCCEx_PLLSAI1_ConfigNR>
 8006e20:	4603      	mov	r3, r0
 8006e22:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006e24:	7ffb      	ldrb	r3, [r7, #31]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006e2a:	7ffb      	ldrb	r3, [r7, #31]
 8006e2c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff fd26 	bl	8006890 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d009      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fd45 	bl	80068e4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fd2c 	bl	80068bc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006e64:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006e7a:	f7ff fe61 	bl	8006b40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e7e:	f7fc fdab 	bl	80039d8 <HAL_GetTick>
 8006e82:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e84:	e009      	b.n	8006e9a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e86:	f7fc fda7 	bl	80039d8 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d902      	bls.n	8006e9a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	e004      	b.n	8006ea4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e9a:	f7ff fe60 	bl	8006b5e <LL_RCC_PLLSAI1_IsReady>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f0      	bne.n	8006e86 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d137      	bne.n	8006f1a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006ed8:	f7ff fe23 	bl	8006b22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006edc:	f7fc fd7c 	bl	80039d8 <HAL_GetTick>
 8006ee0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ee2:	e009      	b.n	8006ef8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ee4:	f7fc fd78 	bl	80039d8 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d902      	bls.n	8006ef8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ef6:	e004      	b.n	8006f02 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ef8:	f7ff fe31 	bl	8006b5e <LL_RCC_PLLSAI1_IsReady>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d1f0      	bne.n	8006ee4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d108      	bne.n	8006f1a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f16:	4313      	orrs	r3, r2
 8006f18:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006f30:	f7ff fe06 	bl	8006b40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f34:	f7fc fd50 	bl	80039d8 <HAL_GetTick>
 8006f38:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f3a:	e009      	b.n	8006f50 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f3c:	f7fc fd4c 	bl	80039d8 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d902      	bls.n	8006f50 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4e:	e004      	b.n	8006f5a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f50:	f7ff fe05 	bl	8006b5e <LL_RCC_PLLSAI1_IsReady>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d137      	bne.n	8006fd0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f74:	4313      	orrs	r3, r2
 8006f76:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006f8e:	f7ff fdc8 	bl	8006b22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f92:	f7fc fd21 	bl	80039d8 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006f98:	e009      	b.n	8006fae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f9a:	f7fc fd1d 	bl	80039d8 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d902      	bls.n	8006fae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	73fb      	strb	r3, [r7, #15]
        break;
 8006fac:	e004      	b.n	8006fb8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fae:	f7ff fdd6 	bl	8006b5e <LL_RCC_PLLSAI1_IsReady>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d1f0      	bne.n	8006f9a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006fe6:	f7ff fdab 	bl	8006b40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006fea:	f7fc fcf5 	bl	80039d8 <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ff0:	e009      	b.n	8007006 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ff2:	f7fc fcf1 	bl	80039d8 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d902      	bls.n	8007006 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	73fb      	strb	r3, [r7, #15]
      break;
 8007004:	e004      	b.n	8007010 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007006:	f7ff fdaa 	bl	8006b5e <LL_RCC_PLLSAI1_IsReady>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f0      	bne.n	8006ff2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d137      	bne.n	8007086 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800702a:	4313      	orrs	r3, r2
 800702c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007040:	4313      	orrs	r3, r2
 8007042:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007044:	f7ff fd6d 	bl	8006b22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007048:	f7fc fcc6 	bl	80039d8 <HAL_GetTick>
 800704c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800704e:	e009      	b.n	8007064 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007050:	f7fc fcc2 	bl	80039d8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d902      	bls.n	8007064 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
        break;
 8007062:	e004      	b.n	800706e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007064:	f7ff fd7b 	bl	8006b5e <LL_RCC_PLLSAI1_IsReady>
 8007068:	4603      	mov	r3, r0
 800706a:	2b01      	cmp	r3, #1
 800706c:	d1f0      	bne.n	8007050 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d108      	bne.n	8007086 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007082:	4313      	orrs	r3, r2
 8007084:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e09f      	b.n	80071e2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fc f9fe 	bl	80034b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070c4:	4b49      	ldr	r3, [pc, #292]	@ (80071ec <HAL_RTC_Init+0x15c>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d07e      	beq.n	80071ce <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	22ca      	movs	r2, #202	@ 0xca
 80070d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2253      	movs	r2, #83	@ 0x53
 80070de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f8ab 	bl	800723c <RTC_EnterInitMode>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	22ff      	movs	r2, #255	@ 0xff
 80070f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	e067      	b.n	80071d2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007114:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68d2      	ldr	r2, [r2, #12]
 800713c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6919      	ldr	r1, [r3, #16]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	041a      	lsls	r2, r3, #16
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007160:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0203 	bic.w	r2, r2, #3
 8007170:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d113      	bne.n	80071c0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f829 	bl	80071f0 <HAL_RTC_WaitForSynchro>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	22ff      	movs	r2, #255	@ 0xff
 80071aa:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e010      	b.n	80071e2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	22ff      	movs	r2, #255	@ 0xff
 80071c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
 80071cc:	e001      	b.n	80071d2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40002800 	.word	0x40002800

080071f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007206:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007208:	f7fc fbe6 	bl	80039d8 <HAL_GetTick>
 800720c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800720e:	e009      	b.n	8007224 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007210:	f7fc fbe2 	bl	80039d8 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800721e:	d901      	bls.n	8007224 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e007      	b.n	8007234 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0ee      	beq.n	8007210 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d119      	bne.n	8007286 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800725c:	f7fc fbbc 	bl	80039d8 <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007262:	e009      	b.n	8007278 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007264:	f7fc fbb8 	bl	80039d8 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007272:	d901      	bls.n	8007278 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e007      	b.n	8007288 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0ee      	beq.n	8007264 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0a8      	b.n	80073fc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	22ca      	movs	r2, #202	@ 0xca
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2253      	movs	r2, #83	@ 0x53
 80072c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d020      	beq.n	800731a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80072d8:	f7fc fb7e 	bl	80039d8 <HAL_GetTick>
 80072dc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80072de:	e015      	b.n	800730c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072e0:	f7fc fb7a 	bl	80039d8 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072ee:	d90d      	bls.n	800730c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	22ff      	movs	r2, #255	@ 0xff
 80072f6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2203      	movs	r2, #3
 80072fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e077      	b.n	80073fc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e2      	bne.n	80072e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007328:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800733a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800733c:	f7fc fb4c 	bl	80039d8 <HAL_GetTick>
 8007340:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007342:	e015      	b.n	8007370 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007344:	f7fc fb48 	bl	80039d8 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007352:	d90d      	bls.n	8007370 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	22ff      	movs	r2, #255	@ 0xff
 800735a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2203      	movs	r2, #3
 8007360:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e045      	b.n	80073fc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0e2      	beq.n	8007344 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0207 	bic.w	r2, r2, #7
 8007394:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6899      	ldr	r1, [r3, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80073a6:	4b17      	ldr	r3, [pc, #92]	@ (8007404 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ac:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80073b6:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a12      	ldr	r2, [pc, #72]	@ (8007404 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073c0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073d0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073e0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	22ff      	movs	r2, #255	@ 0xff
 80073e8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	58000800 	.word	0x58000800

08007408 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_RTCEx_EnableBypassShadow+0x16>
 800741a:	2302      	movs	r3, #2
 800741c:	e024      	b.n	8007468 <HAL_RTCEx_EnableBypassShadow+0x60>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	22ca      	movs	r2, #202	@ 0xca
 8007434:	625a      	str	r2, [r3, #36]	@ 0x24
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2253      	movs	r2, #83	@ 0x53
 800743c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0220 	orr.w	r2, r2, #32
 800744c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	22ff      	movs	r2, #255	@ 0xff
 8007454:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e049      	b.n	800751a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fc f84c 	bl	8003538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f000 faac 	bl	8007a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d001      	beq.n	800753c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e036      	b.n	80075aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a17      	ldr	r2, [pc, #92]	@ (80075b8 <HAL_TIM_Base_Start_IT+0x94>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0x44>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	d115      	bne.n	8007594 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	4b13      	ldr	r3, [pc, #76]	@ (80075bc <HAL_TIM_Base_Start_IT+0x98>)
 8007570:	4013      	ands	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b06      	cmp	r3, #6
 8007578:	d015      	beq.n	80075a6 <HAL_TIM_Base_Start_IT+0x82>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d011      	beq.n	80075a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0201 	orr.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	e008      	b.n	80075a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e000      	b.n	80075a8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40012c00 	.word	0x40012c00
 80075bc:	00010007 	.word	0x00010007

080075c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6a1a      	ldr	r2, [r3, #32]
 80075de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10f      	bne.n	8007608 <HAL_TIM_Base_Stop_IT+0x48>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d107      	bne.n	8007608 <HAL_TIM_Base_Stop_IT+0x48>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d020      	beq.n	8007682 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01b      	beq.n	8007682 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f06f 0202 	mvn.w	r2, #2
 8007652:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f9b2 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 800766e:	e005      	b.n	800767c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9a4 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9b5 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d020      	beq.n	80076ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01b      	beq.n	80076ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f06f 0204 	mvn.w	r2, #4
 800769e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f98c 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 80076ba:	e005      	b.n	80076c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f97e 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f98f 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d020      	beq.n	800771a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01b      	beq.n	800771a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f06f 0208 	mvn.w	r2, #8
 80076ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2204      	movs	r2, #4
 80076f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f966 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007706:	e005      	b.n	8007714 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f958 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f969 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d020      	beq.n	8007766 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01b      	beq.n	8007766 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f06f 0210 	mvn.w	r2, #16
 8007736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2208      	movs	r2, #8
 800773c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f940 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007752:	e005      	b.n	8007760 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f932 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f943 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f06f 0201 	mvn.w	r2, #1
 8007782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7fb fce5 	bl	8003154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00c      	beq.n	80077b8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d007      	beq.n	80077b8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80077b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 faa2 	bl	8007cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80077d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa9a 	bl	8007d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8fd 	bl	80079fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0220 	mvn.w	r2, #32
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa62 	bl	8007ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_TIM_ConfigClockSource+0x1c>
 8007844:	2302      	movs	r3, #2
 8007846:	e0b6      	b.n	80079b6 <HAL_TIM_ConfigClockSource+0x18a>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800786a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007884:	d03e      	beq.n	8007904 <HAL_TIM_ConfigClockSource+0xd8>
 8007886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800788a:	f200 8087 	bhi.w	800799c <HAL_TIM_ConfigClockSource+0x170>
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007892:	f000 8086 	beq.w	80079a2 <HAL_TIM_ConfigClockSource+0x176>
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789a:	d87f      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 800789c:	2b70      	cmp	r3, #112	@ 0x70
 800789e:	d01a      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0xaa>
 80078a0:	2b70      	cmp	r3, #112	@ 0x70
 80078a2:	d87b      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 80078a4:	2b60      	cmp	r3, #96	@ 0x60
 80078a6:	d050      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x11e>
 80078a8:	2b60      	cmp	r3, #96	@ 0x60
 80078aa:	d877      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 80078ac:	2b50      	cmp	r3, #80	@ 0x50
 80078ae:	d03c      	beq.n	800792a <HAL_TIM_ConfigClockSource+0xfe>
 80078b0:	2b50      	cmp	r3, #80	@ 0x50
 80078b2:	d873      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d058      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x13e>
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d86f      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 80078bc:	2b30      	cmp	r3, #48	@ 0x30
 80078be:	d064      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15e>
 80078c0:	2b30      	cmp	r3, #48	@ 0x30
 80078c2:	d86b      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d060      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15e>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d867      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x170>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d05c      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15e>
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d05a      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15e>
 80078d4:	e062      	b.n	800799c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078e6:	f000 f97f 	bl	8007be8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	609a      	str	r2, [r3, #8]
      break;
 8007902:	e04f      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007914:	f000 f968 	bl	8007be8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007926:	609a      	str	r2, [r3, #8]
      break;
 8007928:	e03c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007936:	461a      	mov	r2, r3
 8007938:	f000 f8da 	bl	8007af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2150      	movs	r1, #80	@ 0x50
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f933 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 8007948:	e02c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007956:	461a      	mov	r2, r3
 8007958:	f000 f8f9 	bl	8007b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2160      	movs	r1, #96	@ 0x60
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f923 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 8007968:	e01c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007976:	461a      	mov	r2, r3
 8007978:	f000 f8ba 	bl	8007af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2140      	movs	r1, #64	@ 0x40
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f913 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 8007988:	e00c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f000 f90a 	bl	8007bae <TIM_ITRx_SetConfig>
      break;
 800799a:	e003      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
      break;
 80079a0:	e000      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80079a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a30      	ldr	r2, [pc, #192]	@ (8007ae4 <TIM_Base_SetConfig+0xd4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_Base_SetConfig+0x20>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a2e:	d108      	bne.n	8007a42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a27      	ldr	r2, [pc, #156]	@ (8007ae4 <TIM_Base_SetConfig+0xd4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00b      	beq.n	8007a62 <TIM_Base_SetConfig+0x52>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a50:	d007      	beq.n	8007a62 <TIM_Base_SetConfig+0x52>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a24      	ldr	r2, [pc, #144]	@ (8007ae8 <TIM_Base_SetConfig+0xd8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <TIM_Base_SetConfig+0x52>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a23      	ldr	r2, [pc, #140]	@ (8007aec <TIM_Base_SetConfig+0xdc>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d108      	bne.n	8007a74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ae4 <TIM_Base_SetConfig+0xd4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <TIM_Base_SetConfig+0xa0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a11      	ldr	r2, [pc, #68]	@ (8007ae8 <TIM_Base_SetConfig+0xd8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_Base_SetConfig+0xa0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a10      	ldr	r2, [pc, #64]	@ (8007aec <TIM_Base_SetConfig+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d103      	bne.n	8007ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d105      	bne.n	8007ad6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f023 0201 	bic.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	611a      	str	r2, [r3, #16]
  }
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40014400 	.word	0x40014400
 8007aec:	40014800 	.word	0x40014800

08007af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	f023 0201 	bic.w	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f023 030a 	bic.w	r3, r3, #10
 8007b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b087      	sub	sp, #28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f023 0210 	bic.w	r2, r3, #16
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	031b      	lsls	r3, r3, #12
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	621a      	str	r2, [r3, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f043 0307 	orr.w	r3, r3, #7
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	021a      	lsls	r2, r3, #8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e04a      	b.n	8007cd6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d108      	bne.n	8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca8:	d10c      	bne.n	8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00

08007ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <LL_RCC_GetUSARTClockSource>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4013      	ands	r3, r2
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <LL_RCC_GetLPUARTClockSource>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4013      	ands	r3, r2
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e042      	b.n	8007dfc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7fb fb1b 	bl	80033c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2224      	movs	r2, #36	@ 0x24
 8007d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0201 	bic.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fea2 	bl	8008af8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc77 	bl	80086a8 <UART_SetConfig>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e01b      	b.n	8007dfc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0201 	orr.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 ff21 	bl	8008c3c <UART_CheckIdleState>
 8007dfa:	4603      	mov	r3, r0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	@ 0x28
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	4613      	mov	r3, r2
 8007e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d17b      	bne.n	8007f16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <HAL_UART_Transmit+0x26>
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e074      	b.n	8007f18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2221      	movs	r2, #33	@ 0x21
 8007e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e3e:	f7fb fdcb 	bl	80039d8 <HAL_GetTick>
 8007e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	88fa      	ldrh	r2, [r7, #6]
 8007e48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	88fa      	ldrh	r2, [r7, #6]
 8007e50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e5c:	d108      	bne.n	8007e70 <HAL_UART_Transmit+0x6c>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d104      	bne.n	8007e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	e003      	b.n	8007e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e78:	e030      	b.n	8007edc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 ff83 	bl	8008d90 <UART_WaitOnFlagUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e03d      	b.n	8007f18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10b      	bne.n	8007eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e007      	b.n	8007eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1c8      	bne.n	8007e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2140      	movs	r1, #64	@ 0x40
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 ff4c 	bl	8008d90 <UART_WaitOnFlagUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e006      	b.n	8007f18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	e000      	b.n	8007f18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f16:	2302      	movs	r3, #2
  }
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3720      	adds	r7, #32
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	@ 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d167      	bne.n	8008008 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <HAL_UART_Transmit_DMA+0x24>
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e060      	b.n	800800a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	88fa      	ldrh	r2, [r7, #6]
 8007f52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	88fa      	ldrh	r2, [r7, #6]
 8007f5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2221      	movs	r2, #33	@ 0x21
 8007f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d028      	beq.n	8007fc8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f7a:	4a26      	ldr	r2, [pc, #152]	@ (8008014 <HAL_UART_Transmit_DMA+0xf4>)
 8007f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f82:	4a25      	ldr	r2, [pc, #148]	@ (8008018 <HAL_UART_Transmit_DMA+0xf8>)
 8007f84:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f8a:	4a24      	ldr	r2, [pc, #144]	@ (800801c <HAL_UART_Transmit_DMA+0xfc>)
 8007f8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f92:	2200      	movs	r2, #0
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3328      	adds	r3, #40	@ 0x28
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	88fb      	ldrh	r3, [r7, #6]
 8007faa:	f7fb ff87 	bl	8003ebc <HAL_DMA_Start_IT>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d009      	beq.n	8007fc8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2210      	movs	r2, #16
 8007fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e020      	b.n	800800a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2240      	movs	r2, #64	@ 0x40
 8007fce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3308      	adds	r3, #8
 8007fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff0:	623a      	str	r2, [r7, #32]
 8007ff2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	6a3a      	ldr	r2, [r7, #32]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e5      	bne.n	8007fd0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	e000      	b.n	800800a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008008:	2302      	movs	r3, #2
  }
}
 800800a:	4618      	mov	r0, r3
 800800c:	3728      	adds	r7, #40	@ 0x28
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	08008fb9 	.word	0x08008fb9
 8008018:	08009053 	.word	0x08009053
 800801c:	0800906f 	.word	0x0800906f

08008020 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b0ba      	sub	sp, #232	@ 0xe8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008046:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800804a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800804e:	4013      	ands	r3, r2
 8008050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d11b      	bne.n	8008094 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	d015      	beq.n	8008094 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 82e3 	beq.w	8008650 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
      }
      return;
 8008092:	e2dd      	b.n	8008650 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8123 	beq.w	80082e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800809e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080a2:	4b8d      	ldr	r3, [pc, #564]	@ (80082d8 <HAL_UART_IRQHandler+0x2b8>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80080ae:	4b8b      	ldr	r3, [pc, #556]	@ (80082dc <HAL_UART_IRQHandler+0x2bc>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 8116 	beq.w	80082e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d011      	beq.n	80080e8 <HAL_UART_IRQHandler+0xc8>
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2201      	movs	r2, #1
 80080d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f043 0201 	orr.w	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d011      	beq.n	8008118 <HAL_UART_IRQHandler+0xf8>
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2202      	movs	r2, #2
 8008106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810e:	f043 0204 	orr.w	r2, r3, #4
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_UART_IRQHandler+0x128>
 8008124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2204      	movs	r2, #4
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813e:	f043 0202 	orr.w	r2, r3, #2
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d017      	beq.n	8008184 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008160:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008164:	4b5c      	ldr	r3, [pc, #368]	@ (80082d8 <HAL_UART_IRQHandler+0x2b8>)
 8008166:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2208      	movs	r2, #8
 8008172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817a:	f043 0208 	orr.w	r2, r3, #8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800818c:	2b00      	cmp	r3, #0
 800818e:	d012      	beq.n	80081b6 <HAL_UART_IRQHandler+0x196>
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00c      	beq.n	80081b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8249 	beq.w	8008654 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d013      	beq.n	80081f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820a:	2b40      	cmp	r3, #64	@ 0x40
 800820c:	d005      	beq.n	800821a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800820e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008212:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008216:	2b00      	cmp	r3, #0
 8008218:	d054      	beq.n	80082c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fe66 	bl	8008eec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d146      	bne.n	80082bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008244:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800824c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800825a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800825e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1d9      	bne.n	800822e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008280:	2b00      	cmp	r3, #0
 8008282:	d017      	beq.n	80082b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828a:	4a15      	ldr	r2, [pc, #84]	@ (80082e0 <HAL_UART_IRQHandler+0x2c0>)
 800828c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008294:	4618      	mov	r0, r3
 8008296:	f7fb feeb 	bl	8004070 <HAL_DMA_Abort_IT>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d019      	beq.n	80082d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082ae:	4610      	mov	r0, r2
 80082b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b2:	e00f      	b.n	80082d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f9e1 	bl	800867c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ba:	e00b      	b.n	80082d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f9dd 	bl	800867c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c2:	e007      	b.n	80082d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f9d9 	bl	800867c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80082d2:	e1bf      	b.n	8008654 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d4:	bf00      	nop
    return;
 80082d6:	e1bd      	b.n	8008654 <HAL_UART_IRQHandler+0x634>
 80082d8:	10000001 	.word	0x10000001
 80082dc:	04000120 	.word	0x04000120
 80082e0:	080090ef 	.word	0x080090ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	f040 8153 	bne.w	8008594 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 814c 	beq.w	8008594 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008300:	f003 0310 	and.w	r3, r3, #16
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 8145 	beq.w	8008594 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2210      	movs	r2, #16
 8008310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831c:	2b40      	cmp	r3, #64	@ 0x40
 800831e:	f040 80bb 	bne.w	8008498 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 818f 	beq.w	8008658 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008340:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008344:	429a      	cmp	r2, r3
 8008346:	f080 8187 	bcs.w	8008658 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008350:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	f040 8087 	bne.w	8008476 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800837c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008392:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008396:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800839e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80083aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1da      	bne.n	8008368 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80083c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3308      	adds	r3, #8
 80083d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80083da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e1      	bne.n	80083b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008412:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008414:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008418:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e3      	bne.n	80083ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2220      	movs	r2, #32
 800842a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008444:	f023 0310 	bic.w	r3, r3, #16
 8008448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008456:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008458:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800845c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e4      	bne.n	8008434 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008470:	4618      	mov	r0, r3
 8008472:	f7fb fd9e 	bl	8003fb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2202      	movs	r2, #2
 800847a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008488:	b29b      	uxth	r3, r3
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	b29b      	uxth	r3, r3
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f8fd 	bl	8008690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008496:	e0df      	b.n	8008658 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80d1 	beq.w	800865c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80084ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80cc 	beq.w	800865c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e4      	bne.n	80084c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	623b      	str	r3, [r7, #32]
   return(result);
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008510:	f023 0301 	bic.w	r3, r3, #1
 8008514:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3308      	adds	r3, #8
 800851e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008522:	633a      	str	r2, [r7, #48]	@ 0x30
 8008524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e1      	bne.n	80084fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60fb      	str	r3, [r7, #12]
   return(result);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800856c:	61fb      	str	r3, [r7, #28]
 800856e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	69b9      	ldr	r1, [r7, #24]
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	617b      	str	r3, [r7, #20]
   return(result);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e4      	bne.n	800854a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f87f 	bl	8008690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008592:	e063      	b.n	800865c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <HAL_UART_IRQHandler+0x59e>
 80085a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fdda 	bl	8009170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085bc:	e051      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d008      	beq.n	80085f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d03a      	beq.n	8008660 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
    }
    return;
 80085f2:	e035      	b.n	8008660 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d009      	beq.n	8008614 <HAL_UART_IRQHandler+0x5f4>
 8008600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fd84 	bl	800911a <UART_EndTransmit_IT>
    return;
 8008612:	e026      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <HAL_UART_IRQHandler+0x614>
 8008620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008624:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fdb3 	bl	8009198 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008632:	e016      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d010      	beq.n	8008662 <HAL_UART_IRQHandler+0x642>
 8008640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008644:	2b00      	cmp	r3, #0
 8008646:	da0c      	bge.n	8008662 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fd9b 	bl	8009184 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800864e:	e008      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
      return;
 8008650:	bf00      	nop
 8008652:	e006      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
    return;
 8008654:	bf00      	nop
 8008656:	e004      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
      return;
 8008658:	bf00      	nop
 800865a:	e002      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
      return;
 800865c:	bf00      	nop
 800865e:	e000      	b.n	8008662 <HAL_UART_IRQHandler+0x642>
    return;
 8008660:	bf00      	nop
  }
}
 8008662:	37e8      	adds	r7, #232	@ 0xe8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ac:	b08c      	sub	sp, #48	@ 0x30
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	431a      	orrs	r2, r3
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4baf      	ldr	r3, [pc, #700]	@ (8008994 <UART_SetConfig+0x2ec>)
 80086d8:	4013      	ands	r3, r2
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4aa4      	ldr	r2, [pc, #656]	@ (8008998 <UART_SetConfig+0x2f0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008710:	4313      	orrs	r3, r2
 8008712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800871e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008728:	430b      	orrs	r3, r1
 800872a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008732:	f023 010f 	bic.w	r1, r3, #15
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a95      	ldr	r2, [pc, #596]	@ (800899c <UART_SetConfig+0x2f4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d125      	bne.n	8008798 <UART_SetConfig+0xf0>
 800874c:	2003      	movs	r0, #3
 800874e:	f7ff fae9 	bl	8007d24 <LL_RCC_GetUSARTClockSource>
 8008752:	4603      	mov	r3, r0
 8008754:	2b03      	cmp	r3, #3
 8008756:	d81b      	bhi.n	8008790 <UART_SetConfig+0xe8>
 8008758:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <UART_SetConfig+0xb8>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008771 	.word	0x08008771
 8008764:	08008781 	.word	0x08008781
 8008768:	08008779 	.word	0x08008779
 800876c:	08008789 	.word	0x08008789
 8008770:	2301      	movs	r3, #1
 8008772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008776:	e042      	b.n	80087fe <UART_SetConfig+0x156>
 8008778:	2302      	movs	r3, #2
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800877e:	e03e      	b.n	80087fe <UART_SetConfig+0x156>
 8008780:	2304      	movs	r3, #4
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008786:	e03a      	b.n	80087fe <UART_SetConfig+0x156>
 8008788:	2308      	movs	r3, #8
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878e:	e036      	b.n	80087fe <UART_SetConfig+0x156>
 8008790:	2310      	movs	r3, #16
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008796:	e032      	b.n	80087fe <UART_SetConfig+0x156>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a7e      	ldr	r2, [pc, #504]	@ (8008998 <UART_SetConfig+0x2f0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d12a      	bne.n	80087f8 <UART_SetConfig+0x150>
 80087a2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80087a6:	f7ff facd 	bl	8007d44 <LL_RCC_GetLPUARTClockSource>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087b0:	d01a      	beq.n	80087e8 <UART_SetConfig+0x140>
 80087b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087b6:	d81b      	bhi.n	80087f0 <UART_SetConfig+0x148>
 80087b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087bc:	d00c      	beq.n	80087d8 <UART_SetConfig+0x130>
 80087be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087c2:	d815      	bhi.n	80087f0 <UART_SetConfig+0x148>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <UART_SetConfig+0x128>
 80087c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087cc:	d008      	beq.n	80087e0 <UART_SetConfig+0x138>
 80087ce:	e00f      	b.n	80087f0 <UART_SetConfig+0x148>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d6:	e012      	b.n	80087fe <UART_SetConfig+0x156>
 80087d8:	2302      	movs	r3, #2
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087de:	e00e      	b.n	80087fe <UART_SetConfig+0x156>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e6:	e00a      	b.n	80087fe <UART_SetConfig+0x156>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ee:	e006      	b.n	80087fe <UART_SetConfig+0x156>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f6:	e002      	b.n	80087fe <UART_SetConfig+0x156>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a65      	ldr	r2, [pc, #404]	@ (8008998 <UART_SetConfig+0x2f0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	f040 8097 	bne.w	8008938 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800880a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800880e:	2b08      	cmp	r3, #8
 8008810:	d823      	bhi.n	800885a <UART_SetConfig+0x1b2>
 8008812:	a201      	add	r2, pc, #4	@ (adr r2, 8008818 <UART_SetConfig+0x170>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	0800883d 	.word	0x0800883d
 800881c:	0800885b 	.word	0x0800885b
 8008820:	08008845 	.word	0x08008845
 8008824:	0800885b 	.word	0x0800885b
 8008828:	0800884b 	.word	0x0800884b
 800882c:	0800885b 	.word	0x0800885b
 8008830:	0800885b 	.word	0x0800885b
 8008834:	0800885b 	.word	0x0800885b
 8008838:	08008853 	.word	0x08008853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800883c:	f7fd ff24 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 8008840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008842:	e010      	b.n	8008866 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008844:	4b56      	ldr	r3, [pc, #344]	@ (80089a0 <UART_SetConfig+0x2f8>)
 8008846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008848:	e00d      	b.n	8008866 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800884a:	f7fd fe9d 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 800884e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008850:	e009      	b.n	8008866 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008858:	e005      	b.n	8008866 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 812b 	beq.w	8008ac4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	4a4c      	ldr	r2, [pc, #304]	@ (80089a4 <UART_SetConfig+0x2fc>)
 8008874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008878:	461a      	mov	r2, r3
 800887a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008880:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4413      	add	r3, r2
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	429a      	cmp	r2, r3
 8008890:	d305      	bcc.n	800889e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	429a      	cmp	r2, r3
 800889c:	d903      	bls.n	80088a6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088a4:	e10e      	b.n	8008ac4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	2200      	movs	r2, #0
 80088aa:	60bb      	str	r3, [r7, #8]
 80088ac:	60fa      	str	r2, [r7, #12]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b2:	4a3c      	ldr	r2, [pc, #240]	@ (80089a4 <UART_SetConfig+0x2fc>)
 80088b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2200      	movs	r2, #0
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088c8:	f7f8 f996 	bl	8000bf8 <__aeabi_uldivmod>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4610      	mov	r0, r2
 80088d2:	4619      	mov	r1, r3
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	020b      	lsls	r3, r1, #8
 80088de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088e2:	0202      	lsls	r2, r0, #8
 80088e4:	6979      	ldr	r1, [r7, #20]
 80088e6:	6849      	ldr	r1, [r1, #4]
 80088e8:	0849      	lsrs	r1, r1, #1
 80088ea:	2000      	movs	r0, #0
 80088ec:	460c      	mov	r4, r1
 80088ee:	4605      	mov	r5, r0
 80088f0:	eb12 0804 	adds.w	r8, r2, r4
 80088f4:	eb43 0905 	adc.w	r9, r3, r5
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	469a      	mov	sl, r3
 8008900:	4693      	mov	fp, r2
 8008902:	4652      	mov	r2, sl
 8008904:	465b      	mov	r3, fp
 8008906:	4640      	mov	r0, r8
 8008908:	4649      	mov	r1, r9
 800890a:	f7f8 f975 	bl	8000bf8 <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4613      	mov	r3, r2
 8008914:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800891c:	d308      	bcc.n	8008930 <UART_SetConfig+0x288>
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008924:	d204      	bcs.n	8008930 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a3a      	ldr	r2, [r7, #32]
 800892c:	60da      	str	r2, [r3, #12]
 800892e:	e0c9      	b.n	8008ac4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008936:	e0c5      	b.n	8008ac4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008940:	d16d      	bne.n	8008a1e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008942:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008946:	3b01      	subs	r3, #1
 8008948:	2b07      	cmp	r3, #7
 800894a:	d82d      	bhi.n	80089a8 <UART_SetConfig+0x300>
 800894c:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <UART_SetConfig+0x2ac>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008975 	.word	0x08008975
 8008958:	0800897d 	.word	0x0800897d
 800895c:	080089a9 	.word	0x080089a9
 8008960:	08008983 	.word	0x08008983
 8008964:	080089a9 	.word	0x080089a9
 8008968:	080089a9 	.word	0x080089a9
 800896c:	080089a9 	.word	0x080089a9
 8008970:	0800898b 	.word	0x0800898b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008974:	f7fd fe9e 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8008978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800897a:	e01b      	b.n	80089b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800897c:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <UART_SetConfig+0x2f8>)
 800897e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008980:	e018      	b.n	80089b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008982:	f7fd fe01 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8008986:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008988:	e014      	b.n	80089b4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800898e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008990:	e010      	b.n	80089b4 <UART_SetConfig+0x30c>
 8008992:	bf00      	nop
 8008994:	cfff69f3 	.word	0xcfff69f3
 8008998:	40008000 	.word	0x40008000
 800899c:	40013800 	.word	0x40013800
 80089a0:	00f42400 	.word	0x00f42400
 80089a4:	08011fa0 	.word	0x08011fa0
      default:
        pclk = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8084 	beq.w	8008ac4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c0:	4a4b      	ldr	r2, [pc, #300]	@ (8008af0 <UART_SetConfig+0x448>)
 80089c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089c6:	461a      	mov	r2, r3
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ce:	005a      	lsls	r2, r3, #1
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	085b      	lsrs	r3, r3, #1
 80089d6:	441a      	add	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	2b0f      	cmp	r3, #15
 80089e6:	d916      	bls.n	8008a16 <UART_SetConfig+0x36e>
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ee:	d212      	bcs.n	8008a16 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f023 030f 	bic.w	r3, r3, #15
 80089f8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	8bfb      	ldrh	r3, [r7, #30]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	8bfa      	ldrh	r2, [r7, #30]
 8008a12:	60da      	str	r2, [r3, #12]
 8008a14:	e056      	b.n	8008ac4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a1c:	e052      	b.n	8008ac4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b07      	cmp	r3, #7
 8008a26:	d822      	bhi.n	8008a6e <UART_SetConfig+0x3c6>
 8008a28:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x388>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a51 	.word	0x08008a51
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a6f 	.word	0x08008a6f
 8008a3c:	08008a5f 	.word	0x08008a5f
 8008a40:	08008a6f 	.word	0x08008a6f
 8008a44:	08008a6f 	.word	0x08008a6f
 8008a48:	08008a6f 	.word	0x08008a6f
 8008a4c:	08008a67 	.word	0x08008a67
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a50:	f7fd fe30 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8008a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a56:	e010      	b.n	8008a7a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a58:	4b26      	ldr	r3, [pc, #152]	@ (8008af4 <UART_SetConfig+0x44c>)
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a5c:	e00d      	b.n	8008a7a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5e:	f7fd fd93 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8008a62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a78:	bf00      	nop
    }

    if (pclk != 0U)
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d021      	beq.n	8008ac4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	4a1a      	ldr	r2, [pc, #104]	@ (8008af0 <UART_SetConfig+0x448>)
 8008a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	441a      	add	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d909      	bls.n	8008abe <UART_SetConfig+0x416>
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab0:	d205      	bcs.n	8008abe <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60da      	str	r2, [r3, #12]
 8008abc:	e002      	b.n	8008ac4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ae0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3730      	adds	r7, #48	@ 0x30
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aee:	bf00      	nop
 8008af0:	08011fa0 	.word	0x08011fa0
 8008af4:	00f42400 	.word	0x00f42400

08008af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00a      	beq.n	8008b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00a      	beq.n	8008bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01a      	beq.n	8008c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bf6:	d10a      	bne.n	8008c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b098      	sub	sp, #96	@ 0x60
 8008c40:	af02      	add	r7, sp, #8
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c4c:	f7fa fec4 	bl	80039d8 <HAL_GetTick>
 8008c50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d12f      	bne.n	8008cc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f88e 	bl	8008d90 <UART_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d022      	beq.n	8008cc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e6      	bne.n	8008c7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e063      	b.n	8008d88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d149      	bne.n	8008d62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f857 	bl	8008d90 <UART_WaitOnFlagUntilTimeout>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d03c      	beq.n	8008d62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e6      	bne.n	8008ce8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d3a:	61fa      	str	r2, [r7, #28]
 8008d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	69b9      	ldr	r1, [r7, #24]
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	617b      	str	r3, [r7, #20]
   return(result);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e5      	bne.n	8008d1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e012      	b.n	8008d88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3758      	adds	r7, #88	@ 0x58
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da0:	e04f      	b.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d04b      	beq.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008daa:	f7fa fe15 	bl	80039d8 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d302      	bcc.n	8008dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e04e      	b.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d037      	beq.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b80      	cmp	r3, #128	@ 0x80
 8008dd6:	d034      	beq.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b40      	cmp	r3, #64	@ 0x40
 8008ddc:	d031      	beq.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d110      	bne.n	8008e0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2208      	movs	r2, #8
 8008df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 f879 	bl	8008eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e029      	b.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e1c:	d111      	bne.n	8008e42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 f85f 	bl	8008eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e00f      	b.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69da      	ldr	r2, [r3, #28]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	bf0c      	ite	eq
 8008e52:	2301      	moveq	r3, #1
 8008e54:	2300      	movne	r3, #0
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	461a      	mov	r2, r3
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d0a0      	beq.n	8008da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b08f      	sub	sp, #60	@ 0x3c
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e92:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008eba:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec4:	61ba      	str	r2, [r7, #24]
 8008ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e5      	bne.n	8008ea4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008ee0:	bf00      	nop
 8008ee2:	373c      	adds	r7, #60	@ 0x3c
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b095      	sub	sp, #84	@ 0x54
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f12:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e6      	bne.n	8008ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f3c:	f023 0301 	bic.w	r3, r3, #1
 8008f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e3      	bne.n	8008f26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d118      	bne.n	8008f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f023 0310 	bic.w	r3, r3, #16
 8008f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f84:	61bb      	str	r3, [r7, #24]
 8008f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6979      	ldr	r1, [r7, #20]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	613b      	str	r3, [r7, #16]
   return(result);
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fac:	bf00      	nop
 8008fae:	3754      	adds	r7, #84	@ 0x54
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b090      	sub	sp, #64	@ 0x40
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d137      	bne.n	8009044 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	623b      	str	r3, [r7, #32]
   return(result);
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ffc:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800900a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e5      	bne.n	8008fdc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	60fb      	str	r3, [r7, #12]
   return(result);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009024:	637b      	str	r3, [r7, #52]	@ 0x34
 8009026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	69b9      	ldr	r1, [r7, #24]
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	617b      	str	r3, [r7, #20]
   return(result);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e6      	bne.n	8009010 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009042:	e002      	b.n	800904a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009044:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009046:	f7f9 fb63 	bl	8002710 <HAL_UART_TxCpltCallback>
}
 800904a:	bf00      	nop
 800904c:	3740      	adds	r7, #64	@ 0x40
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff fb01 	bl	8008668 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009066:	bf00      	nop
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b086      	sub	sp, #24
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009082:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800908a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009096:	2b80      	cmp	r3, #128	@ 0x80
 8009098:	d109      	bne.n	80090ae <UART_DMAError+0x40>
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2b21      	cmp	r3, #33	@ 0x21
 800909e:	d106      	bne.n	80090ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80090a8:	6978      	ldr	r0, [r7, #20]
 80090aa:	f7ff fede 	bl	8008e6a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b8:	2b40      	cmp	r3, #64	@ 0x40
 80090ba:	d109      	bne.n	80090d0 <UART_DMAError+0x62>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b22      	cmp	r3, #34	@ 0x22
 80090c0:	d106      	bne.n	80090d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff ff0e 	bl	8008eec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d6:	f043 0210 	orr.w	r2, r3, #16
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e0:	6978      	ldr	r0, [r7, #20]
 80090e2:	f7ff facb 	bl	800867c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e6:	bf00      	nop
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff fab5 	bl	800867c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b088      	sub	sp, #32
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009136:	61fb      	str	r3, [r7, #28]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6979      	ldr	r1, [r7, #20]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	613b      	str	r3, [r7, #16]
   return(result);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e6      	bne.n	8009122 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2220      	movs	r2, #32
 8009158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7f9 fad4 	bl	8002710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009168:	bf00      	nop
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80091be:	2302      	movs	r3, #2
 80091c0:	e027      	b.n	8009212 <HAL_UARTEx_DisableFifoMode+0x66>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2224      	movs	r2, #36	@ 0x24
 80091ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800922e:	2b01      	cmp	r3, #1
 8009230:	d101      	bne.n	8009236 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009232:	2302      	movs	r3, #2
 8009234:	e02d      	b.n	8009292 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2224      	movs	r2, #36	@ 0x24
 8009242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0201 	bic.w	r2, r2, #1
 800925c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f850 	bl	8009318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e02d      	b.n	800930e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2224      	movs	r2, #36	@ 0x24
 80092be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0201 	bic.w	r2, r2, #1
 80092d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f812 	bl	8009318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009324:	2b00      	cmp	r3, #0
 8009326:	d108      	bne.n	800933a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009338:	e031      	b.n	800939e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800933a:	2308      	movs	r3, #8
 800933c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800933e:	2308      	movs	r3, #8
 8009340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	0e5b      	lsrs	r3, r3, #25
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	0f5b      	lsrs	r3, r3, #29
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	7b3a      	ldrb	r2, [r7, #12]
 8009366:	4911      	ldr	r1, [pc, #68]	@ (80093ac <UARTEx_SetNbDataToProcess+0x94>)
 8009368:	5c8a      	ldrb	r2, [r1, r2]
 800936a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800936e:	7b3a      	ldrb	r2, [r7, #12]
 8009370:	490f      	ldr	r1, [pc, #60]	@ (80093b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009374:	fb93 f3f2 	sdiv	r3, r3, r2
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	7b7a      	ldrb	r2, [r7, #13]
 8009384:	4909      	ldr	r1, [pc, #36]	@ (80093ac <UARTEx_SetNbDataToProcess+0x94>)
 8009386:	5c8a      	ldrb	r2, [r1, r2]
 8009388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800938c:	7b7a      	ldrb	r2, [r7, #13]
 800938e:	4908      	ldr	r1, [pc, #32]	@ (80093b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009392:	fb93 f3f2 	sdiv	r3, r3, r2
 8009396:	b29a      	uxth	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	08011fb8 	.word	0x08011fb8
 80093b0:	08011fc0 	.word	0x08011fc0

080093b4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093be:	f107 0308 	add.w	r3, r7, #8
 80093c2:	2218      	movs	r2, #24
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f936 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093cc:	233f      	movs	r3, #63	@ 0x3f
 80093ce:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80093d0:	2381      	movs	r3, #129	@ 0x81
 80093d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093d4:	1dfb      	adds	r3, r7, #7
 80093d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093d8:	2301      	movs	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093dc:	f107 0308 	add.w	r3, r7, #8
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 fe3e 	bl	800b064 <hci_send_req>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	da01      	bge.n	80093f2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80093ee:	23ff      	movs	r3, #255	@ 0xff
 80093f0:	e000      	b.n	80093f4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80093f2:	79fb      	ldrb	r3, [r7, #7]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3720      	adds	r7, #32
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80093fc:	b5b0      	push	{r4, r5, r7, lr}
 80093fe:	b0ce      	sub	sp, #312	@ 0x138
 8009400:	af00      	add	r7, sp, #0
 8009402:	4605      	mov	r5, r0
 8009404:	460c      	mov	r4, r1
 8009406:	4610      	mov	r0, r2
 8009408:	4619      	mov	r1, r3
 800940a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800940e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009412:	462a      	mov	r2, r5
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800941a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800941e:	4622      	mov	r2, r4
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009426:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800942a:	4602      	mov	r2, r0
 800942c:	801a      	strh	r2, [r3, #0]
 800942e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009432:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009436:	460a      	mov	r2, r1
 8009438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800943a:	f107 0310 	add.w	r3, r7, #16
 800943e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009442:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8009446:	3308      	adds	r3, #8
 8009448:	f107 0210 	add.w	r2, r7, #16
 800944c:	4413      	add	r3, r2
 800944e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009452:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009456:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800945a:	4413      	add	r3, r2
 800945c:	3309      	adds	r3, #9
 800945e:	f107 0210 	add.w	r2, r7, #16
 8009462:	4413      	add	r3, r2
 8009464:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009468:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800946c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800947a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800947e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009482:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009486:	7812      	ldrb	r2, [r2, #0]
 8009488:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800948a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800948e:	3301      	adds	r3, #1
 8009490:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009494:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009498:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800949c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80094a0:	8812      	ldrh	r2, [r2, #0]
 80094a2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80094a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094aa:	3302      	adds	r3, #2
 80094ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80094b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094b4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094b8:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80094bc:	8812      	ldrh	r2, [r2, #0]
 80094be:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80094c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094c6:	3302      	adds	r3, #2
 80094c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80094cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094d0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80094d4:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80094d8:	7812      	ldrb	r2, [r2, #0]
 80094da:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80094dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094e0:	3301      	adds	r3, #1
 80094e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80094e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ea:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80094ee:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80094f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094f4:	3301      	adds	r3, #1
 80094f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80094fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094fe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009502:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009504:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009508:	3301      	adds	r3, #1
 800950a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800950e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009512:	3308      	adds	r3, #8
 8009514:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009518:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800951c:	4618      	mov	r0, r3
 800951e:	f001 f87b 	bl	800a618 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009522:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8009526:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800952a:	4413      	add	r3, r2
 800952c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009530:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009534:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009538:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800953a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800953e:	3301      	adds	r3, #1
 8009540:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009544:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009548:	3301      	adds	r3, #1
 800954a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800954e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8009552:	4618      	mov	r0, r3
 8009554:	f001 f860 	bl	800a618 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009558:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800955c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009560:	4413      	add	r3, r2
 8009562:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8009566:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800956a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800956e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009570:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009574:	3302      	adds	r3, #2
 8009576:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800957a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800957e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8009582:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009588:	3302      	adds	r3, #2
 800958a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800958e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009592:	2218      	movs	r2, #24
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f001 f84e 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 800959c:	233f      	movs	r3, #63	@ 0x3f
 800959e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80095a2:	2383      	movs	r3, #131	@ 0x83
 80095a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80095a8:	f107 0310 	add.w	r3, r7, #16
 80095ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80095b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80095b8:	f107 030f 	add.w	r3, r7, #15
 80095bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fd49 	bl	800b064 <hci_send_req>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	da01      	bge.n	80095dc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80095d8:	23ff      	movs	r3, #255	@ 0xff
 80095da:	e004      	b.n	80095e6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80095dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80095e4:	781b      	ldrb	r3, [r3, #0]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bdb0      	pop	{r4, r5, r7, pc}

080095f0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b0cc      	sub	sp, #304	@ 0x130
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4602      	mov	r2, r0
 80095f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095fc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009600:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009602:	f107 0310 	add.w	r3, r7, #16
 8009606:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800960a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800960e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009612:	2200      	movs	r2, #0
 8009614:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800961c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009620:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009624:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800962c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009630:	3301      	adds	r3, #1
 8009632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800963a:	2218      	movs	r2, #24
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fffa 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009644:	233f      	movs	r3, #63	@ 0x3f
 8009646:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800964a:	2385      	movs	r3, #133	@ 0x85
 800964c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009650:	f107 0310 	add.w	r3, r7, #16
 8009654:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009658:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800965c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009660:	f107 030f 	add.w	r3, r7, #15
 8009664:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009668:	2301      	movs	r3, #1
 800966a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800966e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f001 fcf5 	bl	800b064 <hci_send_req>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	da01      	bge.n	8009684 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009680:	23ff      	movs	r3, #255	@ 0xff
 8009682:	e004      	b.n	800968e <aci_gap_set_io_capability+0x9e>
  return status;
 8009684:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009688:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800968c:	781b      	ldrb	r3, [r3, #0]
}
 800968e:	4618      	mov	r0, r3
 8009690:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009698:	b5b0      	push	{r4, r5, r7, lr}
 800969a:	b0cc      	sub	sp, #304	@ 0x130
 800969c:	af00      	add	r7, sp, #0
 800969e:	4605      	mov	r5, r0
 80096a0:	460c      	mov	r4, r1
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096aa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096ae:	462a      	mov	r2, r5
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096ba:	4622      	mov	r2, r4
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096c2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80096c6:	4602      	mov	r2, r0
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80096d2:	460a      	mov	r2, r1
 80096d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80096f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096f8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009704:	3301      	adds	r3, #1
 8009706:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800970a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800970e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009712:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009716:	7812      	ldrb	r2, [r2, #0]
 8009718:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800971a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800971e:	3301      	adds	r3, #1
 8009720:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009724:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009728:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800972c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009730:	7812      	ldrb	r2, [r2, #0]
 8009732:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009734:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009738:	3301      	adds	r3, #1
 800973a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800973e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009742:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009746:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800974a:	7812      	ldrb	r2, [r2, #0]
 800974c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800974e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009752:	3301      	adds	r3, #1
 8009754:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009758:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800975c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009760:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009766:	3301      	adds	r3, #1
 8009768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800976c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009770:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009774:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800977a:	3301      	adds	r3, #1
 800977c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009780:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009784:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009788:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800978a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800978e:	3301      	adds	r3, #1
 8009790:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009798:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800979c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80097a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097a4:	3304      	adds	r3, #4
 80097a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80097aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097ae:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80097b2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80097b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097b8:	3301      	adds	r3, #1
 80097ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097c2:	2218      	movs	r2, #24
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ff36 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097cc:	233f      	movs	r3, #63	@ 0x3f
 80097ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80097d2:	2386      	movs	r3, #134	@ 0x86
 80097d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80097d8:	f107 0310 	add.w	r3, r7, #16
 80097dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80097e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80097e8:	f107 030f 	add.w	r3, r7, #15
 80097ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f001 fc31 	bl	800b064 <hci_send_req>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	da01      	bge.n	800980c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009808:	23ff      	movs	r3, #255	@ 0xff
 800980a:	e004      	b.n	8009816 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800980c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009810:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009814:	781b      	ldrb	r3, [r3, #0]
}
 8009816:	4618      	mov	r0, r3
 8009818:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800981c:	46bd      	mov	sp, r7
 800981e:	bdb0      	pop	{r4, r5, r7, pc}

08009820 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b0cd      	sub	sp, #308	@ 0x134
 8009824:	af00      	add	r7, sp, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	4611      	mov	r1, r2
 800982c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009830:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800983a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800983e:	4622      	mov	r2, r4
 8009840:	701a      	strb	r2, [r3, #0]
 8009842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009846:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800984a:	4602      	mov	r2, r0
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009852:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009856:	460a      	mov	r2, r1
 8009858:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	2207      	movs	r2, #7
 8009868:	2100      	movs	r1, #0
 800986a:	4618      	mov	r0, r3
 800986c:	f000 fee4 	bl	800a638 <Osal_MemSet>
  int index_input = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800987a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800987e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800988a:	3301      	adds	r3, #1
 800988c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009894:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009898:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800989c:	7812      	ldrb	r2, [r2, #0]
 800989e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80098a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098a4:	3301      	adds	r3, #1
 80098a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80098aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098b2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80098b6:	7812      	ldrb	r2, [r2, #0]
 80098b8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80098ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098be:	3301      	adds	r3, #1
 80098c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098c8:	2218      	movs	r2, #24
 80098ca:	2100      	movs	r1, #0
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 feb3 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098d2:	233f      	movs	r3, #63	@ 0x3f
 80098d4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80098d8:	238a      	movs	r3, #138	@ 0x8a
 80098da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80098de:	f107 0310 	add.w	r3, r7, #16
 80098e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80098e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80098f6:	2307      	movs	r3, #7
 80098f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009900:	2100      	movs	r1, #0
 8009902:	4618      	mov	r0, r3
 8009904:	f001 fbae 	bl	800b064 <hci_send_req>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	da01      	bge.n	8009912 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800990e:	23ff      	movs	r3, #255	@ 0xff
 8009910:	e02e      	b.n	8009970 <aci_gap_init+0x150>
  if ( resp.Status )
 8009912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009916:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <aci_gap_init+0x10c>
    return resp.Status;
 8009920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009924:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	e021      	b.n	8009970 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800992c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009930:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009934:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009938:	b29a      	uxth	r2, r3
 800993a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800993e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800994a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800994e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009952:	b29a      	uxth	r2, r3
 8009954:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009958:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800995a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800995e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009962:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009966:	b29a      	uxth	r2, r3
 8009968:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800996c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009976:	46bd      	mov	sp, r7
 8009978:	bd90      	pop	{r4, r7, pc}

0800997a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b0cc      	sub	sp, #304	@ 0x130
 800997e:	af00      	add	r7, sp, #0
 8009980:	4602      	mov	r2, r0
 8009982:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009986:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800998a:	6019      	str	r1, [r3, #0]
 800998c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009990:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009994:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009996:	f107 0310 	add.w	r3, r7, #16
 800999a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800999e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099a6:	2200      	movs	r2, #0
 80099a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80099b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80099bc:	7812      	ldrb	r2, [r2, #0]
 80099be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099c4:	3301      	adds	r3, #1
 80099c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80099ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099ce:	1c58      	adds	r0, r3, #1
 80099d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80099e2:	6819      	ldr	r1, [r3, #0]
 80099e4:	f000 fe18 	bl	800a618 <Osal_MemCpy>
  index_input += AdvDataLen;
 80099e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099ec:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80099f6:	4413      	add	r3, r2
 80099f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a00:	2218      	movs	r2, #24
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fe17 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a0a:	233f      	movs	r3, #63	@ 0x3f
 8009a0c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009a10:	238e      	movs	r3, #142	@ 0x8e
 8009a12:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009a16:	f107 0310 	add.w	r3, r7, #16
 8009a1a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009a26:	f107 030f 	add.w	r3, r7, #15
 8009a2a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 fb12 	bl	800b064 <hci_send_req>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	da01      	bge.n	8009a4a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009a46:	23ff      	movs	r3, #255	@ 0xff
 8009a48:	e004      	b.n	8009a54 <aci_gap_update_adv_data+0xda>
  return status;
 8009a4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a4e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a52:	781b      	ldrb	r3, [r3, #0]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b088      	sub	sp, #32
 8009a62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	2218      	movs	r2, #24
 8009a6e:	2100      	movs	r1, #0
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fde1 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a76:	233f      	movs	r3, #63	@ 0x3f
 8009a78:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009a7a:	2392      	movs	r3, #146	@ 0x92
 8009a7c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009a7e:	1dfb      	adds	r3, r7, #7
 8009a80:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009a82:	2301      	movs	r3, #1
 8009a84:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 fae9 	bl	800b064 <hci_send_req>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	da01      	bge.n	8009a9c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009a98:	23ff      	movs	r3, #255	@ 0xff
 8009a9a:	e000      	b.n	8009a9e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3720      	adds	r7, #32
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b088      	sub	sp, #32
 8009aaa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	2218      	movs	r2, #24
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fdbd 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009abe:	233f      	movs	r3, #63	@ 0x3f
 8009ac0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009ac2:	f240 1301 	movw	r3, #257	@ 0x101
 8009ac6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009ac8:	1dfb      	adds	r3, r7, #7
 8009aca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009acc:	2301      	movs	r3, #1
 8009ace:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ad0:	f107 0308 	add.w	r3, r7, #8
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fac4 	bl	800b064 <hci_send_req>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da01      	bge.n	8009ae6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009ae2:	23ff      	movs	r3, #255	@ 0xff
 8009ae4:	e000      	b.n	8009ae8 <aci_gatt_init+0x42>
  return status;
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3720      	adds	r7, #32
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b0cf      	sub	sp, #316	@ 0x13c
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4604      	mov	r4, r0
 8009af8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009afc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009b00:	6001      	str	r1, [r0, #0]
 8009b02:	4610      	mov	r0, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b0a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009b0e:	4622      	mov	r2, r4
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b16:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b22:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009b26:	460a      	mov	r2, r1
 8009b28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009b2a:	f107 0310 	add.w	r3, r7, #16
 8009b2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009b32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b36:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d00a      	beq.n	8009b56 <aci_gatt_add_service+0x66>
 8009b40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b44:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d101      	bne.n	8009b52 <aci_gatt_add_service+0x62>
 8009b4e:	2311      	movs	r3, #17
 8009b50:	e002      	b.n	8009b58 <aci_gatt_add_service+0x68>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <aci_gatt_add_service+0x68>
 8009b56:	2303      	movs	r3, #3
 8009b58:	f107 0210 	add.w	r2, r7, #16
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009b62:	f107 030c 	add.w	r3, r7, #12
 8009b66:	2203      	movs	r2, #3
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fd64 	bl	800a638 <Osal_MemSet>
  int index_input = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009b76:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b7a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009b7e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009b82:	7812      	ldrb	r2, [r2, #0]
 8009b84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009b90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009b94:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d002      	beq.n	8009ba4 <aci_gatt_add_service+0xb4>
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d004      	beq.n	8009bac <aci_gatt_add_service+0xbc>
 8009ba2:	e007      	b.n	8009bb4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009baa:	e005      	b.n	8009bb8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009bac:	2310      	movs	r3, #16
 8009bae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009bb2:	e001      	b.n	8009bb8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009bb4:	2397      	movs	r3, #151	@ 0x97
 8009bb6:	e06c      	b.n	8009c92 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009bb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009bbc:	1c58      	adds	r0, r3, #1
 8009bbe:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009bc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bc6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	f000 fd24 	bl	800a618 <Osal_MemCpy>
    index_input += size;
 8009bd0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009bd4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009bd8:	4413      	add	r3, r2
 8009bda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009be2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009be6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009bea:	7812      	ldrb	r2, [r2, #0]
 8009bec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009bfc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009c00:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c16:	2218      	movs	r2, #24
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 fd0c 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c20:	233f      	movs	r3, #63	@ 0x3f
 8009c22:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009c26:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009c2a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c2e:	f107 0310 	add.w	r3, r7, #16
 8009c32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009c3e:	f107 030c 	add.w	r3, r7, #12
 8009c42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009c46:	2303      	movs	r3, #3
 8009c48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 fa06 	bl	800b064 <hci_send_req>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da01      	bge.n	8009c62 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009c5e:	23ff      	movs	r3, #255	@ 0xff
 8009c60:	e017      	b.n	8009c92 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009c62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009c70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	e00a      	b.n	8009c92 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009c7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009c80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009c84:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009c8e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd90      	pop	{r4, r7, pc}

08009c9c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b0d1      	sub	sp, #324	@ 0x144
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009caa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009cae:	600a      	str	r2, [r1, #0]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009cb6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009cba:	4622      	mov	r2, r4
 8009cbc:	801a      	strh	r2, [r3, #0]
 8009cbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009cc2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	701a      	strb	r2, [r3, #0]
 8009cca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009cce:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009cd6:	f107 0318 	add.w	r3, r7, #24
 8009cda:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009cde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009ce2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d00a      	beq.n	8009d02 <aci_gatt_add_char+0x66>
 8009cec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009cf0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d101      	bne.n	8009cfe <aci_gatt_add_char+0x62>
 8009cfa:	2313      	movs	r3, #19
 8009cfc:	e002      	b.n	8009d04 <aci_gatt_add_char+0x68>
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e000      	b.n	8009d04 <aci_gatt_add_char+0x68>
 8009d02:	2305      	movs	r3, #5
 8009d04:	f107 0218 	add.w	r2, r7, #24
 8009d08:	4413      	add	r3, r2
 8009d0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009d0e:	f107 0314 	add.w	r3, r7, #20
 8009d12:	2203      	movs	r2, #3
 8009d14:	2100      	movs	r1, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fc8e 	bl	800a638 <Osal_MemSet>
  int index_input = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009d22:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009d26:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009d2a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009d2e:	8812      	ldrh	r2, [r2, #0]
 8009d30:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009d36:	3302      	adds	r3, #2
 8009d38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009d3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009d40:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009d44:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009d48:	7812      	ldrb	r2, [r2, #0]
 8009d4a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009d50:	3301      	adds	r3, #1
 8009d52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009d56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d5a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d002      	beq.n	8009d6a <aci_gatt_add_char+0xce>
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d004      	beq.n	8009d72 <aci_gatt_add_char+0xd6>
 8009d68:	e007      	b.n	8009d7a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009d70:	e005      	b.n	8009d7e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009d72:	2310      	movs	r3, #16
 8009d74:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009d78:	e001      	b.n	8009d7e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009d7a:	2397      	movs	r3, #151	@ 0x97
 8009d7c:	e091      	b.n	8009ea2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009d7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009d82:	1cd8      	adds	r0, r3, #3
 8009d84:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009d88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009d8c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	f000 fc41 	bl	800a618 <Osal_MemCpy>
    index_input += size;
 8009d96:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009d9a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009d9e:	4413      	add	r3, r2
 8009da0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009da8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009dac:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009db0:	8812      	ldrh	r2, [r2, #0]
 8009db2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009db4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009db8:	3302      	adds	r3, #2
 8009dba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009dbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009dc2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009dc6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009dc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009dd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009dd6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009dda:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009ddc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009de0:	3301      	adds	r3, #1
 8009de2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009dea:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009dee:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009df0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009df4:	3301      	adds	r3, #1
 8009df6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009dfe:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8009e02:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009e04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e08:	3301      	adds	r3, #1
 8009e0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009e0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009e12:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8009e16:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009e18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e26:	2218      	movs	r2, #24
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 fc04 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e30:	233f      	movs	r3, #63	@ 0x3f
 8009e32:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8009e36:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009e3a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8009e3e:	f107 0318 	add.w	r3, r7, #24
 8009e42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8009e46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8009e4e:	f107 0314 	add.w	r3, r7, #20
 8009e52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8009e56:	2303      	movs	r3, #3
 8009e58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e60:	2100      	movs	r1, #0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 f8fe 	bl	800b064 <hci_send_req>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da01      	bge.n	8009e72 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009e6e:	23ff      	movs	r3, #255	@ 0xff
 8009e70:	e017      	b.n	8009ea2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009e72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009e76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009e80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009e84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	e00a      	b.n	8009ea2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009e8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009e90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009e94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009e9e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd90      	pop	{r4, r7, pc}

08009eac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009eac:	b5b0      	push	{r4, r5, r7, lr}
 8009eae:	b0cc      	sub	sp, #304	@ 0x130
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ebe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009ec2:	462a      	mov	r2, r5
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009eca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ece:	4622      	mov	r2, r4
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ed6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8009eda:	4602      	mov	r2, r0
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ee2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009ee6:	460a      	mov	r2, r1
 8009ee8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009eea:	f107 0310 	add.w	r3, r7, #16
 8009eee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ef6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8009f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009f10:	8812      	ldrh	r2, [r2, #0]
 8009f12:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f18:	3302      	adds	r3, #2
 8009f1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f26:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009f2a:	8812      	ldrh	r2, [r2, #0]
 8009f2c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f32:	3302      	adds	r3, #2
 8009f34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8009f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f40:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009f44:	7812      	ldrb	r2, [r2, #0]
 8009f46:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f5a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8009f5e:	7812      	ldrb	r2, [r2, #0]
 8009f60:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f66:	3301      	adds	r3, #1
 8009f68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f70:	1d98      	adds	r0, r3, #6
 8009f72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f76:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009f82:	f000 fb49 	bl	800a618 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f8a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009f94:	4413      	add	r3, r2
 8009f96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f9e:	2218      	movs	r2, #24
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fb48 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fa8:	233f      	movs	r3, #63	@ 0x3f
 8009faa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009fae:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009fb2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009fb6:	f107 0310 	add.w	r3, r7, #16
 8009fba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009fc6:	f107 030f 	add.w	r3, r7, #15
 8009fca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 f842 	bl	800b064 <hci_send_req>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da01      	bge.n	8009fea <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009fe6:	23ff      	movs	r3, #255	@ 0xff
 8009fe8:	e004      	b.n	8009ff4 <aci_gatt_update_char_value+0x148>
  return status;
 8009fea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ff2:	781b      	ldrb	r3, [r3, #0]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bdb0      	pop	{r4, r5, r7, pc}

08009ffe <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b0cc      	sub	sp, #304	@ 0x130
 800a002:	af00      	add	r7, sp, #0
 800a004:	4602      	mov	r2, r0
 800a006:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a00a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a00e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a010:	f107 0310 	add.w	r3, r7, #16
 800a014:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a01c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a02a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a02e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a032:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a036:	8812      	ldrh	r2, [r2, #0]
 800a038:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a03a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a03e:	3302      	adds	r3, #2
 800a040:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a048:	2218      	movs	r2, #24
 800a04a:	2100      	movs	r1, #0
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 faf3 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a052:	233f      	movs	r3, #63	@ 0x3f
 800a054:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a058:	f240 1325 	movw	r3, #293	@ 0x125
 800a05c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a060:	f107 0310 	add.w	r3, r7, #16
 800a064:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a068:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a06c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a070:	f107 030f 	add.w	r3, r7, #15
 800a074:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a078:	2301      	movs	r3, #1
 800a07a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a07e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f000 ffed 	bl	800b064 <hci_send_req>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da01      	bge.n	800a094 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a090:	23ff      	movs	r3, #255	@ 0xff
 800a092:	e004      	b.n	800a09e <aci_gatt_confirm_indication+0xa0>
  return status;
 800a094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a098:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a09c:	781b      	ldrb	r3, [r3, #0]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800a0a8:	b5b0      	push	{r4, r5, r7, lr}
 800a0aa:	b0cc      	sub	sp, #304	@ 0x130
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a0be:	462a      	mov	r2, r5
 800a0c0:	801a      	strh	r2, [r3, #0]
 800a0c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0d2:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0de:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a0e2:	460a      	mov	r2, r1
 800a0e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800a0e6:	f107 0310 	add.w	r3, r7, #16
 800a0ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a0ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a100:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a104:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a108:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a10c:	8812      	ldrh	r2, [r2, #0]
 800a10e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a110:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a114:	3302      	adds	r3, #2
 800a116:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Attr_Handle = Attr_Handle;
 800a11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a11e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a122:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a126:	8812      	ldrh	r2, [r2, #0]
 800a128:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a12a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a12e:	3302      	adds	r3, #2
 800a130:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Write_status = Write_status;
 800a134:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a138:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a13c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a144:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a148:	3301      	adds	r3, #1
 800a14a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Error_Code = Error_Code;
 800a14e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a152:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a156:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a15e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a162:	3301      	adds	r3, #1
 800a164:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800a168:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a16c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800a170:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a172:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a176:	3301      	adds	r3, #1
 800a178:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800a17c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a180:	3307      	adds	r3, #7
 800a182:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800a186:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fa44 	bl	800a618 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800a190:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 800a194:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a198:	4413      	add	r3, r2
 800a19a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a19e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1a2:	2218      	movs	r2, #24
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fa46 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1ac:	233f      	movs	r3, #63	@ 0x3f
 800a1ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x126;
 800a1b2:	f44f 7393 	mov.w	r3, #294	@ 0x126
 800a1b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a1ba:	f107 0310 	add.w	r3, r7, #16
 800a1be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a1c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a1ca:	f107 030f 	add.w	r3, r7, #15
 800a1ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 ff40 	bl	800b064 <hci_send_req>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da01      	bge.n	800a1ee <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800a1ea:	23ff      	movs	r3, #255	@ 0xff
 800a1ec:	e004      	b.n	800a1f8 <aci_gatt_write_resp+0x150>
  return status;
 800a1ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a1f6:	781b      	ldrb	r3, [r3, #0]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bdb0      	pop	{r4, r5, r7, pc}

0800a202 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b0cc      	sub	sp, #304	@ 0x130
 800a206:	af00      	add	r7, sp, #0
 800a208:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a20c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a216:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a21a:	4602      	mov	r2, r0
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a222:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a226:	460a      	mov	r2, r1
 800a228:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a232:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a236:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a244:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a248:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a24c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a250:	7812      	ldrb	r2, [r2, #0]
 800a252:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a254:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a258:	3301      	adds	r3, #1
 800a25a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a25e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a262:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a266:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a26a:	7812      	ldrb	r2, [r2, #0]
 800a26c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a272:	3301      	adds	r3, #1
 800a274:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a278:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a27c:	1c98      	adds	r0, r3, #2
 800a27e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a282:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a28c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a290:	6819      	ldr	r1, [r3, #0]
 800a292:	f000 f9c1 	bl	800a618 <Osal_MemCpy>
  index_input += Length;
 800a296:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a29a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2ae:	2218      	movs	r2, #24
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f9c0 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2b8:	233f      	movs	r3, #63	@ 0x3f
 800a2ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a2be:	230c      	movs	r3, #12
 800a2c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a2c4:	f107 0310 	add.w	r3, r7, #16
 800a2c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a2cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a2d4:	f107 030f 	add.w	r3, r7, #15
 800a2d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 febb 	bl	800b064 <hci_send_req>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	da01      	bge.n	800a2f8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a2f4:	23ff      	movs	r3, #255	@ 0xff
 800a2f6:	e004      	b.n	800a302 <aci_hal_write_config_data+0x100>
  return status;
 800a2f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a300:	781b      	ldrb	r3, [r3, #0]
}
 800a302:	4618      	mov	r0, r3
 800a304:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b0cc      	sub	sp, #304	@ 0x130
 800a310:	af00      	add	r7, sp, #0
 800a312:	4602      	mov	r2, r0
 800a314:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a318:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a322:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a326:	460a      	mov	r2, r1
 800a328:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a332:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a336:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a33a:	2200      	movs	r2, #0
 800a33c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a344:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a348:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a34c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a350:	7812      	ldrb	r2, [r2, #0]
 800a352:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a358:	3301      	adds	r3, #1
 800a35a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a35e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a362:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a366:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a36a:	7812      	ldrb	r2, [r2, #0]
 800a36c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a36e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a372:	3301      	adds	r3, #1
 800a374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a378:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a37c:	2218      	movs	r2, #24
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f000 f959 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a386:	233f      	movs	r3, #63	@ 0x3f
 800a388:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a38c:	230f      	movs	r3, #15
 800a38e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a392:	f107 0310 	add.w	r3, r7, #16
 800a396:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a39a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a39e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a3a2:	f107 030f 	add.w	r3, r7, #15
 800a3a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fe54 	bl	800b064 <hci_send_req>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	da01      	bge.n	800a3c6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a3c2:	23ff      	movs	r3, #255	@ 0xff
 800a3c4:	e004      	b.n	800a3d0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a3c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a3ce:	781b      	ldrb	r3, [r3, #0]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b088      	sub	sp, #32
 800a3de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3e4:	f107 0308 	add.w	r3, r7, #8
 800a3e8:	2218      	movs	r2, #24
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 f923 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x03;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a3fa:	1dfb      	adds	r3, r7, #7
 800a3fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a3fe:	2301      	movs	r3, #1
 800a400:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a402:	f107 0308 	add.w	r3, r7, #8
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fe2b 	bl	800b064 <hci_send_req>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	da01      	bge.n	800a418 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a414:	23ff      	movs	r3, #255	@ 0xff
 800a416:	e000      	b.n	800a41a <hci_reset+0x40>
  return status;
 800a418:	79fb      	ldrb	r3, [r7, #7]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b0ce      	sub	sp, #312	@ 0x138
 800a426:	af00      	add	r7, sp, #0
 800a428:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a42c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a430:	6019      	str	r1, [r3, #0]
 800a432:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a436:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a440:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a444:	4602      	mov	r2, r0
 800a446:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a448:	f107 0318 	add.w	r3, r7, #24
 800a44c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a450:	f107 0310 	add.w	r3, r7, #16
 800a454:	2205      	movs	r2, #5
 800a456:	2100      	movs	r1, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 f8ed 	bl	800a638 <Osal_MemSet>
  int index_input = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a464:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a468:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a46c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a470:	8812      	ldrh	r2, [r2, #0]
 800a472:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a474:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a478:	3302      	adds	r3, #2
 800a47a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a47e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a482:	2218      	movs	r2, #24
 800a484:	2100      	movs	r1, #0
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f8d6 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x08;
 800a48c:	2308      	movs	r3, #8
 800a48e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800a492:	2330      	movs	r3, #48	@ 0x30
 800a494:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a498:	f107 0318 	add.w	r3, r7, #24
 800a49c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a4a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a4a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a4a8:	f107 0310 	add.w	r3, r7, #16
 800a4ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a4b0:	2305      	movs	r3, #5
 800a4b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fdd1 	bl	800b064 <hci_send_req>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da01      	bge.n	800a4cc <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a4c8:	23ff      	movs	r3, #255	@ 0xff
 800a4ca:	e023      	b.n	800a514 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a4cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d005      	beq.n	800a4e6 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a4da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	e016      	b.n	800a514 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a4e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a4ee:	78da      	ldrb	r2, [r3, #3]
 800a4f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a4fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a500:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a504:	791a      	ldrb	r2, [r3, #4]
 800a506:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a50a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a51e:	b590      	push	{r4, r7, lr}
 800a520:	b0cd      	sub	sp, #308	@ 0x134
 800a522:	af00      	add	r7, sp, #0
 800a524:	4604      	mov	r4, r0
 800a526:	4608      	mov	r0, r1
 800a528:	4611      	mov	r1, r2
 800a52a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a52e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a532:	4622      	mov	r2, r4
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a53a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a53e:	4602      	mov	r2, r0
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a546:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a54a:	460a      	mov	r2, r1
 800a54c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a54e:	f107 0310 	add.w	r3, r7, #16
 800a552:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a55a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a568:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a56c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a570:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a574:	7812      	ldrb	r2, [r2, #0]
 800a576:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a578:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a57c:	3301      	adds	r3, #1
 800a57e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a582:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a586:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a58a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a58e:	7812      	ldrb	r2, [r2, #0]
 800a590:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a592:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a596:	3301      	adds	r3, #1
 800a598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a59c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a5a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a5a4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a5a8:	7812      	ldrb	r2, [r2, #0]
 800a5aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a5ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ba:	2218      	movs	r2, #24
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 f83a 	bl	800a638 <Osal_MemSet>
  rq.ogf = 0x08;
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a5ca:	2331      	movs	r3, #49	@ 0x31
 800a5cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a5d0:	f107 0310 	add.w	r3, r7, #16
 800a5d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a5d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a5e0:	f107 030f 	add.w	r3, r7, #15
 800a5e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fd35 	bl	800b064 <hci_send_req>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	da01      	bge.n	800a604 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a600:	23ff      	movs	r3, #255	@ 0xff
 800a602:	e004      	b.n	800a60e <hci_le_set_default_phy+0xf0>
  return status;
 800a604:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a608:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a60c:	781b      	ldrb	r3, [r3, #0]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a614:	46bd      	mov	sp, r7
 800a616:	bd90      	pop	{r4, r7, pc}

0800a618 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f004 fc3a 	bl	800eea2 <memcpy>
 800a62e:	4603      	mov	r3, r0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f004 fb95 	bl	800ed78 <memset>
 800a64e:	4603      	mov	r3, r0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800a65e:	2204      	movs	r2, #4
 800a660:	2100      	movs	r1, #0
 800a662:	4816      	ldr	r0, [pc, #88]	@ (800a6bc <DIS_Init+0x64>)
 800a664:	f004 fb88 	bl	800ed78 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 800a668:	f641 030a 	movw	r3, #6154	@ 0x180a
 800a66c:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800a66e:	1d39      	adds	r1, r7, #4
 800a670:	4b12      	ldr	r3, [pc, #72]	@ (800a6bc <DIS_Init+0x64>)
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2303      	movs	r3, #3
 800a676:	2201      	movs	r2, #1
 800a678:	2001      	movs	r0, #1
 800a67a:	f7ff fa39 	bl	8009af0 <aci_gatt_add_service>
 800a67e:	4603      	mov	r3, r0
 800a680:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 800a682:	f642 2329 	movw	r3, #10793	@ 0x2a29
 800a686:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 800a688:	4b0c      	ldr	r3, [pc, #48]	@ (800a6bc <DIS_Init+0x64>)
 800a68a:	8818      	ldrh	r0, [r3, #0]
 800a68c:	1d3a      	adds	r2, r7, #4
 800a68e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c0 <DIS_Init+0x68>)
 800a690:	9305      	str	r3, [sp, #20]
 800a692:	2301      	movs	r3, #1
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	230a      	movs	r3, #10
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	2300      	movs	r3, #0
 800a69c:	9302      	str	r3, [sp, #8]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	2320      	movs	r3, #32
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	f7ff faf7 	bl	8009c9c <aci_gatt_add_char>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 800a6b2:	bf00      	nop
}
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200001f8 	.word	0x200001f8
 800a6c0:	200001fa 	.word	0x200001fa

0800a6c4 <DIS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval None
 */
tBleStatus DIS_UpdateChar(uint16_t UUID, DIS_Data_t *pPData)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	6039      	str	r1, [r7, #0]
 800a6ce:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value;

  switch(UUID)
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	f642 2229 	movw	r2, #10793	@ 0x2a29
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d10f      	bne.n	800a6fa <DIS_UpdateChar+0x36>
  {
#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
    case MANUFACTURER_NAME_UUID:
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800a6da:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <DIS_UpdateChar+0x48>)
 800a6dc:	8818      	ldrh	r0, [r3, #0]
 800a6de:	4b0b      	ldr	r3, [pc, #44]	@ (800a70c <DIS_UpdateChar+0x48>)
 800a6e0:	8859      	ldrh	r1, [r3, #2]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	791a      	ldrb	r2, [r3, #4]
                                                DIS_Context.ManufacturerNameStringCharHdle,
                                                0,
                                                pPData->Length,
                                                (uint8_t *)pPData->pPayload);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
      return_value = aci_gatt_update_char_value(DIS_Context.DeviceInformationSvcHdle,
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f7ff fbdc 	bl	8009eac <aci_gatt_update_char_value>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f8:	e002      	b.n	800a700 <DIS_UpdateChar+0x3c>
                                                (uint8_t *)pPData->pPayload);
      break;
#endif

    default:
      return_value = BLE_STATUS_ERROR;
 800a6fa:	2397      	movs	r3, #151	@ 0x97
 800a6fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6fe:	bf00      	nop
  }

  return return_value;
 800a700:	7bfb      	ldrb	r3, [r7, #15]
}/* end DIS_UpdateChar() */
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200001f8 	.word	0x200001f8

0800a710 <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08e      	sub	sp, #56	@ 0x38
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3301      	adds	r3, #1
 800a722:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch(event_pckt->evt)
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2bff      	cmp	r3, #255	@ 0xff
 800a72a:	d174      	bne.n	800a816 <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	3302      	adds	r3, #2
 800a730:	627b      	str	r3, [r7, #36]	@ 0x24
      switch(blecore_evt->ecode)
 800a732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	b29b      	uxth	r3, r3
 800a738:	f640 4201 	movw	r2, #3073	@ 0xc01
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d03f      	beq.n	800a7c0 <HeartRate_Event_Handler+0xb0>
 800a740:	f640 4213 	movw	r2, #3091	@ 0xc13
 800a744:	4293      	cmp	r3, r2
 800a746:	d160      	bne.n	800a80a <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	3302      	adds	r3, #2
 800a74c:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	885b      	ldrh	r3, [r3, #2]
 800a752:	b29b      	uxth	r3, r3
 800a754:	461a      	mov	r2, r3
 800a756:	4b33      	ldr	r3, [pc, #204]	@ (800a824 <HeartRate_Event_Handler+0x114>)
 800a758:	88db      	ldrh	r3, [r3, #6]
 800a75a:	3301      	adds	r3, #1
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d156      	bne.n	800a80e <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800a760:	2301      	movs	r3, #1
 800a762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	795b      	ldrb	r3, [r3, #5]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d117      	bne.n	800a79e <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b298      	uxth	r0, r3
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	885b      	ldrh	r3, [r3, #2]
 800a778:	b299      	uxth	r1, r3
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 800a77e:	6a3a      	ldr	r2, [r7, #32]
 800a780:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800a782:	9201      	str	r2, [sp, #4]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	2300      	movs	r3, #0
 800a788:	2200      	movs	r2, #0
 800a78a:	f7ff fc8d 	bl	800a0a8 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 800a78e:	2300      	movs	r3, #0
 800a790:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800a792:	f107 030c 	add.w	r3, r7, #12
 800a796:	4618      	mov	r0, r3
 800a798:	f002 fe64 	bl	800d464 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 800a79c:	e037      	b.n	800a80e <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	b298      	uxth	r0, r3
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	885b      	ldrh	r3, [r3, #2]
 800a7a8:	b299      	uxth	r1, r3
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 800a7ae:	6a3a      	ldr	r2, [r7, #32]
 800a7b0:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800a7b2:	9201      	str	r2, [sp, #4]
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	2380      	movs	r3, #128	@ 0x80
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f7ff fc75 	bl	800a0a8 <aci_gatt_write_resp>
        break;
 800a7be:	e026      	b.n	800a80e <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	3302      	adds	r3, #2
 800a7c4:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	885b      	ldrh	r3, [r3, #2]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <HeartRate_Event_Handler+0x114>)
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d11c      	bne.n	800a812 <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	7a1b      	ldrb	r3, [r3, #8]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800a7ee:	f107 030c 	add.w	r3, r7, #12
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f002 fe36 	bl	800d464 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 800a7f8:	e00b      	b.n	800a812 <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800a7fe:	f107 030c 	add.w	r3, r7, #12
 800a802:	4618      	mov	r0, r3
 800a804:	f002 fe2e 	bl	800d464 <HRS_Notification>
        break;
 800a808:	e003      	b.n	800a812 <HeartRate_Event_Handler+0x102>

        default:
          break;
 800a80a:	bf00      	nop
 800a80c:	e004      	b.n	800a818 <HeartRate_Event_Handler+0x108>
        break;
 800a80e:	bf00      	nop
 800a810:	e002      	b.n	800a818 <HeartRate_Event_Handler+0x108>
        break;
 800a812:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a814:	e000      	b.n	800a818 <HeartRate_Event_Handler+0x108>

    default:
      break;
 800a816:	bf00      	nop
  }

  return(return_value);
 800a818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end HeartRate_Event_Handler */
 800a81c:	4618      	mov	r0, r3
 800a81e:	3730      	adds	r7, #48	@ 0x30
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	200001fc 	.word	0x200001fc

0800a828 <Update_Char_BodySensorLocation>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_BodySensorLocation(HRS_BodySensorLocation_t *pBodySensorLocationValue)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	6078      	str	r0, [r7, #4]
  tBleStatus return_value = BLE_STATUS_SUCCESS;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 800a834:	4b08      	ldr	r3, [pc, #32]	@ (800a858 <Update_Char_BodySensorLocation+0x30>)
 800a836:	8818      	ldrh	r0, [r3, #0]
 800a838:	4b07      	ldr	r3, [pc, #28]	@ (800a858 <Update_Char_BodySensorLocation+0x30>)
 800a83a:	8899      	ldrh	r1, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2301      	movs	r3, #1
 800a842:	2200      	movs	r2, #0
 800a844:	f7ff fb32 	bl	8009eac <aci_gatt_update_char_value>
 800a848:	4603      	mov	r3, r0
 800a84a:	73fb      	strb	r3, [r7, #15]
                                            HRS_Context.BodySensorLocationCharHdle,
                                            0, /* charValOffset */
                                            1, /* charValueLen */
                                            (uint8_t *) pBodySensorLocationValue);
  return return_value;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_BodySensorLocation() */
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	200001fc 	.word	0x200001fc

0800a85c <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HRS_MeasVal_t *pMeasurement )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	@ 0x28
 800a860:	af02      	add	r7, sp, #8
 800a862:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 800a864:	2300      	movs	r3, #0
 800a866:	773b      	strb	r3, [r7, #28]
  uint8_t hrm_char_length;

  /**
   * Flags update
   */
  ahrm_value[0] = (uint8_t)pMeasurement->Flags;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	7bdb      	ldrb	r3, [r3, #15]
 800a86c:	733b      	strb	r3, [r7, #12]
  hrm_char_length = 1;
 800a86e:	2301      	movs	r3, #1
 800a870:	77fb      	strb	r3, [r7, #31]

  /**
   *  Heart Rate Measurement Value
   */
  if ( (pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16 )
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	7bdb      	ldrb	r3, [r3, #15]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d060      	beq.n	800a940 <Update_Char_Measurement+0xe4>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue & 0xFF);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	881a      	ldrh	r2, [r3, #0]
 800a882:	7ffb      	ldrb	r3, [r7, #31]
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	3320      	adds	r3, #32
 800a888:	443b      	add	r3, r7
 800a88a:	f803 2c14 	strb.w	r2, [r3, #-20]
    hrm_char_length++;
 800a88e:	7ffb      	ldrb	r3, [r7, #31]
 800a890:	3301      	adds	r3, #1
 800a892:	77fb      	strb	r3, [r7, #31]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue >> 8);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	0a1b      	lsrs	r3, r3, #8
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	7ffb      	ldrb	r3, [r7, #31]
 800a89e:	b2d2      	uxtb	r2, r2
 800a8a0:	3320      	adds	r3, #32
 800a8a2:	443b      	add	r3, r7
 800a8a4:	f803 2c14 	strb.w	r2, [r3, #-20]
    hrm_char_length++;
 800a8a8:	7ffb      	ldrb	r3, [r7, #31]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	77fb      	strb	r3, [r7, #31]

    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue1 & 0xFF);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	885a      	ldrh	r2, [r3, #2]
 800a8b2:	7ffb      	ldrb	r3, [r7, #31]
 800a8b4:	b2d2      	uxtb	r2, r2
 800a8b6:	3320      	adds	r3, #32
 800a8b8:	443b      	add	r3, r7
 800a8ba:	f803 2c14 	strb.w	r2, [r3, #-20]
	hrm_char_length++;
 800a8be:	7ffb      	ldrb	r3, [r7, #31]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	77fb      	strb	r3, [r7, #31]
	ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue1 >> 8);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	885b      	ldrh	r3, [r3, #2]
 800a8c8:	0a1b      	lsrs	r3, r3, #8
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	7ffb      	ldrb	r3, [r7, #31]
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	3320      	adds	r3, #32
 800a8d2:	443b      	add	r3, r7
 800a8d4:	f803 2c14 	strb.w	r2, [r3, #-20]

	hrm_char_length++;
 800a8d8:	7ffb      	ldrb	r3, [r7, #31]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	77fb      	strb	r3, [r7, #31]
	ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue2 & 0xFF);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	889a      	ldrh	r2, [r3, #4]
 800a8e2:	7ffb      	ldrb	r3, [r7, #31]
 800a8e4:	b2d2      	uxtb	r2, r2
 800a8e6:	3320      	adds	r3, #32
 800a8e8:	443b      	add	r3, r7
 800a8ea:	f803 2c14 	strb.w	r2, [r3, #-20]
	hrm_char_length++;
 800a8ee:	7ffb      	ldrb	r3, [r7, #31]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	77fb      	strb	r3, [r7, #31]
	ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue2 >> 8);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	889b      	ldrh	r3, [r3, #4]
 800a8f8:	0a1b      	lsrs	r3, r3, #8
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	7ffb      	ldrb	r3, [r7, #31]
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	3320      	adds	r3, #32
 800a902:	443b      	add	r3, r7
 800a904:	f803 2c14 	strb.w	r2, [r3, #-20]

	hrm_char_length++;
 800a908:	7ffb      	ldrb	r3, [r7, #31]
 800a90a:	3301      	adds	r3, #1
 800a90c:	77fb      	strb	r3, [r7, #31]
	ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue3 & 0xFF);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	88da      	ldrh	r2, [r3, #6]
 800a912:	7ffb      	ldrb	r3, [r7, #31]
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	3320      	adds	r3, #32
 800a918:	443b      	add	r3, r7
 800a91a:	f803 2c14 	strb.w	r2, [r3, #-20]
	hrm_char_length++;
 800a91e:	7ffb      	ldrb	r3, [r7, #31]
 800a920:	3301      	adds	r3, #1
 800a922:	77fb      	strb	r3, [r7, #31]
	ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue3 >> 8);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	88db      	ldrh	r3, [r3, #6]
 800a928:	0a1b      	lsrs	r3, r3, #8
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	7ffb      	ldrb	r3, [r7, #31]
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	3320      	adds	r3, #32
 800a932:	443b      	add	r3, r7
 800a934:	f803 2c14 	strb.w	r2, [r3, #-20]
	hrm_char_length++;
 800a938:	7ffb      	ldrb	r3, [r7, #31]
 800a93a:	3301      	adds	r3, #1
 800a93c:	77fb      	strb	r3, [r7, #31]
 800a93e:	e00a      	b.n	800a956 <Update_Char_Measurement+0xfa>

  }
  else
  {
    ahrm_value[hrm_char_length] = (uint8_t)pMeasurement->MeasurementValue;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	881a      	ldrh	r2, [r3, #0]
 800a944:	7ffb      	ldrb	r3, [r7, #31]
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	3320      	adds	r3, #32
 800a94a:	443b      	add	r3, r7
 800a94c:	f803 2c14 	strb.w	r2, [r3, #-20]
    hrm_char_length++;
 800a950:	7ffb      	ldrb	r3, [r7, #31]
 800a952:	3301      	adds	r3, #1
 800a954:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  /**
   *  Energy Expended
   */
  if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	7bdb      	ldrb	r3, [r3, #15]
 800a95a:	f003 0308 	and.w	r3, r3, #8
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d017      	beq.n	800a992 <Update_Char_Measurement+0x136>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended & 0xFF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	891a      	ldrh	r2, [r3, #8]
 800a966:	7ffb      	ldrb	r3, [r7, #31]
 800a968:	b2d2      	uxtb	r2, r2
 800a96a:	3320      	adds	r3, #32
 800a96c:	443b      	add	r3, r7
 800a96e:	f803 2c14 	strb.w	r2, [r3, #-20]
    hrm_char_length++;
 800a972:	7ffb      	ldrb	r3, [r7, #31]
 800a974:	3301      	adds	r3, #1
 800a976:	77fb      	strb	r3, [r7, #31]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended >> 8);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	891b      	ldrh	r3, [r3, #8]
 800a97c:	0a1b      	lsrs	r3, r3, #8
 800a97e:	b29a      	uxth	r2, r3
 800a980:	7ffb      	ldrb	r3, [r7, #31]
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	3320      	adds	r3, #32
 800a986:	443b      	add	r3, r7
 800a988:	f803 2c14 	strb.w	r2, [r3, #-20]
    hrm_char_length++;
 800a98c:	7ffb      	ldrb	r3, [r7, #31]
 800a98e:	3301      	adds	r3, #1
 800a990:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  /**
   *  RR Interval Values
   */
  if ((pMeasurement->Flags) &  HRS_HRM_RR_INTERVAL_PRESENT)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	7bdb      	ldrb	r3, [r3, #15]
 800a996:	f003 0310 	and.w	r3, r3, #16
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d04a      	beq.n	800aa34 <Update_Char_Measurement+0x1d8>
  {
    uint8_t index;
    uint8_t rr_interval_number;

    if((pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	7bdb      	ldrb	r3, [r3, #15]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <Update_Char_Measurement+0x16a>
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	7bdb      	ldrb	r3, [r3, #15]
 800a9ae:	f003 0308 	and.w	r3, r3, #8
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <Update_Char_Measurement+0x162>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-2);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7b9b      	ldrb	r3, [r3, #14]
 800a9ba:	777b      	strb	r3, [r7, #29]
 800a9bc:	e010      	b.n	800a9e0 <Update_Char_Measurement+0x184>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7b9b      	ldrb	r3, [r3, #14]
 800a9c2:	777b      	strb	r3, [r7, #29]
 800a9c4:	e00c      	b.n	800a9e0 <Update_Char_Measurement+0x184>
#endif
    }
    else
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7bdb      	ldrb	r3, [r3, #15]
 800a9ca:	f003 0308 	and.w	r3, r3, #8
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <Update_Char_Measurement+0x17e>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7b9b      	ldrb	r3, [r3, #14]
 800a9d6:	777b      	strb	r3, [r7, #29]
 800a9d8:	e002      	b.n	800a9e0 <Update_Char_Measurement+0x184>
        }
      }
      else
      {
        rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7b9b      	ldrb	r3, [r3, #14]
 800a9de:	777b      	strb	r3, [r7, #29]
#else /**< (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0) */
      rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
#endif
    }

    for ( index = 0 ; index < rr_interval_number ; index++ )
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	77bb      	strb	r3, [r7, #30]
 800a9e4:	e022      	b.n	800aa2c <Update_Char_Measurement+0x1d0>
    {
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] & 0xFF);
 800a9e6:	7fbb      	ldrb	r3, [r7, #30]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4413      	add	r3, r2
 800a9f0:	885a      	ldrh	r2, [r3, #2]
 800a9f2:	7ffb      	ldrb	r3, [r7, #31]
 800a9f4:	b2d2      	uxtb	r2, r2
 800a9f6:	3320      	adds	r3, #32
 800a9f8:	443b      	add	r3, r7
 800a9fa:	f803 2c14 	strb.w	r2, [r3, #-20]
      hrm_char_length++;
 800a9fe:	7ffb      	ldrb	r3, [r7, #31]
 800aa00:	3301      	adds	r3, #1
 800aa02:	77fb      	strb	r3, [r7, #31]
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] >> 8);
 800aa04:	7fbb      	ldrb	r3, [r7, #30]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	885b      	ldrh	r3, [r3, #2]
 800aa10:	0a1b      	lsrs	r3, r3, #8
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	7ffb      	ldrb	r3, [r7, #31]
 800aa16:	b2d2      	uxtb	r2, r2
 800aa18:	3320      	adds	r3, #32
 800aa1a:	443b      	add	r3, r7
 800aa1c:	f803 2c14 	strb.w	r2, [r3, #-20]
      hrm_char_length++;
 800aa20:	7ffb      	ldrb	r3, [r7, #31]
 800aa22:	3301      	adds	r3, #1
 800aa24:	77fb      	strb	r3, [r7, #31]
    for ( index = 0 ; index < rr_interval_number ; index++ )
 800aa26:	7fbb      	ldrb	r3, [r7, #30]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	77bb      	strb	r3, [r7, #30]
 800aa2c:	7fba      	ldrb	r2, [r7, #30]
 800aa2e:	7f7b      	ldrb	r3, [r7, #29]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d3d8      	bcc.n	800a9e6 <Update_Char_Measurement+0x18a>
    }
  }

#endif  /**< (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0) */

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 800aa34:	4b09      	ldr	r3, [pc, #36]	@ (800aa5c <Update_Char_Measurement+0x200>)
 800aa36:	8818      	ldrh	r0, [r3, #0]
 800aa38:	4b08      	ldr	r3, [pc, #32]	@ (800aa5c <Update_Char_Measurement+0x200>)
 800aa3a:	8859      	ldrh	r1, [r3, #2]
 800aa3c:	7ffa      	ldrb	r2, [r7, #31]
 800aa3e:	f107 030c 	add.w	r3, r7, #12
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4613      	mov	r3, r2
 800aa46:	2200      	movs	r2, #0
 800aa48:	f7ff fa30 	bl	8009eac <aci_gatt_update_char_value>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	773b      	strb	r3, [r7, #28]
                                            HRS_Context.HeartRatemeasurementCharHdle,
                                            0, /* charValOffset */
                                            hrm_char_length, /* charValueLen */
                                            (uint8_t *) &ahrm_value[0]);

  return return_value;
 800aa50:	7f3b      	ldrb	r3, [r7, #28]
}/* end Update_Char_Measurement() */
 800aa52:	4618      	mov	r0, r3
 800aa54:	3720      	adds	r7, #32
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	200001fc 	.word	0x200001fc

0800aa60 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 800aa66:	2300      	movs	r3, #0
 800aa68:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 800aa6a:	482e      	ldr	r0, [pc, #184]	@ (800ab24 <HRS_Init+0xc4>)
 800aa6c:	f000 f930 	bl	800acd0 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 800aa70:	f641 030d 	movw	r3, #6157	@ 0x180d
 800aa74:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800aa76:	1d39      	adds	r1, r7, #4
 800aa78:	4b2b      	ldr	r3, [pc, #172]	@ (800ab28 <HRS_Init+0xc8>)
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2308      	movs	r3, #8
 800aa7e:	2201      	movs	r2, #1
 800aa80:	2001      	movs	r0, #1
 800aa82:	f7ff f835 	bl	8009af0 <aci_gatt_add_service>
 800aa86:	4603      	mov	r3, r0
 800aa88:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 800aa8a:	f642 2337 	movw	r3, #10807	@ 0x2a37
 800aa8e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800aa90:	4b25      	ldr	r3, [pc, #148]	@ (800ab28 <HRS_Init+0xc8>)
 800aa92:	8818      	ldrh	r0, [r3, #0]
 800aa94:	1d3a      	adds	r2, r7, #4
 800aa96:	4b25      	ldr	r3, [pc, #148]	@ (800ab2c <HRS_Init+0xcc>)
 800aa98:	9305      	str	r3, [sp, #20]
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	9303      	str	r3, [sp, #12]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	9302      	str	r3, [sp, #8]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	2310      	movs	r3, #16
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	230d      	movs	r3, #13
 800aab0:	2101      	movs	r1, #1
 800aab2:	f7ff f8f3 	bl	8009c9c <aci_gatt_add_char>
 800aab6:	4603      	mov	r3, r0
 800aab8:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 800aaba:	f642 2338 	movw	r3, #10808	@ 0x2a38
 800aabe:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800aac0:	4b19      	ldr	r3, [pc, #100]	@ (800ab28 <HRS_Init+0xc8>)
 800aac2:	8818      	ldrh	r0, [r3, #0]
 800aac4:	1d3a      	adds	r2, r7, #4
 800aac6:	4b1a      	ldr	r3, [pc, #104]	@ (800ab30 <HRS_Init+0xd0>)
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	230a      	movs	r3, #10
 800aad0:	9303      	str	r3, [sp, #12]
 800aad2:	2300      	movs	r3, #0
 800aad4:	9302      	str	r3, [sp, #8]
 800aad6:	2300      	movs	r3, #0
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	2302      	movs	r3, #2
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	2301      	movs	r3, #1
 800aae0:	2101      	movs	r1, #1
 800aae2:	f7ff f8db 	bl	8009c9c <aci_gatt_add_char>
 800aae6:	4603      	mov	r3, r0
 800aae8:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 800aaea:	f642 2339 	movw	r3, #10809	@ 0x2a39
 800aaee:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800aaf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ab28 <HRS_Init+0xc8>)
 800aaf2:	8818      	ldrh	r0, [r3, #0]
 800aaf4:	1d3a      	adds	r2, r7, #4
 800aaf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab34 <HRS_Init+0xd4>)
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	2300      	movs	r3, #0
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	230a      	movs	r3, #10
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	2302      	movs	r3, #2
 800ab04:	9302      	str	r3, [sp, #8]
 800ab06:	2300      	movs	r3, #0
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	2308      	movs	r3, #8
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	2301      	movs	r3, #1
 800ab10:	2101      	movs	r1, #1
 800ab12:	f7ff f8c3 	bl	8009c9c <aci_gatt_add_char>
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 800ab1a:	bf00      	nop
}
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	0800a711 	.word	0x0800a711
 800ab28:	200001fc 	.word	0x200001fc
 800ab2c:	200001fe 	.word	0x200001fe
 800ab30:	20000200 	.word	0x20000200
 800ab34:	20000202 	.word	0x20000202

0800ab38 <HRS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HRS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	6039      	str	r1, [r7, #0]
 800ab42:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800ab48:	88fb      	ldrh	r3, [r7, #6]
 800ab4a:	f642 2237 	movw	r2, #10807	@ 0x2a37
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d009      	beq.n	800ab66 <HRS_UpdateChar+0x2e>
 800ab52:	f642 2238 	movw	r2, #10808	@ 0x2a38
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d10b      	bne.n	800ab72 <HRS_UpdateChar+0x3a>
  {
#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
    case SENSOR_LOCATION_UUID:
      return_value = Update_Char_BodySensorLocation((HRS_BodySensorLocation_t*)pPayload);
 800ab5a:	6838      	ldr	r0, [r7, #0]
 800ab5c:	f7ff fe64 	bl	800a828 <Update_Char_BodySensorLocation>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
      break;
 800ab64:	e006      	b.n	800ab74 <HRS_UpdateChar+0x3c>
#endif
    case HEART_RATE_MEASURMENT_UUID:
      return_value = Update_Char_Measurement((HRS_MeasVal_t*)pPayload);
 800ab66:	6838      	ldr	r0, [r7, #0]
 800ab68:	f7ff fe78 	bl	800a85c <Update_Char_Measurement>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab70:	e000      	b.n	800ab74 <HRS_UpdateChar+0x3c>

    default:
      break;
 800ab72:	bf00      	nop
  }

  return return_value;
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
}/* end HRS_UpdateChar() */
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ab7e:	b480      	push	{r7}
 800ab80:	af00      	add	r7, sp, #0
  return;
 800ab82:	bf00      	nop
}
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
  return;
 800ab90:	bf00      	nop
}
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	af00      	add	r7, sp, #0
  return;
 800ab9e:	bf00      	nop
}
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
  return;
 800abac:	bf00      	nop
}
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800abb6:	b480      	push	{r7}
 800abb8:	af00      	add	r7, sp, #0
  return;
 800abba:	bf00      	nop
}
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  return;
 800abc8:	bf00      	nop
}
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800abd2:	b480      	push	{r7}
 800abd4:	af00      	add	r7, sp, #0
  return;
 800abd6:	bf00      	nop
}
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  return;
 800abe4:	bf00      	nop
}
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800abee:	b480      	push	{r7}
 800abf0:	af00      	add	r7, sp, #0
  return;
 800abf2:	bf00      	nop
}
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
  return;
 800ac00:	bf00      	nop
}
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	af00      	add	r7, sp, #0
  return;
 800ac0e:	bf00      	nop
}
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  return;
 800ac1c:	bf00      	nop
}
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ac26:	b480      	push	{r7}
 800ac28:	af00      	add	r7, sp, #0
  return;
 800ac2a:	bf00      	nop
}
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
  return;
 800ac38:	bf00      	nop
}
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ac42:	b480      	push	{r7}
 800ac44:	af00      	add	r7, sp, #0
  return;
 800ac46:	bf00      	nop
}
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  return;
 800ac54:	bf00      	nop
}
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
	...

0800ac60 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ac64:	4b04      	ldr	r3, [pc, #16]	@ (800ac78 <SVCCTL_Init+0x18>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ac6a:	4b04      	ldr	r3, [pc, #16]	@ (800ac7c <SVCCTL_Init+0x1c>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ac70:	f000 f806 	bl	800ac80 <SVCCTL_SvcInit>

  return;
 800ac74:	bf00      	nop
}
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000204 	.word	0x20000204
 800ac7c:	20000224 	.word	0x20000224

0800ac80 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
  BAS_Init();
 800ac84:	f7ff ff7b 	bl	800ab7e <BAS_Init>

  BLS_Init();
 800ac88:	f7ff ff80 	bl	800ab8c <BLS_Init>

  CRS_STM_Init();
 800ac8c:	f7ff ff85 	bl	800ab9a <CRS_STM_Init>

  DIS_Init();
 800ac90:	f7ff fce2 	bl	800a658 <DIS_Init>

  EDS_STM_Init();
 800ac94:	f7ff ff88 	bl	800aba8 <EDS_STM_Init>

  HIDS_Init();
 800ac98:	f7ff ff8d 	bl	800abb6 <HIDS_Init>

  HRS_Init();
 800ac9c:	f7ff fee0 	bl	800aa60 <HRS_Init>

  HTS_Init();
 800aca0:	f7ff ff90 	bl	800abc4 <HTS_Init>

  IAS_Init();
 800aca4:	f7ff ff95 	bl	800abd2 <IAS_Init>

  LLS_Init();
 800aca8:	f7ff ff9a 	bl	800abe0 <LLS_Init>

  TPS_Init();
 800acac:	f7ff ff9f 	bl	800abee <TPS_Init>

  MOTENV_STM_Init();
 800acb0:	f7ff ffa4 	bl	800abfc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800acb4:	f7ff ffa9 	bl	800ac0a <P2PS_STM_Init>

  ZDD_STM_Init();
 800acb8:	f7ff ffae 	bl	800ac18 <ZDD_STM_Init>

  OTAS_STM_Init();
 800acbc:	f7ff ffb3 	bl	800ac26 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800acc0:	f7ff ffbf 	bl	800ac42 <BVOPUS_STM_Init>

  MESH_Init();
 800acc4:	f7ff ffb6 	bl	800ac34 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800acc8:	f7ff ffc2 	bl	800ac50 <SVCCTL_InitCustomSvc>
  
  return;
 800accc:	bf00      	nop
}
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800acd8:	4b09      	ldr	r3, [pc, #36]	@ (800ad00 <SVCCTL_RegisterSvcHandler+0x30>)
 800acda:	7f1b      	ldrb	r3, [r3, #28]
 800acdc:	4619      	mov	r1, r3
 800acde:	4a08      	ldr	r2, [pc, #32]	@ (800ad00 <SVCCTL_RegisterSvcHandler+0x30>)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ace6:	4b06      	ldr	r3, [pc, #24]	@ (800ad00 <SVCCTL_RegisterSvcHandler+0x30>)
 800ace8:	7f1b      	ldrb	r3, [r3, #28]
 800acea:	3301      	adds	r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <SVCCTL_RegisterSvcHandler+0x30>)
 800acf0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800acf2:	bf00      	nop
}
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20000204 	.word	0x20000204

0800ad04 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ad12:	2300      	movs	r3, #0
 800ad14:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2bff      	cmp	r3, #255	@ 0xff
 800ad1c:	d125      	bne.n	800ad6a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	3302      	adds	r3, #2
 800ad22:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ad2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad32:	d118      	bne.n	800ad66 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ad34:	2300      	movs	r3, #0
 800ad36:	757b      	strb	r3, [r7, #21]
 800ad38:	e00d      	b.n	800ad56 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ad3a:	7d7b      	ldrb	r3, [r7, #21]
 800ad3c:	4a1a      	ldr	r2, [pc, #104]	@ (800ada8 <SVCCTL_UserEvtRx+0xa4>)
 800ad3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	4798      	blx	r3
 800ad46:	4603      	mov	r3, r0
 800ad48:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d108      	bne.n	800ad62 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ad50:	7d7b      	ldrb	r3, [r7, #21]
 800ad52:	3301      	adds	r3, #1
 800ad54:	757b      	strb	r3, [r7, #21]
 800ad56:	4b14      	ldr	r3, [pc, #80]	@ (800ada8 <SVCCTL_UserEvtRx+0xa4>)
 800ad58:	7f1b      	ldrb	r3, [r3, #28]
 800ad5a:	7d7a      	ldrb	r2, [r7, #21]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d3ec      	bcc.n	800ad3a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ad60:	e002      	b.n	800ad68 <SVCCTL_UserEvtRx+0x64>
              break;
 800ad62:	bf00      	nop
          break;
 800ad64:	e000      	b.n	800ad68 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ad66:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ad68:	e000      	b.n	800ad6c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ad6a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d00f      	beq.n	800ad92 <SVCCTL_UserEvtRx+0x8e>
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	dc10      	bgt.n	800ad98 <SVCCTL_UserEvtRx+0x94>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d002      	beq.n	800ad80 <SVCCTL_UserEvtRx+0x7c>
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d006      	beq.n	800ad8c <SVCCTL_UserEvtRx+0x88>
 800ad7e:	e00b      	b.n	800ad98 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 fc97 	bl	800c6b4 <SVCCTL_App_Notification>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75bb      	strb	r3, [r7, #22]
      break;
 800ad8a:	e008      	b.n	800ad9e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75bb      	strb	r3, [r7, #22]
      break;
 800ad90:	e005      	b.n	800ad9e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ad92:	2300      	movs	r3, #0
 800ad94:	75bb      	strb	r3, [r7, #22]
      break;
 800ad96:	e002      	b.n	800ad9e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	75bb      	strb	r3, [r7, #22]
      break;
 800ad9c:	bf00      	nop
  }

  return (return_status);
 800ad9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	20000204 	.word	0x20000204

0800adac <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800adb4:	f107 030c 	add.w	r3, r7, #12
 800adb8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	212e      	movs	r1, #46	@ 0x2e
 800adc4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800adc8:	f000 fae8 	bl	800b39c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	330b      	adds	r3, #11
 800add0:	78db      	ldrb	r3, [r3, #3]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3720      	adds	r7, #32
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b088      	sub	sp, #32
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ade2:	f107 030c 	add.w	r3, r7, #12
 800ade6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	210f      	movs	r1, #15
 800adf2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800adf6:	f000 fad1 	bl	800b39c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	330b      	adds	r3, #11
 800adfe:	78db      	ldrb	r3, [r3, #3]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3720      	adds	r7, #32
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ae10:	f107 030c 	add.w	r3, r7, #12
 800ae14:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	2110      	movs	r1, #16
 800ae1c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ae20:	f000 fabc 	bl	800b39c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	330b      	adds	r3, #11
 800ae28:	78db      	ldrb	r3, [r3, #3]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b08b      	sub	sp, #44	@ 0x2c
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ae5c:	4b4a      	ldr	r3, [pc, #296]	@ (800af88 <SHCI_GetWirelessFwInfo+0x154>)
 800ae5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ae64:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ae6e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a44      	ldr	r2, [pc, #272]	@ (800af8c <SHCI_GetWirelessFwInfo+0x158>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d10f      	bne.n	800aea0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	617b      	str	r3, [r7, #20]
 800ae9e:	e01a      	b.n	800aed6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800aea8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800aeac:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed8:	0e1b      	lsrs	r3, r3, #24
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	0c1b      	lsrs	r3, r3, #16
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800aeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeec:	0a1b      	lsrs	r3, r3, #8
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	091b      	lsrs	r3, r3, #4
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	f003 030f 	and.w	r3, r3, #15
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800af04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 030f 	and.w	r3, r3, #15
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	0e1b      	lsrs	r3, r3, #24
 800af16:	b2da      	uxtb	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	0c1b      	lsrs	r3, r3, #16
 800af20:	b2da      	uxtb	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	0a1b      	lsrs	r3, r3, #8
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	b2da      	uxtb	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	0e1b      	lsrs	r3, r3, #24
 800af44:	b2da      	uxtb	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	0c1b      	lsrs	r3, r3, #16
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	0a1b      	lsrs	r3, r3, #8
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	0e1b      	lsrs	r3, r3, #24
 800af62:	b2da      	uxtb	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	0c1b      	lsrs	r3, r3, #16
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	b2da      	uxtb	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	372c      	adds	r7, #44	@ 0x2c
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	58004000 	.word	0x58004000
 800af8c:	a94656b9 	.word	0xa94656b9

0800af90 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	4a08      	ldr	r2, [pc, #32]	@ (800afc0 <hci_init+0x30>)
 800afa0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800afa2:	4a08      	ldr	r2, [pc, #32]	@ (800afc4 <hci_init+0x34>)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800afa8:	4806      	ldr	r0, [pc, #24]	@ (800afc4 <hci_init+0x34>)
 800afaa:	f000 f979 	bl	800b2a0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f8da 	bl	800b16c <TlInit>

  return;
 800afb8:	bf00      	nop
}
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	2000059c 	.word	0x2000059c
 800afc4:	20000574 	.word	0x20000574

0800afc8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800afce:	4822      	ldr	r0, [pc, #136]	@ (800b058 <hci_user_evt_proc+0x90>)
 800afd0:	f000 fe10 	bl	800bbf4 <LST_is_empty>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d12b      	bne.n	800b032 <hci_user_evt_proc+0x6a>
 800afda:	4b20      	ldr	r3, [pc, #128]	@ (800b05c <hci_user_evt_proc+0x94>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d027      	beq.n	800b032 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800afe2:	f107 030c 	add.w	r3, r7, #12
 800afe6:	4619      	mov	r1, r3
 800afe8:	481b      	ldr	r0, [pc, #108]	@ (800b058 <hci_user_evt_proc+0x90>)
 800afea:	f000 fe92 	bl	800bd12 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800afee:	4b1c      	ldr	r3, [pc, #112]	@ (800b060 <hci_user_evt_proc+0x98>)
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00c      	beq.n	800b010 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800affa:	2301      	movs	r3, #1
 800affc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800affe:	4b18      	ldr	r3, [pc, #96]	@ (800b060 <hci_user_evt_proc+0x98>)
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	1d3a      	adds	r2, r7, #4
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b008:	793a      	ldrb	r2, [r7, #4]
 800b00a:	4b14      	ldr	r3, [pc, #80]	@ (800b05c <hci_user_evt_proc+0x94>)
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	e002      	b.n	800b016 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b010:	4b12      	ldr	r3, [pc, #72]	@ (800b05c <hci_user_evt_proc+0x94>)
 800b012:	2201      	movs	r2, #1
 800b014:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b016:	4b11      	ldr	r3, [pc, #68]	@ (800b05c <hci_user_evt_proc+0x94>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d004      	beq.n	800b028 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fc0d 	bl	800b840 <TL_MM_EvtDone>
 800b026:	e004      	b.n	800b032 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	4619      	mov	r1, r3
 800b02c:	480a      	ldr	r0, [pc, #40]	@ (800b058 <hci_user_evt_proc+0x90>)
 800b02e:	f000 fe03 	bl	800bc38 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b032:	4809      	ldr	r0, [pc, #36]	@ (800b058 <hci_user_evt_proc+0x90>)
 800b034:	f000 fdde 	bl	800bbf4 <LST_is_empty>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d107      	bne.n	800b04e <hci_user_evt_proc+0x86>
 800b03e:	4b07      	ldr	r3, [pc, #28]	@ (800b05c <hci_user_evt_proc+0x94>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b046:	4804      	ldr	r0, [pc, #16]	@ (800b058 <hci_user_evt_proc+0x90>)
 800b048:	f002 f99f 	bl	800d38a <hci_notify_asynch_evt>
  }


  return;
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
}
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	2000022c 	.word	0x2000022c
 800b05c:	20000238 	.word	0x20000238
 800b060:	20000574 	.word	0x20000574

0800b064 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b070:	2000      	movs	r0, #0
 800b072:	f000 f8d1 	bl	800b218 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b076:	2300      	movs	r3, #0
 800b078:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	885b      	ldrh	r3, [r3, #2]
 800b07e:	b21b      	sxth	r3, r3
 800b080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b084:	b21a      	sxth	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	029b      	lsls	r3, r3, #10
 800b08c:	b21b      	sxth	r3, r3
 800b08e:	4313      	orrs	r3, r2
 800b090:	b21b      	sxth	r3, r3
 800b092:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b094:	4b33      	ldr	r3, [pc, #204]	@ (800b164 <hci_send_req+0x100>)
 800b096:	2201      	movs	r2, #1
 800b098:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	b2d9      	uxtb	r1, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	8bbb      	ldrh	r3, [r7, #28]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f890 	bl	800b1cc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b0ac:	e04e      	b.n	800b14c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b0ae:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b0b2:	f002 f981 	bl	800d3b8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b0b6:	e043      	b.n	800b140 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b0b8:	f107 030c 	add.w	r3, r7, #12
 800b0bc:	4619      	mov	r1, r3
 800b0be:	482a      	ldr	r0, [pc, #168]	@ (800b168 <hci_send_req+0x104>)
 800b0c0:	f000 fe27 	bl	800bd12 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	7a5b      	ldrb	r3, [r3, #9]
 800b0c8:	2b0f      	cmp	r3, #15
 800b0ca:	d114      	bne.n	800b0f6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	330b      	adds	r3, #11
 800b0d0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	885b      	ldrh	r3, [r3, #2]
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	8bba      	ldrh	r2, [r7, #28]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d104      	bne.n	800b0e8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	7812      	ldrb	r2, [r2, #0]
 800b0e6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d027      	beq.n	800b140 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	77fb      	strb	r3, [r7, #31]
 800b0f4:	e024      	b.n	800b140 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	330b      	adds	r3, #11
 800b0fa:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b102:	b29b      	uxth	r3, r3
 800b104:	8bba      	ldrh	r2, [r7, #28]
 800b106:	429a      	cmp	r2, r3
 800b108:	d114      	bne.n	800b134 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	7a9b      	ldrb	r3, [r3, #10]
 800b10e:	3b03      	subs	r3, #3
 800b110:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	695a      	ldr	r2, [r3, #20]
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	429a      	cmp	r2, r3
 800b11a:	bfa8      	it	ge
 800b11c:	461a      	movge	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6918      	ldr	r0, [r3, #16]
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	1cd9      	adds	r1, r3, #3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	461a      	mov	r2, r3
 800b130:	f003 feb7 	bl	800eea2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b13c:	2301      	movs	r3, #1
 800b13e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b140:	4809      	ldr	r0, [pc, #36]	@ (800b168 <hci_send_req+0x104>)
 800b142:	f000 fd57 	bl	800bbf4 <LST_is_empty>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0b5      	beq.n	800b0b8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b14c:	7ffb      	ldrb	r3, [r7, #31]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0ad      	beq.n	800b0ae <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b152:	2001      	movs	r0, #1
 800b154:	f000 f860 	bl	800b218 <NotifyCmdStatus>

  return 0;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3720      	adds	r7, #32
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	200005a0 	.word	0x200005a0
 800b168:	20000594 	.word	0x20000594

0800b16c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b174:	480f      	ldr	r0, [pc, #60]	@ (800b1b4 <TlInit+0x48>)
 800b176:	f000 fd2d 	bl	800bbd4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b17a:	4a0f      	ldr	r2, [pc, #60]	@ (800b1b8 <TlInit+0x4c>)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b180:	480e      	ldr	r0, [pc, #56]	@ (800b1bc <TlInit+0x50>)
 800b182:	f000 fd27 	bl	800bbd4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b186:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c0 <TlInit+0x54>)
 800b188:	2201      	movs	r2, #1
 800b18a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b18c:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c4 <TlInit+0x58>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00a      	beq.n	800b1aa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b198:	4b0b      	ldr	r3, [pc, #44]	@ (800b1c8 <TlInit+0x5c>)
 800b19a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b19c:	4b09      	ldr	r3, [pc, #36]	@ (800b1c4 <TlInit+0x58>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f107 0208 	add.w	r2, r7, #8
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4798      	blx	r3
  }

  return;
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
}
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20000594 	.word	0x20000594
 800b1b8:	20000234 	.word	0x20000234
 800b1bc:	2000022c 	.word	0x2000022c
 800b1c0:	20000238 	.word	0x20000238
 800b1c4:	20000574 	.word	0x20000574
 800b1c8:	0800b259 	.word	0x0800b259

0800b1cc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	603a      	str	r2, [r7, #0]
 800b1d6:	80fb      	strh	r3, [r7, #6]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b210 <SendCmd+0x44>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b1e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b210 <SendCmd+0x44>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	797a      	ldrb	r2, [r7, #5]
 800b1ec:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b1ee:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <SendCmd+0x44>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	330c      	adds	r3, #12
 800b1f4:	797a      	ldrb	r2, [r7, #5]
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f003 fe52 	bl	800eea2 <memcpy>

  hciContext.io.Send(0,0);
 800b1fe:	4b05      	ldr	r3, [pc, #20]	@ (800b214 <SendCmd+0x48>)
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	2100      	movs	r1, #0
 800b204:	2000      	movs	r0, #0
 800b206:	4798      	blx	r3

  return;
 800b208:	bf00      	nop
}
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000234 	.word	0x20000234
 800b214:	20000574 	.word	0x20000574

0800b218 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d108      	bne.n	800b23a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b228:	4b0a      	ldr	r3, [pc, #40]	@ (800b254 <NotifyCmdStatus+0x3c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00d      	beq.n	800b24c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b230:	4b08      	ldr	r3, [pc, #32]	@ (800b254 <NotifyCmdStatus+0x3c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2000      	movs	r0, #0
 800b236:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b238:	e008      	b.n	800b24c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b23a:	4b06      	ldr	r3, [pc, #24]	@ (800b254 <NotifyCmdStatus+0x3c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d004      	beq.n	800b24c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b242:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <NotifyCmdStatus+0x3c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2001      	movs	r0, #1
 800b248:	4798      	blx	r3
  return;
 800b24a:	bf00      	nop
 800b24c:	bf00      	nop
}
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	2000059c 	.word	0x2000059c

0800b258 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	7a5b      	ldrb	r3, [r3, #9]
 800b264:	2b0f      	cmp	r3, #15
 800b266:	d003      	beq.n	800b270 <TlEvtReceived+0x18>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7a5b      	ldrb	r3, [r3, #9]
 800b26c:	2b0e      	cmp	r3, #14
 800b26e:	d107      	bne.n	800b280 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	4809      	ldr	r0, [pc, #36]	@ (800b298 <TlEvtReceived+0x40>)
 800b274:	f000 fd06 	bl	800bc84 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b278:	2000      	movs	r0, #0
 800b27a:	f002 f892 	bl	800d3a2 <hci_cmd_resp_release>
 800b27e:	e006      	b.n	800b28e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	4806      	ldr	r0, [pc, #24]	@ (800b29c <TlEvtReceived+0x44>)
 800b284:	f000 fcfe 	bl	800bc84 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b288:	4804      	ldr	r0, [pc, #16]	@ (800b29c <TlEvtReceived+0x44>)
 800b28a:	f002 f87e 	bl	800d38a <hci_notify_asynch_evt>
  }

  return;
 800b28e:	bf00      	nop
}
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000594 	.word	0x20000594
 800b29c:	2000022c 	.word	0x2000022c

0800b2a0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a05      	ldr	r2, [pc, #20]	@ (800b2c0 <hci_register_io_bus+0x20>)
 800b2ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a04      	ldr	r2, [pc, #16]	@ (800b2c4 <hci_register_io_bus+0x24>)
 800b2b2:	611a      	str	r2, [r3, #16]

  return;
 800b2b4:	bf00      	nop
}
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	0800b5b9 	.word	0x0800b5b9
 800b2c4:	0800b621 	.word	0x0800b621

0800b2c8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	4a08      	ldr	r2, [pc, #32]	@ (800b2f8 <shci_init+0x30>)
 800b2d8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b2da:	4a08      	ldr	r2, [pc, #32]	@ (800b2fc <shci_init+0x34>)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b2e0:	4806      	ldr	r0, [pc, #24]	@ (800b2fc <shci_init+0x34>)
 800b2e2:	f000 f915 	bl	800b510 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 f898 	bl	800b420 <TlInit>

  return;
 800b2f0:	bf00      	nop
}
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	200005c4 	.word	0x200005c4
 800b2fc:	200005a4 	.word	0x200005a4

0800b300 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b306:	4822      	ldr	r0, [pc, #136]	@ (800b390 <shci_user_evt_proc+0x90>)
 800b308:	f000 fc74 	bl	800bbf4 <LST_is_empty>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d12b      	bne.n	800b36a <shci_user_evt_proc+0x6a>
 800b312:	4b20      	ldr	r3, [pc, #128]	@ (800b394 <shci_user_evt_proc+0x94>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d027      	beq.n	800b36a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b31a:	f107 030c 	add.w	r3, r7, #12
 800b31e:	4619      	mov	r1, r3
 800b320:	481b      	ldr	r0, [pc, #108]	@ (800b390 <shci_user_evt_proc+0x90>)
 800b322:	f000 fcf6 	bl	800bd12 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b326:	4b1c      	ldr	r3, [pc, #112]	@ (800b398 <shci_user_evt_proc+0x98>)
 800b328:	69db      	ldr	r3, [r3, #28]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00c      	beq.n	800b348 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b332:	2301      	movs	r3, #1
 800b334:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b336:	4b18      	ldr	r3, [pc, #96]	@ (800b398 <shci_user_evt_proc+0x98>)
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	1d3a      	adds	r2, r7, #4
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b340:	793a      	ldrb	r2, [r7, #4]
 800b342:	4b14      	ldr	r3, [pc, #80]	@ (800b394 <shci_user_evt_proc+0x94>)
 800b344:	701a      	strb	r2, [r3, #0]
 800b346:	e002      	b.n	800b34e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b348:	4b12      	ldr	r3, [pc, #72]	@ (800b394 <shci_user_evt_proc+0x94>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b34e:	4b11      	ldr	r3, [pc, #68]	@ (800b394 <shci_user_evt_proc+0x94>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fa71 	bl	800b840 <TL_MM_EvtDone>
 800b35e:	e004      	b.n	800b36a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4619      	mov	r1, r3
 800b364:	480a      	ldr	r0, [pc, #40]	@ (800b390 <shci_user_evt_proc+0x90>)
 800b366:	f000 fc67 	bl	800bc38 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b36a:	4809      	ldr	r0, [pc, #36]	@ (800b390 <shci_user_evt_proc+0x90>)
 800b36c:	f000 fc42 	bl	800bbf4 <LST_is_empty>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d107      	bne.n	800b386 <shci_user_evt_proc+0x86>
 800b376:	4b07      	ldr	r3, [pc, #28]	@ (800b394 <shci_user_evt_proc+0x94>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b37e:	4804      	ldr	r0, [pc, #16]	@ (800b390 <shci_user_evt_proc+0x90>)
 800b380:	f7f6 fadd 	bl	800193e <shci_notify_asynch_evt>
  }


  return;
 800b384:	bf00      	nop
 800b386:	bf00      	nop
}
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	2000023c 	.word	0x2000023c
 800b394:	2000024c 	.word	0x2000024c
 800b398:	200005a4 	.word	0x200005a4

0800b39c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60ba      	str	r2, [r7, #8]
 800b3a4:	607b      	str	r3, [r7, #4]
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	81fb      	strh	r3, [r7, #14]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f000 f868 	bl	800b484 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b3b4:	4b17      	ldr	r3, [pc, #92]	@ (800b414 <shci_send+0x78>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	89fa      	ldrh	r2, [r7, #14]
 800b3ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b3be:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <shci_send+0x78>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	7b7a      	ldrb	r2, [r7, #13]
 800b3c4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b3c6:	4b13      	ldr	r3, [pc, #76]	@ (800b414 <shci_send+0x78>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	330c      	adds	r3, #12
 800b3cc:	7b7a      	ldrb	r2, [r7, #13]
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f003 fd66 	bl	800eea2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b3d6:	4b10      	ldr	r3, [pc, #64]	@ (800b418 <shci_send+0x7c>)
 800b3d8:	2201      	movs	r2, #1
 800b3da:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b41c <shci_send+0x80>)
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b3e6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b3ea:	f7f6 fabf 	bl	800196c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f103 0008 	add.w	r0, r3, #8
 800b3f4:	4b07      	ldr	r3, [pc, #28]	@ (800b414 <shci_send+0x78>)
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	4b06      	ldr	r3, [pc, #24]	@ (800b414 <shci_send+0x78>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	789b      	ldrb	r3, [r3, #2]
 800b3fe:	3303      	adds	r3, #3
 800b400:	461a      	mov	r2, r3
 800b402:	f003 fd4e 	bl	800eea2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b406:	2001      	movs	r0, #1
 800b408:	f000 f83c 	bl	800b484 <Cmd_SetStatus>

  return;
 800b40c:	bf00      	nop
}
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20000248 	.word	0x20000248
 800b418:	200005c8 	.word	0x200005c8
 800b41c:	200005a4 	.word	0x200005a4

0800b420 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b428:	4a10      	ldr	r2, [pc, #64]	@ (800b46c <TlInit+0x4c>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b42e:	4810      	ldr	r0, [pc, #64]	@ (800b470 <TlInit+0x50>)
 800b430:	f000 fbd0 	bl	800bbd4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b434:	2001      	movs	r0, #1
 800b436:	f000 f825 	bl	800b484 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b43a:	4b0e      	ldr	r3, [pc, #56]	@ (800b474 <TlInit+0x54>)
 800b43c:	2201      	movs	r2, #1
 800b43e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b440:	4b0d      	ldr	r3, [pc, #52]	@ (800b478 <TlInit+0x58>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00c      	beq.n	800b462 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b44c:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <TlInit+0x5c>)
 800b44e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b450:	4b0b      	ldr	r3, [pc, #44]	@ (800b480 <TlInit+0x60>)
 800b452:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b454:	4b08      	ldr	r3, [pc, #32]	@ (800b478 <TlInit+0x58>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f107 020c 	add.w	r2, r7, #12
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
  }

  return;
 800b460:	bf00      	nop
 800b462:	bf00      	nop
}
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20000248 	.word	0x20000248
 800b470:	2000023c 	.word	0x2000023c
 800b474:	2000024c 	.word	0x2000024c
 800b478:	200005a4 	.word	0x200005a4
 800b47c:	0800b4d5 	.word	0x0800b4d5
 800b480:	0800b4ed 	.word	0x0800b4ed

0800b484 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10b      	bne.n	800b4ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b494:	4b0d      	ldr	r3, [pc, #52]	@ (800b4cc <Cmd_SetStatus+0x48>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b49c:	4b0b      	ldr	r3, [pc, #44]	@ (800b4cc <Cmd_SetStatus+0x48>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d0 <Cmd_SetStatus+0x4c>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b4aa:	e00b      	b.n	800b4c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b4ac:	4b08      	ldr	r3, [pc, #32]	@ (800b4d0 <Cmd_SetStatus+0x4c>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b4b2:	4b06      	ldr	r3, [pc, #24]	@ (800b4cc <Cmd_SetStatus+0x48>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d004      	beq.n	800b4c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b4ba:	4b04      	ldr	r3, [pc, #16]	@ (800b4cc <Cmd_SetStatus+0x48>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2001      	movs	r0, #1
 800b4c0:	4798      	blx	r3
  return;
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
}
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	200005c4 	.word	0x200005c4
 800b4d0:	20000244 	.word	0x20000244

0800b4d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f7f6 fa3a 	bl	8001956 <shci_cmd_resp_release>

  return;
 800b4e2:	bf00      	nop
}
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4805      	ldr	r0, [pc, #20]	@ (800b50c <TlUserEvtReceived+0x20>)
 800b4f8:	f000 fbc4 	bl	800bc84 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b4fc:	4803      	ldr	r0, [pc, #12]	@ (800b50c <TlUserEvtReceived+0x20>)
 800b4fe:	f7f6 fa1e 	bl	800193e <shci_notify_asynch_evt>

  return;
 800b502:	bf00      	nop
}
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	2000023c 	.word	0x2000023c

0800b510 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a05      	ldr	r2, [pc, #20]	@ (800b530 <shci_register_io_bus+0x20>)
 800b51c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a04      	ldr	r2, [pc, #16]	@ (800b534 <shci_register_io_bus+0x24>)
 800b522:	611a      	str	r2, [r3, #16]

  return;
 800b524:	bf00      	nop
}
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	0800b6cd 	.word	0x0800b6cd
 800b534:	0800b721 	.word	0x0800b721

0800b538 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b53c:	f002 fa4c 	bl	800d9d8 <HW_IPCC_Enable>

  return;
 800b540:	bf00      	nop
}
 800b542:	bd80      	pop	{r7, pc}

0800b544 <TL_Init>:


void TL_Init( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b548:	4b10      	ldr	r3, [pc, #64]	@ (800b58c <TL_Init+0x48>)
 800b54a:	4a11      	ldr	r2, [pc, #68]	@ (800b590 <TL_Init+0x4c>)
 800b54c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b54e:	4b0f      	ldr	r3, [pc, #60]	@ (800b58c <TL_Init+0x48>)
 800b550:	4a10      	ldr	r2, [pc, #64]	@ (800b594 <TL_Init+0x50>)
 800b552:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b554:	4b0d      	ldr	r3, [pc, #52]	@ (800b58c <TL_Init+0x48>)
 800b556:	4a10      	ldr	r2, [pc, #64]	@ (800b598 <TL_Init+0x54>)
 800b558:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b55a:	4b0c      	ldr	r3, [pc, #48]	@ (800b58c <TL_Init+0x48>)
 800b55c:	4a0f      	ldr	r2, [pc, #60]	@ (800b59c <TL_Init+0x58>)
 800b55e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b560:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <TL_Init+0x48>)
 800b562:	4a0f      	ldr	r2, [pc, #60]	@ (800b5a0 <TL_Init+0x5c>)
 800b564:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b566:	4b09      	ldr	r3, [pc, #36]	@ (800b58c <TL_Init+0x48>)
 800b568:	4a0e      	ldr	r2, [pc, #56]	@ (800b5a4 <TL_Init+0x60>)
 800b56a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b56c:	4b07      	ldr	r3, [pc, #28]	@ (800b58c <TL_Init+0x48>)
 800b56e:	4a0e      	ldr	r2, [pc, #56]	@ (800b5a8 <TL_Init+0x64>)
 800b570:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b572:	4b06      	ldr	r3, [pc, #24]	@ (800b58c <TL_Init+0x48>)
 800b574:	4a0d      	ldr	r2, [pc, #52]	@ (800b5ac <TL_Init+0x68>)
 800b576:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b578:	4b04      	ldr	r3, [pc, #16]	@ (800b58c <TL_Init+0x48>)
 800b57a:	4a0d      	ldr	r2, [pc, #52]	@ (800b5b0 <TL_Init+0x6c>)
 800b57c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b57e:	4b03      	ldr	r3, [pc, #12]	@ (800b58c <TL_Init+0x48>)
 800b580:	4a0c      	ldr	r2, [pc, #48]	@ (800b5b4 <TL_Init+0x70>)
 800b582:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b584:	f002 fa3c 	bl	800da00 <HW_IPCC_Init>

  return;
 800b588:	bf00      	nop
}
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	20030000 	.word	0x20030000
 800b590:	20030028 	.word	0x20030028
 800b594:	20030048 	.word	0x20030048
 800b598:	20030058 	.word	0x20030058
 800b59c:	20030068 	.word	0x20030068
 800b5a0:	20030070 	.word	0x20030070
 800b5a4:	20030078 	.word	0x20030078
 800b5a8:	20030080 	.word	0x20030080
 800b5ac:	2003009c 	.word	0x2003009c
 800b5b0:	200300a0 	.word	0x200300a0
 800b5b4:	200300ac 	.word	0x200300ac

0800b5b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b5c4:	4811      	ldr	r0, [pc, #68]	@ (800b60c <TL_BLE_Init+0x54>)
 800b5c6:	f000 fb05 	bl	800bbd4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b5ca:	4b11      	ldr	r3, [pc, #68]	@ (800b610 <TL_BLE_Init+0x58>)
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68da      	ldr	r2, [r3, #12]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b614 <TL_BLE_Init+0x5c>)
 800b5e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4a08      	ldr	r2, [pc, #32]	@ (800b60c <TL_BLE_Init+0x54>)
 800b5ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b5ec:	f002 fa1e 	bl	800da2c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a08      	ldr	r2, [pc, #32]	@ (800b618 <TL_BLE_Init+0x60>)
 800b5f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a07      	ldr	r2, [pc, #28]	@ (800b61c <TL_BLE_Init+0x64>)
 800b5fe:	6013      	str	r3, [r2, #0]

  return 0;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	200300c8 	.word	0x200300c8
 800b610:	20030000 	.word	0x20030000
 800b614:	20030a58 	.word	0x20030a58
 800b618:	200005d4 	.word	0x200005d4
 800b61c:	200005d8 	.word	0x200005d8

0800b620 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	460b      	mov	r3, r1
 800b62a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b62c:	4b09      	ldr	r3, [pc, #36]	@ (800b654 <TL_BLE_SendCmd+0x34>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2201      	movs	r2, #1
 800b634:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b636:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <TL_BLE_SendCmd+0x34>)
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4619      	mov	r1, r3
 800b63e:	2001      	movs	r0, #1
 800b640:	f000 f96c 	bl	800b91c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b644:	f002 f9fc 	bl	800da40 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20030000 	.word	0x20030000

0800b658 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b65e:	e01c      	b.n	800b69a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b660:	1d3b      	adds	r3, r7, #4
 800b662:	4619      	mov	r1, r3
 800b664:	4812      	ldr	r0, [pc, #72]	@ (800b6b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b666:	f000 fb54 	bl	800bd12 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	7a5b      	ldrb	r3, [r3, #9]
 800b66e:	2b0f      	cmp	r3, #15
 800b670:	d003      	beq.n	800b67a <HW_IPCC_BLE_RxEvtNot+0x22>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	7a5b      	ldrb	r3, [r3, #9]
 800b676:	2b0e      	cmp	r3, #14
 800b678:	d105      	bne.n	800b686 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4619      	mov	r1, r3
 800b67e:	2002      	movs	r0, #2
 800b680:	f000 f94c 	bl	800b91c <OutputDbgTrace>
 800b684:	e004      	b.n	800b690 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4619      	mov	r1, r3
 800b68a:	2003      	movs	r0, #3
 800b68c:	f000 f946 	bl	800b91c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b690:	4b08      	ldr	r3, [pc, #32]	@ (800b6b4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4610      	mov	r0, r2
 800b698:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b69a:	4805      	ldr	r0, [pc, #20]	@ (800b6b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b69c:	f000 faaa 	bl	800bbf4 <LST_is_empty>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0dc      	beq.n	800b660 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b6a6:	bf00      	nop
}
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	200300c8 	.word	0x200300c8
 800b6b4:	200005d4 	.word	0x200005d4

0800b6b8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b6bc:	4b02      	ldr	r3, [pc, #8]	@ (800b6c8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4798      	blx	r3

  return;
 800b6c2:	bf00      	nop
}
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	200005d8 	.word	0x200005d8

0800b6cc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b6d8:	480d      	ldr	r0, [pc, #52]	@ (800b710 <TL_SYS_Init+0x44>)
 800b6da:	f000 fa7b 	bl	800bbd4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b6de:	4b0d      	ldr	r3, [pc, #52]	@ (800b714 <TL_SYS_Init+0x48>)
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4a08      	ldr	r2, [pc, #32]	@ (800b710 <TL_SYS_Init+0x44>)
 800b6f0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b6f2:	f002 f9c7 	bl	800da84 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a07      	ldr	r2, [pc, #28]	@ (800b718 <TL_SYS_Init+0x4c>)
 800b6fc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	4a06      	ldr	r2, [pc, #24]	@ (800b71c <TL_SYS_Init+0x50>)
 800b704:	6013      	str	r3, [r2, #0]

  return 0;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	200300d0 	.word	0x200300d0
 800b714:	20030000 	.word	0x20030000
 800b718:	200005dc 	.word	0x200005dc
 800b71c:	200005e0 	.word	0x200005e0

0800b720 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	460b      	mov	r3, r1
 800b72a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b72c:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <TL_SYS_SendCmd+0x34>)
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2210      	movs	r2, #16
 800b734:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b736:	4b07      	ldr	r3, [pc, #28]	@ (800b754 <TL_SYS_SendCmd+0x34>)
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4619      	mov	r1, r3
 800b73e:	2004      	movs	r0, #4
 800b740:	f000 f8ec 	bl	800b91c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b744:	f002 f9a8 	bl	800da98 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20030000 	.word	0x20030000

0800b758 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b75c:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4619      	mov	r1, r3
 800b764:	2005      	movs	r0, #5
 800b766:	f000 f8d9 	bl	800b91c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b76a:	4b05      	ldr	r3, [pc, #20]	@ (800b780 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a03      	ldr	r2, [pc, #12]	@ (800b77c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b770:	68d2      	ldr	r2, [r2, #12]
 800b772:	6812      	ldr	r2, [r2, #0]
 800b774:	4610      	mov	r0, r2
 800b776:	4798      	blx	r3

  return;
 800b778:	bf00      	nop
}
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	20030000 	.word	0x20030000
 800b780:	200005dc 	.word	0x200005dc

0800b784 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b78a:	e00e      	b.n	800b7aa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b78c:	1d3b      	adds	r3, r7, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	480b      	ldr	r0, [pc, #44]	@ (800b7c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b792:	f000 fabe 	bl	800bd12 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4619      	mov	r1, r3
 800b79a:	2006      	movs	r0, #6
 800b79c:	f000 f8be 	bl	800b91c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b7a0:	4b08      	ldr	r3, [pc, #32]	@ (800b7c4 <HW_IPCC_SYS_EvtNot+0x40>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b7aa:	4805      	ldr	r0, [pc, #20]	@ (800b7c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b7ac:	f000 fa22 	bl	800bbf4 <LST_is_empty>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0ea      	beq.n	800b78c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b7b6:	bf00      	nop
}
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	200300d0 	.word	0x200300d0
 800b7c4:	200005e0 	.word	0x200005e0

0800b7c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b7d0:	4817      	ldr	r0, [pc, #92]	@ (800b830 <TL_MM_Init+0x68>)
 800b7d2:	f000 f9ff 	bl	800bbd4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b7d6:	4817      	ldr	r0, [pc, #92]	@ (800b834 <TL_MM_Init+0x6c>)
 800b7d8:	f000 f9fc 	bl	800bbd4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b7dc:	4b16      	ldr	r3, [pc, #88]	@ (800b838 <TL_MM_Init+0x70>)
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	4a16      	ldr	r2, [pc, #88]	@ (800b83c <TL_MM_Init+0x74>)
 800b7e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b7e4:	4b15      	ldr	r3, [pc, #84]	@ (800b83c <TL_MM_Init+0x74>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	6892      	ldr	r2, [r2, #8]
 800b7ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b7ee:	4b13      	ldr	r3, [pc, #76]	@ (800b83c <TL_MM_Init+0x74>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	68d2      	ldr	r2, [r2, #12]
 800b7f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b7f8:	4b10      	ldr	r3, [pc, #64]	@ (800b83c <TL_MM_Init+0x74>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b830 <TL_MM_Init+0x68>)
 800b7fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b800:	4b0e      	ldr	r3, [pc, #56]	@ (800b83c <TL_MM_Init+0x74>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6812      	ldr	r2, [r2, #0]
 800b808:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b80a:	4b0c      	ldr	r3, [pc, #48]	@ (800b83c <TL_MM_Init+0x74>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	6852      	ldr	r2, [r2, #4]
 800b812:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b814:	4b09      	ldr	r3, [pc, #36]	@ (800b83c <TL_MM_Init+0x74>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	6912      	ldr	r2, [r2, #16]
 800b81c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b81e:	4b07      	ldr	r3, [pc, #28]	@ (800b83c <TL_MM_Init+0x74>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	6952      	ldr	r2, [r2, #20]
 800b826:	619a      	str	r2, [r3, #24]

  return;
 800b828:	bf00      	nop
}
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	200300b8 	.word	0x200300b8
 800b834:	200005cc 	.word	0x200005cc
 800b838:	20030000 	.word	0x20030000
 800b83c:	200005e4 	.word	0x200005e4

0800b840 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	4807      	ldr	r0, [pc, #28]	@ (800b868 <TL_MM_EvtDone+0x28>)
 800b84c:	f000 fa1a 	bl	800bc84 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	2000      	movs	r0, #0
 800b854:	f000 f862 	bl	800b91c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b858:	4804      	ldr	r0, [pc, #16]	@ (800b86c <TL_MM_EvtDone+0x2c>)
 800b85a:	f002 f943 	bl	800dae4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b85e:	bf00      	nop
}
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	200005cc 	.word	0x200005cc
 800b86c:	0800b871 	.word	0x0800b871

0800b870 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b876:	e00c      	b.n	800b892 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b878:	1d3b      	adds	r3, r7, #4
 800b87a:	4619      	mov	r1, r3
 800b87c:	480a      	ldr	r0, [pc, #40]	@ (800b8a8 <SendFreeBuf+0x38>)
 800b87e:	f000 fa48 	bl	800bd12 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b882:	4b0a      	ldr	r3, [pc, #40]	@ (800b8ac <SendFreeBuf+0x3c>)
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 f9f9 	bl	800bc84 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b892:	4805      	ldr	r0, [pc, #20]	@ (800b8a8 <SendFreeBuf+0x38>)
 800b894:	f000 f9ae 	bl	800bbf4 <LST_is_empty>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d0ec      	beq.n	800b878 <SendFreeBuf+0x8>
  }

  return;
 800b89e:	bf00      	nop
}
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200005cc 	.word	0x200005cc
 800b8ac:	20030000 	.word	0x20030000

0800b8b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b8b4:	4805      	ldr	r0, [pc, #20]	@ (800b8cc <TL_TRACES_Init+0x1c>)
 800b8b6:	f000 f98d 	bl	800bbd4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b8ba:	4b05      	ldr	r3, [pc, #20]	@ (800b8d0 <TL_TRACES_Init+0x20>)
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	4a03      	ldr	r2, [pc, #12]	@ (800b8cc <TL_TRACES_Init+0x1c>)
 800b8c0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b8c2:	f002 f945 	bl	800db50 <HW_IPCC_TRACES_Init>

  return;
 800b8c6:	bf00      	nop
}
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	200300c0 	.word	0x200300c0
 800b8d0:	20030000 	.word	0x20030000

0800b8d4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b8da:	e008      	b.n	800b8ee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b8dc:	1d3b      	adds	r3, r7, #4
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4808      	ldr	r0, [pc, #32]	@ (800b904 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b8e2:	f000 fa16 	bl	800bd12 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 f80d 	bl	800b908 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b8ee:	4805      	ldr	r0, [pc, #20]	@ (800b904 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b8f0:	f000 f980 	bl	800bbf4 <LST_is_empty>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0f0      	beq.n	800b8dc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b8fa:	bf00      	nop
}
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	200300c0 	.word	0x200300c0

0800b908 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	2b06      	cmp	r3, #6
 800b92c:	d845      	bhi.n	800b9ba <OutputDbgTrace+0x9e>
 800b92e:	a201      	add	r2, pc, #4	@ (adr r2, 800b934 <OutputDbgTrace+0x18>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800b951 	.word	0x0800b951
 800b938:	0800b975 	.word	0x0800b975
 800b93c:	0800b97b 	.word	0x0800b97b
 800b940:	0800b98f 	.word	0x0800b98f
 800b944:	0800b99b 	.word	0x0800b99b
 800b948:	0800b9a1 	.word	0x0800b9a1
 800b94c:	0800b9af 	.word	0x0800b9af
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	7a5b      	ldrb	r3, [r3, #9]
 800b958:	2bff      	cmp	r3, #255	@ 0xff
 800b95a:	d005      	beq.n	800b968 <OutputDbgTrace+0x4c>
 800b95c:	2bff      	cmp	r3, #255	@ 0xff
 800b95e:	dc05      	bgt.n	800b96c <OutputDbgTrace+0x50>
 800b960:	2b0e      	cmp	r3, #14
 800b962:	d005      	beq.n	800b970 <OutputDbgTrace+0x54>
 800b964:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b966:	e001      	b.n	800b96c <OutputDbgTrace+0x50>
          break;
 800b968:	bf00      	nop
 800b96a:	e027      	b.n	800b9bc <OutputDbgTrace+0xa0>
          break;
 800b96c:	bf00      	nop
 800b96e:	e025      	b.n	800b9bc <OutputDbgTrace+0xa0>
          break;
 800b970:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b972:	e023      	b.n	800b9bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b978:	e020      	b.n	800b9bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	7a5b      	ldrb	r3, [r3, #9]
 800b982:	2b0e      	cmp	r3, #14
 800b984:	d001      	beq.n	800b98a <OutputDbgTrace+0x6e>
 800b986:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b988:	e000      	b.n	800b98c <OutputDbgTrace+0x70>
          break;
 800b98a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b98c:	e016      	b.n	800b9bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	7a5b      	ldrb	r3, [r3, #9]
 800b996:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b998:	e010      	b.n	800b9bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b99e:	e00d      	b.n	800b9bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	7a5b      	ldrb	r3, [r3, #9]
 800b9a8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b9aa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b9ac:	e006      	b.n	800b9bc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	7a5b      	ldrb	r3, [r3, #9]
 800b9b6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b9b8:	e000      	b.n	800b9bc <OutputDbgTrace+0xa0>

    default:
      break;
 800b9ba:	bf00      	nop
  }

  return;
 800b9bc:	bf00      	nop
}
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800b9d4:	215c      	movs	r1, #92	@ 0x5c
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f003 f9d6 	bl	800ed88 <strrchr>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d007      	beq.n	800b9f2 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800b9e2:	215c      	movs	r1, #92	@ 0x5c
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f003 f9cf 	bl	800ed88 <strrchr>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e00d      	b.n	800ba0e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800b9f2:	212f      	movs	r1, #47	@ 0x2f
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f003 f9c7 	bl	800ed88 <strrchr>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d006      	beq.n	800ba0e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ba00:	212f      	movs	r1, #47	@ 0x2f
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f003 f9c0 	bl	800ed88 <strrchr>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba24:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ba26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba28:	b672      	cpsid	i
}
 800ba2a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ba2c:	1cbb      	adds	r3, r7, #2
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4812      	ldr	r0, [pc, #72]	@ (800ba7c <DbgTrace_TxCpltCallback+0x64>)
 800ba32:	f000 fbe5 	bl	800c200 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ba36:	1cbb      	adds	r3, r7, #2
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4810      	ldr	r0, [pc, #64]	@ (800ba7c <DbgTrace_TxCpltCallback+0x64>)
 800ba3c:	f000 fccf 	bl	800c3de <CircularQueue_Sense>
 800ba40:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00c      	beq.n	800ba62 <DbgTrace_TxCpltCallback+0x4a>
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	f383 8810 	msr	PRIMASK, r3
}
 800ba52:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ba54:	887b      	ldrh	r3, [r7, #2]
 800ba56:	4a0a      	ldr	r2, [pc, #40]	@ (800ba80 <DbgTrace_TxCpltCallback+0x68>)
 800ba58:	4619      	mov	r1, r3
 800ba5a:	6938      	ldr	r0, [r7, #16]
 800ba5c:	f7f5 fb6b 	bl	8001136 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ba60:	e008      	b.n	800ba74 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ba62:	4b08      	ldr	r3, [pc, #32]	@ (800ba84 <DbgTrace_TxCpltCallback+0x6c>)
 800ba64:	2201      	movs	r2, #1
 800ba66:	701a      	strb	r2, [r3, #0]
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f383 8810 	msr	PRIMASK, r3
}
 800ba72:	bf00      	nop
}
 800ba74:	bf00      	nop
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	200005e8 	.word	0x200005e8
 800ba80:	0800ba19 	.word	0x0800ba19
 800ba84:	20000015 	.word	0x20000015

0800ba88 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ba8e:	f7f5 fb4c 	bl	800112a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ba92:	2302      	movs	r3, #2
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	2300      	movs	r3, #0
 800ba98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ba9c:	4903      	ldr	r1, [pc, #12]	@ (800baac <DbgTraceInit+0x24>)
 800ba9e:	4804      	ldr	r0, [pc, #16]	@ (800bab0 <DbgTraceInit+0x28>)
 800baa0:	f000 f956 	bl	800bd50 <CircularQueue_Init>
#endif 
#endif
  return;
 800baa4:	bf00      	nop
}
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20000608 	.word	0x20000608
 800bab0:	200005e8 	.word	0x200005e8

0800bab4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 f805 	bl	800bad4 <DbgTraceWrite>
 800baca:	4603      	mov	r3, r0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08a      	sub	sp, #40	@ 0x28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bae4:	f3ef 8310 	mrs	r3, PRIMASK
 800bae8:	61bb      	str	r3, [r7, #24]
  return(result);
 800baea:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800baec:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf4:	d102      	bne.n	800bafc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bafa:	e037      	b.n	800bb6c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d006      	beq.n	800bb10 <DbgTraceWrite+0x3c>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d003      	beq.n	800bb10 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800bb08:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb0e:	e02d      	b.n	800bb6c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d02a      	beq.n	800bb6c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800bb1a:	b672      	cpsid	i
}
 800bb1c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	2301      	movs	r3, #1
 800bb24:	68b9      	ldr	r1, [r7, #8]
 800bb26:	4814      	ldr	r0, [pc, #80]	@ (800bb78 <DbgTraceWrite+0xa4>)
 800bb28:	f000 f944 	bl	800bdb4 <CircularQueue_Add>
 800bb2c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d015      	beq.n	800bb60 <DbgTraceWrite+0x8c>
 800bb34:	4b11      	ldr	r3, [pc, #68]	@ (800bb7c <DbgTraceWrite+0xa8>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d010      	beq.n	800bb60 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb7c <DbgTraceWrite+0xa8>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f383 8810 	msr	PRIMASK, r3
}
 800bb4e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	4a0a      	ldr	r2, [pc, #40]	@ (800bb80 <DbgTraceWrite+0xac>)
 800bb56:	4619      	mov	r1, r3
 800bb58:	69f8      	ldr	r0, [r7, #28]
 800bb5a:	f7f5 faec 	bl	8001136 <DbgOutputTraces>
 800bb5e:	e005      	b.n	800bb6c <DbgTraceWrite+0x98>
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f383 8810 	msr	PRIMASK, r3
}
 800bb6a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3728      	adds	r7, #40	@ 0x28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	200005e8 	.word	0x200005e8
 800bb7c:	20000015 	.word	0x20000015
 800bb80:	0800ba19 	.word	0x0800ba19

0800bb84 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bbcc <OTP_Read+0x48>)
 800bb90:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bb92:	e002      	b.n	800bb9a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3b08      	subs	r3, #8
 800bb98:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3307      	adds	r3, #7
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	79fa      	ldrb	r2, [r7, #7]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d003      	beq.n	800bbae <OTP_Read+0x2a>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4a09      	ldr	r2, [pc, #36]	@ (800bbd0 <OTP_Read+0x4c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d1f2      	bne.n	800bb94 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3307      	adds	r3, #7
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	79fa      	ldrb	r2, [r7, #7]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d001      	beq.n	800bbbe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	1fff73f8 	.word	0x1fff73f8
 800bbd0:	1fff7000 	.word	0x1fff7000

0800bbd4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	605a      	str	r2, [r3, #4]
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbfc:	f3ef 8310 	mrs	r3, PRIMASK
 800bc00:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc02:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc06:	b672      	cpsid	i
}
 800bc08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d102      	bne.n	800bc1a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800bc14:	2301      	movs	r3, #1
 800bc16:	75fb      	strb	r3, [r7, #23]
 800bc18:	e001      	b.n	800bc1e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	75fb      	strb	r3, [r7, #23]
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f383 8810 	msr	PRIMASK, r3
}
 800bc28:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	371c      	adds	r7, #28
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc42:	f3ef 8310 	mrs	r3, PRIMASK
 800bc46:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc48:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc4c:	b672      	cpsid	i
}
 800bc4e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	605a      	str	r2, [r3, #4]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f383 8810 	msr	PRIMASK, r3
}
 800bc76:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc8e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc92:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc94:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc98:	b672      	cpsid	i
}
 800bc9a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	601a      	str	r2, [r3, #0]
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f383 8810 	msr	PRIMASK, r3
}
 800bcc2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bcc4:	bf00      	nop
 800bcc6:	371c      	adds	r7, #28
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b087      	sub	sp, #28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcde:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bce2:	b672      	cpsid	i
}
 800bce4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	6812      	ldr	r2, [r2, #0]
 800bcee:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	6852      	ldr	r2, [r2, #4]
 800bcf8:	605a      	str	r2, [r3, #4]
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f383 8810 	msr	PRIMASK, r3
}
 800bd04:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd06:	bf00      	nop
 800bd08:	371c      	adds	r7, #28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd1c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd20:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd22:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd26:	b672      	cpsid	i
}
 800bd28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff ffca 	bl	800bcd0 <LST_remove_node>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f383 8810 	msr	PRIMASK, r3
}
 800bd46:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd48:	bf00      	nop
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	887a      	ldrh	r2, [r7, #2]
 800bd86:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	7e3a      	ldrb	r2, [r7, #24]
 800bd8c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800bd8e:	7e3b      	ldrb	r3, [r7, #24]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <CircularQueue_Init+0x56>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	891b      	ldrh	r3, [r3, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800bda0:	f04f 33ff 	mov.w	r3, #4294967295
 800bda4:	e000      	b.n	800bda8 <CircularQueue_Init+0x58>
  }
  return 0;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08e      	sub	sp, #56	@ 0x38
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bdc8:	2300      	movs	r3, #0
 800bdca:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bdcc:	2300      	movs	r3, #0
 800bdce:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bdd8:	2300      	movs	r3, #0
 800bdda:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bddc:	2300      	movs	r3, #0
 800bdde:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	891b      	ldrh	r3, [r3, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <CircularQueue_Add+0x38>
 800bde8:	2302      	movs	r3, #2
 800bdea:	e000      	b.n	800bdee <CircularQueue_Add+0x3a>
 800bdec:	2300      	movs	r3, #0
 800bdee:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d029      	beq.n	800be4c <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d122      	bne.n	800be46 <CircularQueue_Add+0x92>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	4413      	add	r3, r2
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	4618      	mov	r0, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	1c59      	adds	r1, r3, #1
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4299      	cmp	r1, r3
 800be1e:	d306      	bcc.n	800be2e <CircularQueue_Add+0x7a>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6919      	ldr	r1, [r3, #16]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	1acb      	subs	r3, r1, r3
 800be2a:	3301      	adds	r3, #1
 800be2c:	e002      	b.n	800be34 <CircularQueue_Add+0x80>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	3301      	adds	r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	4403      	add	r3, r0
 800be3e:	b29b      	uxth	r3, r3
 800be40:	3302      	adds	r3, #2
 800be42:	b29b      	uxth	r3, r3
 800be44:	e001      	b.n	800be4a <CircularQueue_Add+0x96>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	891b      	ldrh	r3, [r3, #8]
 800be4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	891b      	ldrh	r3, [r3, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	891b      	ldrh	r3, [r3, #8]
 800be58:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	429a      	cmp	r2, r3
 800be64:	d307      	bcc.n	800be76 <CircularQueue_Add+0xc2>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6919      	ldr	r1, [r3, #16]
 800be6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be70:	440b      	add	r3, r1
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	e000      	b.n	800be78 <CircularQueue_Add+0xc4>
 800be76:	2300      	movs	r3, #0
 800be78:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800be7a:	88fa      	ldrh	r2, [r7, #6]
 800be7c:	7ffb      	ldrb	r3, [r7, #31]
 800be7e:	4413      	add	r3, r2
 800be80:	461a      	mov	r2, r3
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	fb02 f303 	mul.w	r3, r2, r3
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d80b      	bhi.n	800bea6 <CircularQueue_Add+0xf2>
 800be8e:	88fa      	ldrh	r2, [r7, #6]
 800be90:	7ffb      	ldrb	r3, [r7, #31]
 800be92:	4413      	add	r3, r2
 800be94:	461a      	mov	r2, r3
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	fbb3 f1f2 	udiv	r1, r3, r2
 800be9c:	fb01 f202 	mul.w	r2, r1, r2
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	e000      	b.n	800bea8 <CircularQueue_Add+0xf4>
 800bea6:	2300      	movs	r3, #0
 800bea8:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800beaa:	7dfa      	ldrb	r2, [r7, #23]
 800beac:	7ffb      	ldrb	r3, [r7, #31]
 800beae:	429a      	cmp	r2, r3
 800beb0:	bf8c      	ite	hi
 800beb2:	2301      	movhi	r3, #1
 800beb4:	2300      	movls	r3, #0
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800beba:	7fbb      	ldrb	r3, [r7, #30]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <CircularQueue_Add+0x11e>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	7f1b      	ldrb	r3, [r3, #28]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <CircularQueue_Add+0x11e>
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	e000      	b.n	800bed4 <CircularQueue_Add+0x120>
 800bed2:	8bbb      	ldrh	r3, [r7, #28]
 800bed4:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bed6:	7fbb      	ldrb	r3, [r7, #30]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d008      	beq.n	800beee <CircularQueue_Add+0x13a>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	7f1b      	ldrb	r3, [r3, #28]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <CircularQueue_Add+0x13a>
 800bee8:	7ffb      	ldrb	r3, [r7, #31]
 800beea:	b29b      	uxth	r3, r3
 800beec:	e000      	b.n	800bef0 <CircularQueue_Add+0x13c>
 800beee:	8bbb      	ldrh	r3, [r7, #28]
 800bef0:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bef2:	88fb      	ldrh	r3, [r7, #6]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 817e 	beq.w	800c1f6 <CircularQueue_Add+0x442>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	695a      	ldr	r2, [r3, #20]
 800befe:	88f9      	ldrh	r1, [r7, #6]
 800bf00:	7ffb      	ldrb	r3, [r7, #31]
 800bf02:	440b      	add	r3, r1
 800bf04:	4619      	mov	r1, r3
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	fb01 f303 	mul.w	r3, r1, r3
 800bf0c:	441a      	add	r2, r3
 800bf0e:	8bbb      	ldrh	r3, [r7, #28]
 800bf10:	441a      	add	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	f200 816d 	bhi.w	800c1f6 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf20:	e14a      	b.n	800c1b8 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	691a      	ldr	r2, [r3, #16]
 800bf26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf28:	441a      	add	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d307      	bcc.n	800bf42 <CircularQueue_Add+0x18e>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	691a      	ldr	r2, [r3, #16]
 800bf36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf38:	441a      	add	r2, r3
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	e003      	b.n	800bf4a <CircularQueue_Add+0x196>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	691a      	ldr	r2, [r3, #16]
 800bf46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf48:	4413      	add	r3, r2
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	891b      	ldrh	r3, [r3, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d130      	bne.n	800bfbe <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf62:	1c59      	adds	r1, r3, #1
 800bf64:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf66:	4413      	add	r3, r2
 800bf68:	88fa      	ldrh	r2, [r7, #6]
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d304      	bcc.n	800bf82 <CircularQueue_Add+0x1ce>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	e000      	b.n	800bf84 <CircularQueue_Add+0x1d0>
 800bf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf84:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bf86:	88fb      	ldrh	r3, [r7, #6]
 800bf88:	0a1b      	lsrs	r3, r3, #8
 800bf8a:	b298      	uxth	r0, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf92:	1c59      	adds	r1, r3, #1
 800bf94:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf96:	4413      	add	r3, r2
 800bf98:	b2c2      	uxtb	r2, r0
 800bf9a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d304      	bcc.n	800bfb0 <CircularQueue_Add+0x1fc>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	e000      	b.n	800bfb2 <CircularQueue_Add+0x1fe>
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb2:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	1c9a      	adds	r2, r3, #2
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bfbe:	88fa      	ldrh	r2, [r7, #6]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6859      	ldr	r1, [r3, #4]
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc6:	1acb      	subs	r3, r1, r3
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	bf28      	it	cs
 800bfcc:	4613      	movcs	r3, r2
 800bfce:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bfd0:	88fb      	ldrh	r3, [r7, #6]
 800bfd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d007      	beq.n	800bfe8 <CircularQueue_Add+0x234>
 800bfd8:	88fb      	ldrh	r3, [r7, #6]
 800bfda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d225      	bcs.n	800c02c <CircularQueue_Add+0x278>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7f1b      	ldrb	r3, [r3, #28]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d121      	bne.n	800c02c <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfee:	18d0      	adds	r0, r2, r3
 800bff0:	88fb      	ldrh	r3, [r7, #6]
 800bff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bff4:	fb02 f303 	mul.w	r3, r2, r3
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	4413      	add	r3, r2
 800bffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bffe:	4619      	mov	r1, r3
 800c000:	f002 ff4f 	bl	800eea2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	695a      	ldr	r2, [r3, #20]
 800c008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00a:	441a      	add	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c010:	2300      	movs	r3, #0
 800c012:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c016:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c018:	88fa      	ldrh	r2, [r7, #6]
 800c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c020:	7ffb      	ldrb	r3, [r7, #31]
 800c022:	b29a      	uxth	r2, r3
 800c024:	88fb      	ldrh	r3, [r7, #6]
 800c026:	4413      	add	r3, r2
 800c028:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c02a:	e0a4      	b.n	800c176 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f000 80a1 	beq.w	800c176 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	7f1b      	ldrb	r3, [r3, #28]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d03a      	beq.n	800c0b6 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	891b      	ldrh	r3, [r3, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10d      	bne.n	800c064 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04e:	3b02      	subs	r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	22ff      	movs	r2, #255	@ 0xff
 800c054:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05c:	3b01      	subs	r3, #1
 800c05e:	4413      	add	r3, r2
 800c060:	22ff      	movs	r2, #255	@ 0xff
 800c062:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	695a      	ldr	r2, [r3, #20]
 800c068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06a:	441a      	add	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c074:	88fb      	ldrh	r3, [r7, #6]
 800c076:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c078:	2300      	movs	r3, #0
 800c07a:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	891b      	ldrh	r3, [r3, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d16f      	bne.n	800c164 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	1c59      	adds	r1, r3, #1
 800c08c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c08e:	4413      	add	r3, r2
 800c090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c098:	0a18      	lsrs	r0, r3, #8
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a0:	1c59      	adds	r1, r3, #1
 800c0a2:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b2c2      	uxtb	r2, r0
 800c0a8:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	1c9a      	adds	r2, r3, #2
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	615a      	str	r2, [r3, #20]
 800c0b4:	e056      	b.n	800c164 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	7f1b      	ldrb	r3, [r3, #28]
 800c0ba:	f003 0302 	and.w	r3, r3, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d050      	beq.n	800c164 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	891b      	ldrh	r3, [r3, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d14a      	bne.n	800c160 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	3b02      	subs	r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0dc:	0a19      	lsrs	r1, r3, #8
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	4413      	add	r3, r2
 800c0e8:	b2ca      	uxtb	r2, r1
 800c0ea:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f2:	18d0      	adds	r0, r2, r3
 800c0f4:	88fb      	ldrh	r3, [r7, #6]
 800c0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0f8:	fb02 f303 	mul.w	r3, r2, r3
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	4413      	add	r3, r2
 800c100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c102:	4619      	mov	r1, r3
 800c104:	f002 fecd 	bl	800eea2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	695a      	ldr	r2, [r3, #20]
 800c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10e:	441a      	add	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c116:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c118:	88fa      	ldrh	r2, [r7, #6]
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	1c5a      	adds	r2, r3, #1
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c12a:	2300      	movs	r3, #0
 800c12c:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	1c59      	adds	r1, r3, #1
 800c136:	6339      	str	r1, [r7, #48]	@ 0x30
 800c138:	4413      	add	r3, r2
 800c13a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c142:	0a18      	lsrs	r0, r3, #8
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14a:	1c59      	adds	r1, r3, #1
 800c14c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c14e:	4413      	add	r3, r2
 800c150:	b2c2      	uxtb	r2, r0
 800c152:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	1c9a      	adds	r2, r3, #2
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	615a      	str	r2, [r3, #20]
 800c15e:	e001      	b.n	800c164 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c160:	2300      	movs	r3, #0
 800c162:	e049      	b.n	800c1f8 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c164:	7ffb      	ldrb	r3, [r7, #31]
 800c166:	b29a      	uxth	r2, r3
 800c168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	4413      	add	r3, r2
 800c16e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d015      	beq.n	800c1a8 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c182:	18d0      	adds	r0, r2, r3
 800c184:	88fb      	ldrh	r3, [r7, #6]
 800c186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c188:	fb03 f202 	mul.w	r2, r3, r2
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	4413      	add	r3, r2
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	4413      	add	r3, r2
 800c194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c196:	4619      	mov	r1, r3
 800c198:	f002 fe83 	bl	800eea2 <memcpy>
        q->byteCount += NbBytesToCopy;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	695a      	ldr	r2, [r3, #20]
 800c1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a2:	441a      	add	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	f4ff aeb0 	bcc.w	800bf22 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6919      	ldr	r1, [r3, #16]
 800c1ca:	7ffb      	ldrb	r3, [r7, #31]
 800c1cc:	4419      	add	r1, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	4299      	cmp	r1, r3
 800c1d4:	d307      	bcc.n	800c1e6 <CircularQueue_Add+0x432>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6919      	ldr	r1, [r3, #16]
 800c1da:	7ffb      	ldrb	r3, [r7, #31]
 800c1dc:	4419      	add	r1, r3
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	1acb      	subs	r3, r1, r3
 800c1e4:	e003      	b.n	800c1ee <CircularQueue_Add+0x43a>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6919      	ldr	r1, [r3, #16]
 800c1ea:	7ffb      	ldrb	r3, [r7, #31]
 800c1ec:	440b      	add	r3, r1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	e000      	b.n	800c1f8 <CircularQueue_Add+0x444>
    return NULL;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3738      	adds	r7, #56	@ 0x38
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	891b      	ldrh	r3, [r3, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <CircularQueue_Remove+0x1e>
 800c21a:	2302      	movs	r3, #2
 800c21c:	e000      	b.n	800c220 <CircularQueue_Remove+0x20>
 800c21e:	2300      	movs	r3, #0
 800c220:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 80ca 	beq.w	800c3c4 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	891b      	ldrh	r3, [r3, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d120      	bne.n	800c27a <CircularQueue_Remove+0x7a>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	4413      	add	r3, r2
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	1c59      	adds	r1, r3, #1
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	4299      	cmp	r1, r3
 800c256:	d306      	bcc.n	800c266 <CircularQueue_Remove+0x66>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68d9      	ldr	r1, [r3, #12]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	1acb      	subs	r3, r1, r3
 800c262:	3301      	adds	r3, #1
 800c264:	e002      	b.n	800c26c <CircularQueue_Remove+0x6c>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	4413      	add	r3, r2
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	021b      	lsls	r3, r3, #8
 800c272:	b29b      	uxth	r3, r3
 800c274:	4403      	add	r3, r0
 800c276:	b29b      	uxth	r3, r3
 800c278:	e001      	b.n	800c27e <CircularQueue_Remove+0x7e>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	891b      	ldrh	r3, [r3, #8]
 800c27e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	7f1b      	ldrb	r3, [r3, #28]
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d056      	beq.n	800c33a <CircularQueue_Remove+0x13a>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7f1b      	ldrb	r3, [r3, #28]
 800c290:	f003 0302 	and.w	r3, r3, #2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d150      	bne.n	800c33a <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c298:	897b      	ldrh	r3, [r7, #10]
 800c29a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d103      	bne.n	800c2aa <CircularQueue_Remove+0xaa>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	891b      	ldrh	r3, [r3, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d012      	beq.n	800c2d0 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68da      	ldr	r2, [r3, #12]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d941      	bls.n	800c33a <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	891b      	ldrh	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d03d      	beq.n	800c33a <CircularQueue_Remove+0x13a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	8912      	ldrh	r2, [r2, #8]
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d234      	bcs.n	800c33a <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	695a      	ldr	r2, [r3, #20]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68d9      	ldr	r1, [r3, #12]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	1acb      	subs	r3, r1, r3
 800c2de:	441a      	add	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	891b      	ldrh	r3, [r3, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d120      	bne.n	800c334 <CircularQueue_Remove+0x134>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	4618      	mov	r0, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	1c59      	adds	r1, r3, #1
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	4299      	cmp	r1, r3
 800c310:	d306      	bcc.n	800c320 <CircularQueue_Remove+0x120>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68d9      	ldr	r1, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	1acb      	subs	r3, r1, r3
 800c31c:	3301      	adds	r3, #1
 800c31e:	e002      	b.n	800c326 <CircularQueue_Remove+0x126>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	3301      	adds	r3, #1
 800c326:	4413      	add	r3, r2
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	4403      	add	r3, r0
 800c330:	b29b      	uxth	r3, r3
 800c332:	e001      	b.n	800c338 <CircularQueue_Remove+0x138>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	891b      	ldrh	r3, [r3, #8]
 800c338:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68d9      	ldr	r1, [r3, #12]
 800c342:	7a7b      	ldrb	r3, [r7, #9]
 800c344:	4419      	add	r1, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	4299      	cmp	r1, r3
 800c34c:	d307      	bcc.n	800c35e <CircularQueue_Remove+0x15e>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	68d9      	ldr	r1, [r3, #12]
 800c352:	7a7b      	ldrb	r3, [r7, #9]
 800c354:	4419      	add	r1, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	1acb      	subs	r3, r1, r3
 800c35c:	e003      	b.n	800c366 <CircularQueue_Remove+0x166>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68d9      	ldr	r1, [r3, #12]
 800c362:	7a7b      	ldrb	r3, [r7, #9]
 800c364:	440b      	add	r3, r1
 800c366:	4413      	add	r3, r2
 800c368:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	8979      	ldrh	r1, [r7, #10]
 800c370:	7a7a      	ldrb	r2, [r7, #9]
 800c372:	440a      	add	r2, r1
 800c374:	1a9a      	subs	r2, r3, r2
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d01b      	beq.n	800c3ba <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	897b      	ldrh	r3, [r7, #10]
 800c388:	441a      	add	r2, r3
 800c38a:	7a7b      	ldrb	r3, [r7, #9]
 800c38c:	441a      	add	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	429a      	cmp	r2, r3
 800c394:	d309      	bcc.n	800c3aa <CircularQueue_Remove+0x1aa>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	897b      	ldrh	r3, [r7, #10]
 800c39c:	441a      	add	r2, r3
 800c39e:	7a7b      	ldrb	r3, [r7, #9]
 800c3a0:	441a      	add	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	e005      	b.n	800c3b6 <CircularQueue_Remove+0x1b6>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68da      	ldr	r2, [r3, #12]
 800c3ae:	897b      	ldrh	r3, [r7, #10]
 800c3b0:	441a      	add	r2, r3
 800c3b2:	7a7b      	ldrb	r3, [r7, #9]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	1e5a      	subs	r2, r3, #1
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	897a      	ldrh	r2, [r7, #10]
 800c3ce:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b087      	sub	sp, #28
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	891b      	ldrh	r3, [r3, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <CircularQueue_Sense+0x1e>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e000      	b.n	800c3fe <CircularQueue_Sense+0x20>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 808e 	beq.w	800c52e <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	891b      	ldrh	r3, [r3, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d120      	bne.n	800c462 <CircularQueue_Sense+0x84>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	4413      	add	r3, r2
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	1c59      	adds	r1, r3, #1
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	4299      	cmp	r1, r3
 800c43e:	d306      	bcc.n	800c44e <CircularQueue_Sense+0x70>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	68d9      	ldr	r1, [r3, #12]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	1acb      	subs	r3, r1, r3
 800c44a:	3301      	adds	r3, #1
 800c44c:	e002      	b.n	800c454 <CircularQueue_Sense+0x76>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	3301      	adds	r3, #1
 800c454:	4413      	add	r3, r2
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	021b      	lsls	r3, r3, #8
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	4403      	add	r3, r0
 800c45e:	b29b      	uxth	r3, r3
 800c460:	e001      	b.n	800c466 <CircularQueue_Sense+0x88>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	891b      	ldrh	r3, [r3, #8]
 800c466:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	7f1b      	ldrb	r3, [r3, #28]
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d047      	beq.n	800c504 <CircularQueue_Sense+0x126>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	7f1b      	ldrb	r3, [r3, #28]
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d141      	bne.n	800c504 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c480:	8a7b      	ldrh	r3, [r7, #18]
 800c482:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c486:	4293      	cmp	r3, r2
 800c488:	d103      	bne.n	800c492 <CircularQueue_Sense+0xb4>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	891b      	ldrh	r3, [r3, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d012      	beq.n	800c4b8 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d932      	bls.n	800c504 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	891b      	ldrh	r3, [r3, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d02e      	beq.n	800c504 <CircularQueue_Sense+0x126>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	8912      	ldrh	r2, [r2, #8]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d225      	bcs.n	800c504 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	891b      	ldrh	r3, [r3, #8]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d11c      	bne.n	800c4fe <CircularQueue_Sense+0x120>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	1c59      	adds	r1, r3, #1
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	4299      	cmp	r1, r3
 800c4de:	d305      	bcc.n	800c4ec <CircularQueue_Sense+0x10e>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	68f9      	ldr	r1, [r7, #12]
 800c4e6:	1acb      	subs	r3, r1, r3
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	e001      	b.n	800c4f0 <CircularQueue_Sense+0x112>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	4403      	add	r3, r0
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	e001      	b.n	800c502 <CircularQueue_Sense+0x124>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	891b      	ldrh	r3, [r3, #8]
 800c502:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	7af9      	ldrb	r1, [r7, #11]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4419      	add	r1, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	4299      	cmp	r1, r3
 800c514:	d306      	bcc.n	800c524 <CircularQueue_Sense+0x146>
 800c516:	7af9      	ldrb	r1, [r7, #11]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4419      	add	r1, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	1acb      	subs	r3, r1, r3
 800c522:	e002      	b.n	800c52a <CircularQueue_Sense+0x14c>
 800c524:	7af9      	ldrb	r1, [r7, #11]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	440b      	add	r3, r1
 800c52a:	4413      	add	r3, r2
 800c52c:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	8a7a      	ldrh	r2, [r7, #18]
 800c538:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c53a:	697b      	ldr	r3, [r7, #20]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	371c      	adds	r7, #28
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c54c:	4b03      	ldr	r3, [pc, #12]	@ (800c55c <LL_FLASH_GetUDN+0x14>)
 800c54e:	681b      	ldr	r3, [r3, #0]
}
 800c550:	4618      	mov	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	1fff7580 	.word	0x1fff7580

0800c560 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c560:	b480      	push	{r7}
 800c562:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c564:	4b03      	ldr	r3, [pc, #12]	@ (800c574 <LL_FLASH_GetDeviceID+0x14>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	b2db      	uxtb	r3, r3
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	1fff7584 	.word	0x1fff7584

0800c578 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c578:	b480      	push	{r7}
 800c57a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c57c:	4b03      	ldr	r3, [pc, #12]	@ (800c58c <LL_FLASH_GetSTCompanyID+0x14>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	0a1b      	lsrs	r3, r3, #8
}
 800c582:	4618      	mov	r0, r3
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	1fff7584 	.word	0x1fff7584

0800c590 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c590:	b5b0      	push	{r4, r5, r7, lr}
 800c592:	b090      	sub	sp, #64	@ 0x40
 800c594:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c596:	4b3a      	ldr	r3, [pc, #232]	@ (800c680 <APP_BLE_Init+0xf0>)
 800c598:	1d3c      	adds	r4, r7, #4
 800c59a:	461d      	mov	r5, r3
 800c59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c59e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5ac:	c403      	stmia	r4!, {r0, r1}
 800c5ae:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c5b0:	f000 faa0 	bl	800caf4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	2002      	movs	r0, #2
 800c5b8:	f001 faf2 	bl	800dba0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c5bc:	4a31      	ldr	r2, [pc, #196]	@ (800c684 <APP_BLE_Init+0xf4>)
 800c5be:	2100      	movs	r1, #0
 800c5c0:	2004      	movs	r0, #4
 800c5c2:	f001 fc19 	bl	800ddf8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c5c6:	1d3b      	adds	r3, r7, #4
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fbef 	bl	800adac <SHCI_C2_BLE_Init>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (status != SHCI_Success)
 800c5d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d012      	beq.n	800c602 <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c5dc:	482a      	ldr	r0, [pc, #168]	@ (800c688 <APP_BLE_Init+0xf8>)
 800c5de:	f7ff f9f3 	bl	800b9c8 <DbgTraceGetFileName>
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	f240 1349 	movw	r3, #329	@ 0x149
 800c5e8:	4a28      	ldr	r2, [pc, #160]	@ (800c68c <APP_BLE_Init+0xfc>)
 800c5ea:	4829      	ldr	r0, [pc, #164]	@ (800c690 <APP_BLE_Init+0x100>)
 800c5ec:	f002 fa5c 	bl	800eaa8 <iprintf>
 800c5f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4827      	ldr	r0, [pc, #156]	@ (800c694 <APP_BLE_Init+0x104>)
 800c5f8:	f002 fa56 	bl	800eaa8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c5fc:	f7f6 fdc0 	bl	8003180 <Error_Handler>
 800c600:	e00c      	b.n	800c61c <APP_BLE_Init+0x8c>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c602:	4821      	ldr	r0, [pc, #132]	@ (800c688 <APP_BLE_Init+0xf8>)
 800c604:	f7ff f9e0 	bl	800b9c8 <DbgTraceGetFileName>
 800c608:	4601      	mov	r1, r0
 800c60a:	f240 134f 	movw	r3, #335	@ 0x14f
 800c60e:	4a1f      	ldr	r2, [pc, #124]	@ (800c68c <APP_BLE_Init+0xfc>)
 800c610:	481f      	ldr	r0, [pc, #124]	@ (800c690 <APP_BLE_Init+0x100>)
 800c612:	f002 fa49 	bl	800eaa8 <iprintf>
 800c616:	4820      	ldr	r0, [pc, #128]	@ (800c698 <APP_BLE_Init+0x108>)
 800c618:	f002 fa46 	bl	800eaa8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c61c:	f000 fa80 	bl	800cb20 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c620:	f7fe fb1e 	bl	800ac60 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c624:	4b1d      	ldr	r3, [pc, #116]	@ (800c69c <APP_BLE_Init+0x10c>)
 800c626:	2200      	movs	r2, #0
 800c628:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c62c:	4b1b      	ldr	r3, [pc, #108]	@ (800c69c <APP_BLE_Init+0x10c>)
 800c62e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c632:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 800c634:	4a1a      	ldr	r2, [pc, #104]	@ (800c6a0 <APP_BLE_Init+0x110>)
 800c636:	2100      	movs	r1, #0
 800c638:	2001      	movs	r0, #1
 800c63a:	f001 fbdd 	bl	800ddf8 <UTIL_SEQ_RegTask>
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800c63e:	f000 fefd 	bl	800d43c <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 800c642:	f000 ff3f 	bl	800d4c4 <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 800c646:	4b17      	ldr	r3, [pc, #92]	@ (800c6a4 <APP_BLE_Init+0x114>)
 800c648:	2200      	movs	r2, #0
 800c64a:	4917      	ldr	r1, [pc, #92]	@ (800c6a8 <APP_BLE_Init+0x118>)
 800c64c:	2000      	movs	r0, #0
 800c64e:	f7f5 fe87 	bl	8002360 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 800c652:	4b12      	ldr	r3, [pc, #72]	@ (800c69c <APP_BLE_Init+0x10c>)
 800c654:	2202      	movs	r2, #2
 800c656:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 800c658:	4b10      	ldr	r3, [pc, #64]	@ (800c69c <APP_BLE_Init+0x10c>)
 800c65a:	2201      	movs	r2, #1
 800c65c:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 800c65e:	f641 000d 	movw	r0, #6157	@ 0x180d
 800c662:	f000 fe57 	bl	800d314 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800c666:	4b11      	ldr	r3, [pc, #68]	@ (800c6ac <APP_BLE_Init+0x11c>)
 800c668:	2280      	movs	r2, #128	@ 0x80
 800c66a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800c66c:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <APP_BLE_Init+0x120>)
 800c66e:	22a0      	movs	r2, #160	@ 0xa0
 800c670:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c672:	2001      	movs	r0, #1
 800c674:	f000 fd08 	bl	800d088 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c678:	bf00      	nop
}
 800c67a:	3740      	adds	r7, #64	@ 0x40
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bdb0      	pop	{r4, r5, r7, pc}
 800c680:	080112f8 	.word	0x080112f8
 800c684:	0800afc9 	.word	0x0800afc9
 800c688:	08011268 	.word	0x08011268
 800c68c:	08011ff8 	.word	0x08011ff8
 800c690:	08011284 	.word	0x08011284
 800c694:	08011298 	.word	0x08011298
 800c698:	080112d0 	.word	0x080112d0
 800c69c:	20001610 	.word	0x20001610
 800c6a0:	0800d37d 	.word	0x0800d37d
 800c6a4:	0800d36d 	.word	0x0800d36d
 800c6a8:	20001691 	.word	0x20001691
 800c6ac:	20001694 	.word	0x20001694
 800c6b0:	20001696 	.word	0x20001696

0800c6b4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c6b4:	b5b0      	push	{r4, r5, r7, lr}
 800c6b6:	b090      	sub	sp, #64	@ 0x40
 800c6b8:	af04      	add	r7, sp, #16
 800c6ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c6bc:	2392      	movs	r3, #146	@ 0x92
 800c6be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800c6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2bff      	cmp	r3, #255	@ 0xff
 800c6ce:	f000 81c3 	beq.w	800ca58 <SVCCTL_App_Notification+0x3a4>
 800c6d2:	2bff      	cmp	r3, #255	@ 0xff
 800c6d4:	f300 81f1 	bgt.w	800caba <SVCCTL_App_Notification+0x406>
 800c6d8:	2b05      	cmp	r3, #5
 800c6da:	d002      	beq.n	800c6e2 <SVCCTL_App_Notification+0x2e>
 800c6dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6de:	d03d      	beq.n	800c75c <SVCCTL_App_Notification+0xa8>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c6e0:	e1eb      	b.n	800caba <SVCCTL_App_Notification+0x406>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e4:	3302      	adds	r3, #2
 800c6e6:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	4b84      	ldr	r3, [pc, #528]	@ (800c904 <SVCCTL_App_Notification+0x250>)
 800c6f2:	8adb      	ldrh	r3, [r3, #22]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d128      	bne.n	800c74a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c6f8:	4b82      	ldr	r3, [pc, #520]	@ (800c904 <SVCCTL_App_Notification+0x250>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c6fe:	4b81      	ldr	r3, [pc, #516]	@ (800c904 <SVCCTL_App_Notification+0x250>)
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c706:	4880      	ldr	r0, [pc, #512]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c708:	f7ff f95e 	bl	800b9c8 <DbgTraceGetFileName>
 800c70c:	4601      	mov	r1, r0
 800c70e:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 800c712:	4a7e      	ldr	r2, [pc, #504]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c714:	487e      	ldr	r0, [pc, #504]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c716:	f002 f9c7 	bl	800eaa8 <iprintf>
 800c71a:	487e      	ldr	r0, [pc, #504]	@ (800c914 <SVCCTL_App_Notification+0x260>)
 800c71c:	f002 fa2c 	bl	800eb78 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c720:	4879      	ldr	r0, [pc, #484]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c722:	f7ff f951 	bl	800b9c8 <DbgTraceGetFileName>
 800c726:	4601      	mov	r1, r0
 800c728:	f240 13b7 	movw	r3, #439	@ 0x1b7
 800c72c:	4a77      	ldr	r2, [pc, #476]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c72e:	4878      	ldr	r0, [pc, #480]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c730:	f002 f9ba 	bl	800eaa8 <iprintf>
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	78db      	ldrb	r3, [r3, #3]
 800c742:	461a      	mov	r2, r3
 800c744:	4874      	ldr	r0, [pc, #464]	@ (800c918 <SVCCTL_App_Notification+0x264>)
 800c746:	f002 f9af 	bl	800eaa8 <iprintf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800c74a:	2201      	movs	r2, #1
 800c74c:	2180      	movs	r1, #128	@ 0x80
 800c74e:	4873      	ldr	r0, [pc, #460]	@ (800c91c <SVCCTL_App_Notification+0x268>)
 800c750:	f7f7 ffae 	bl	80046b0 <HAL_GPIO_WritePin>
      Adv_Request(APP_BLE_FAST_ADV);
 800c754:	2001      	movs	r0, #1
 800c756:	f000 fc97 	bl	800d088 <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c75a:	e1af      	b.n	800cabc <SVCCTL_App_Notification+0x408>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	3302      	adds	r3, #2
 800c760:	623b      	str	r3, [r7, #32]
      switch (p_meta_evt->subevent)
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b0c      	cmp	r3, #12
 800c768:	d048      	beq.n	800c7fc <SVCCTL_App_Notification+0x148>
 800c76a:	2b0c      	cmp	r3, #12
 800c76c:	f300 8172 	bgt.w	800ca54 <SVCCTL_App_Notification+0x3a0>
 800c770:	2b01      	cmp	r3, #1
 800c772:	f000 80e7 	beq.w	800c944 <SVCCTL_App_Notification+0x290>
 800c776:	2b03      	cmp	r3, #3
 800c778:	f040 816c 	bne.w	800ca54 <SVCCTL_App_Notification+0x3a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	3301      	adds	r3, #1
 800c780:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800c782:	4861      	ldr	r0, [pc, #388]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c784:	f7ff f920 	bl	800b9c8 <DbgTraceGetFileName>
 800c788:	4601      	mov	r1, r0
 800c78a:	f44f 73ec 	mov.w	r3, #472	@ 0x1d8
 800c78e:	4a5f      	ldr	r2, [pc, #380]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c790:	485f      	ldr	r0, [pc, #380]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c792:	f002 f989 	bl	800eaa8 <iprintf>
 800c796:	4862      	ldr	r0, [pc, #392]	@ (800c920 <SVCCTL_App_Notification+0x26c>)
 800c798:	f002 f9ee 	bl	800eb78 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c79c:	485a      	ldr	r0, [pc, #360]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c79e:	f7ff f913 	bl	800b9c8 <DbgTraceGetFileName>
 800c7a2:	4601      	mov	r1, r0
 800c7a4:	f240 13d9 	movw	r3, #473	@ 0x1d9
 800c7a8:	4a58      	ldr	r2, [pc, #352]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c7aa:	4859      	ldr	r0, [pc, #356]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c7ac:	f002 f97c 	bl	800eaa8 <iprintf>
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f3 fe8b 	bl	80004d4 <__aeabi_i2d>
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	4b58      	ldr	r3, [pc, #352]	@ (800c924 <SVCCTL_App_Notification+0x270>)
 800c7c4:	f7f3 fef0 	bl	80005a8 <__aeabi_dmul>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	461c      	mov	r4, r3
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	9400      	str	r4, [sp, #0]
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	484c      	ldr	r0, [pc, #304]	@ (800c928 <SVCCTL_App_Notification+0x274>)
 800c7f6:	f002 f957 	bl	800eaa8 <iprintf>
          break;
 800c7fa:	e12c      	b.n	800ca56 <SVCCTL_App_Notification+0x3a2>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	3301      	adds	r3, #1
 800c800:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800c802:	4841      	ldr	r0, [pc, #260]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c804:	f7ff f8e0 	bl	800b9c8 <DbgTraceGetFileName>
 800c808:	4601      	mov	r1, r0
 800c80a:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 800c80e:	4a3f      	ldr	r2, [pc, #252]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c810:	483f      	ldr	r0, [pc, #252]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c812:	f002 f949 	bl	800eaa8 <iprintf>
 800c816:	4845      	ldr	r0, [pc, #276]	@ (800c92c <SVCCTL_App_Notification+0x278>)
 800c818:	f002 f946 	bl	800eaa8 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10d      	bne.n	800c840 <SVCCTL_App_Notification+0x18c>
            APP_DBG_MSG("status ok \n");
 800c824:	4838      	ldr	r0, [pc, #224]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c826:	f7ff f8cf 	bl	800b9c8 <DbgTraceGetFileName>
 800c82a:	4601      	mov	r1, r0
 800c82c:	f240 13e9 	movw	r3, #489	@ 0x1e9
 800c830:	4a36      	ldr	r2, [pc, #216]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c832:	4837      	ldr	r0, [pc, #220]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c834:	f002 f938 	bl	800eaa8 <iprintf>
 800c838:	483d      	ldr	r0, [pc, #244]	@ (800c930 <SVCCTL_App_Notification+0x27c>)
 800c83a:	f002 f99d 	bl	800eb78 <puts>
 800c83e:	e00c      	b.n	800c85a <SVCCTL_App_Notification+0x1a6>
            APP_DBG_MSG("status nok \n");
 800c840:	4831      	ldr	r0, [pc, #196]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c842:	f7ff f8c1 	bl	800b9c8 <DbgTraceGetFileName>
 800c846:	4601      	mov	r1, r0
 800c848:	f240 13ed 	movw	r3, #493	@ 0x1ed
 800c84c:	4a2f      	ldr	r2, [pc, #188]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c84e:	4830      	ldr	r0, [pc, #192]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c850:	f002 f92a 	bl	800eaa8 <iprintf>
 800c854:	4837      	ldr	r0, [pc, #220]	@ (800c934 <SVCCTL_App_Notification+0x280>)
 800c856:	f002 f98f 	bl	800eb78 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800c85a:	4b2a      	ldr	r3, [pc, #168]	@ (800c904 <SVCCTL_App_Notification+0x250>)
 800c85c:	8adb      	ldrh	r3, [r3, #22]
 800c85e:	f107 020e 	add.w	r2, r7, #14
 800c862:	f107 010f 	add.w	r1, r7, #15
 800c866:	4618      	mov	r0, r3
 800c868:	f7fd fddb 	bl	800a422 <hci_le_read_phy>
 800c86c:	4603      	mov	r3, r0
 800c86e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800c872:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00d      	beq.n	800c896 <SVCCTL_App_Notification+0x1e2>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800c87a:	4823      	ldr	r0, [pc, #140]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c87c:	f7ff f8a4 	bl	800b9c8 <DbgTraceGetFileName>
 800c880:	4601      	mov	r1, r0
 800c882:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800c886:	4a21      	ldr	r2, [pc, #132]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c888:	4821      	ldr	r0, [pc, #132]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c88a:	f002 f90d 	bl	800eaa8 <iprintf>
 800c88e:	482a      	ldr	r0, [pc, #168]	@ (800c938 <SVCCTL_App_Notification+0x284>)
 800c890:	f002 f90a 	bl	800eaa8 <iprintf>
          break;
 800c894:	e0df      	b.n	800ca56 <SVCCTL_App_Notification+0x3a2>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800c896:	481c      	ldr	r0, [pc, #112]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c898:	f7ff f896 	bl	800b9c8 <DbgTraceGetFileName>
 800c89c:	4601      	mov	r1, r0
 800c89e:	f240 13f7 	movw	r3, #503	@ 0x1f7
 800c8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c8a4:	481a      	ldr	r0, [pc, #104]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c8a6:	f002 f8ff 	bl	800eaa8 <iprintf>
 800c8aa:	4824      	ldr	r0, [pc, #144]	@ (800c93c <SVCCTL_App_Notification+0x288>)
 800c8ac:	f002 f964 	bl	800eb78 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d114      	bne.n	800c8e0 <SVCCTL_App_Notification+0x22c>
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d111      	bne.n	800c8e0 <SVCCTL_App_Notification+0x22c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800c8bc:	4812      	ldr	r0, [pc, #72]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c8be:	f7ff f883 	bl	800b9c8 <DbgTraceGetFileName>
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	f240 13fb 	movw	r3, #507	@ 0x1fb
 800c8c8:	4a10      	ldr	r2, [pc, #64]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c8ca:	4811      	ldr	r0, [pc, #68]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c8cc:	f002 f8ec 	bl	800eaa8 <iprintf>
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4819      	ldr	r0, [pc, #100]	@ (800c940 <SVCCTL_App_Notification+0x28c>)
 800c8da:	f002 f8e5 	bl	800eaa8 <iprintf>
          break;
 800c8de:	e0ba      	b.n	800ca56 <SVCCTL_App_Notification+0x3a2>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800c8e0:	4809      	ldr	r0, [pc, #36]	@ (800c908 <SVCCTL_App_Notification+0x254>)
 800c8e2:	f7ff f871 	bl	800b9c8 <DbgTraceGetFileName>
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800c8ec:	4a07      	ldr	r2, [pc, #28]	@ (800c90c <SVCCTL_App_Notification+0x258>)
 800c8ee:	4808      	ldr	r0, [pc, #32]	@ (800c910 <SVCCTL_App_Notification+0x25c>)
 800c8f0:	f002 f8da 	bl	800eaa8 <iprintf>
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	7bbb      	ldrb	r3, [r7, #14]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	4810      	ldr	r0, [pc, #64]	@ (800c940 <SVCCTL_App_Notification+0x28c>)
 800c8fe:	f002 f8d3 	bl	800eaa8 <iprintf>
          break;
 800c902:	e0a8      	b.n	800ca56 <SVCCTL_App_Notification+0x3a2>
 800c904:	20001610 	.word	0x20001610
 800c908:	08011268 	.word	0x08011268
 800c90c:	08012008 	.word	0x08012008
 800c910:	08011284 	.word	0x08011284
 800c914:	08011334 	.word	0x08011334
 800c918:	08011360 	.word	0x08011360
 800c91c:	48000c00 	.word	0x48000c00
 800c920:	0801139c 	.word	0x0801139c
 800c924:	3ff40000 	.word	0x3ff40000
 800c928:	080113d0 	.word	0x080113d0
 800c92c:	0801143c 	.word	0x0801143c
 800c930:	0801146c 	.word	0x0801146c
 800c934:	08011478 	.word	0x08011478
 800c938:	08011484 	.word	0x08011484
 800c93c:	080114a4 	.word	0x080114a4
 800c940:	080114c4 	.word	0x080114c4
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	3301      	adds	r3, #1
 800c948:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c94a:	4b5f      	ldr	r3, [pc, #380]	@ (800cac8 <SVCCTL_App_Notification+0x414>)
 800c94c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c950:	4618      	mov	r0, r3
 800c952:	f7f5 fd7f 	bl	8002454 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800c956:	485d      	ldr	r0, [pc, #372]	@ (800cacc <SVCCTL_App_Notification+0x418>)
 800c958:	f7ff f836 	bl	800b9c8 <DbgTraceGetFileName>
 800c95c:	4601      	mov	r1, r0
 800c95e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800c962:	4a5b      	ldr	r2, [pc, #364]	@ (800cad0 <SVCCTL_App_Notification+0x41c>)
 800c964:	485b      	ldr	r0, [pc, #364]	@ (800cad4 <SVCCTL_App_Notification+0x420>)
 800c966:	f002 f89f 	bl	800eaa8 <iprintf>
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c970:	b29b      	uxth	r3, r3
 800c972:	4619      	mov	r1, r3
 800c974:	4858      	ldr	r0, [pc, #352]	@ (800cad8 <SVCCTL_App_Notification+0x424>)
 800c976:	f002 f897 	bl	800eaa8 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c97a:	4854      	ldr	r0, [pc, #336]	@ (800cacc <SVCCTL_App_Notification+0x418>)
 800c97c:	f7ff f824 	bl	800b9c8 <DbgTraceGetFileName>
 800c980:	4601      	mov	r1, r0
 800c982:	f240 2311 	movw	r3, #529	@ 0x211
 800c986:	4a52      	ldr	r2, [pc, #328]	@ (800cad0 <SVCCTL_App_Notification+0x41c>)
 800c988:	4852      	ldr	r0, [pc, #328]	@ (800cad4 <SVCCTL_App_Notification+0x420>)
 800c98a:	f002 f88d 	bl	800eaa8 <iprintf>
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	7a9b      	ldrb	r3, [r3, #10]
 800c992:	4618      	mov	r0, r3
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	7a5b      	ldrb	r3, [r3, #9]
 800c998:	461c      	mov	r4, r3
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	7a1b      	ldrb	r3, [r3, #8]
 800c99e:	461d      	mov	r5, r3
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	79db      	ldrb	r3, [r3, #7]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	799b      	ldrb	r3, [r3, #6]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	795b      	ldrb	r3, [r3, #5]
 800c9b0:	9302      	str	r3, [sp, #8]
 800c9b2:	9101      	str	r1, [sp, #4]
 800c9b4:	9200      	str	r2, [sp, #0]
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	4847      	ldr	r0, [pc, #284]	@ (800cadc <SVCCTL_App_Notification+0x428>)
 800c9be:	f002 f873 	bl	800eaa8 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c9c2:	4842      	ldr	r0, [pc, #264]	@ (800cacc <SVCCTL_App_Notification+0x418>)
 800c9c4:	f7ff f800 	bl	800b9c8 <DbgTraceGetFileName>
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800c9ce:	4a40      	ldr	r2, [pc, #256]	@ (800cad0 <SVCCTL_App_Notification+0x41c>)
 800c9d0:	4840      	ldr	r0, [pc, #256]	@ (800cad4 <SVCCTL_App_Notification+0x420>)
 800c9d2:	f002 f869 	bl	800eaa8 <iprintf>
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fd78 	bl	80004d4 <__aeabi_i2d>
 800c9e4:	f04f 0200 	mov.w	r2, #0
 800c9e8:	4b3d      	ldr	r3, [pc, #244]	@ (800cae0 <SVCCTL_App_Notification+0x42c>)
 800c9ea:	f7f3 fddd 	bl	80005a8 <__aeabi_dmul>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	461c      	mov	r4, r3
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	461a      	mov	r2, r3
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	9400      	str	r4, [sp, #0]
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4832      	ldr	r0, [pc, #200]	@ (800cae4 <SVCCTL_App_Notification+0x430>)
 800ca1c:	f002 f844 	bl	800eaa8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ca20:	4b29      	ldr	r3, [pc, #164]	@ (800cac8 <SVCCTL_App_Notification+0x414>)
 800ca22:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d104      	bne.n	800ca34 <SVCCTL_App_Notification+0x380>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ca2a:	4b27      	ldr	r3, [pc, #156]	@ (800cac8 <SVCCTL_App_Notification+0x414>)
 800ca2c:	2206      	movs	r2, #6
 800ca2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800ca32:	e003      	b.n	800ca3c <SVCCTL_App_Notification+0x388>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ca34:	4b24      	ldr	r3, [pc, #144]	@ (800cac8 <SVCCTL_App_Notification+0x414>)
 800ca36:	2205      	movs	r2, #5
 800ca38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	4b20      	ldr	r3, [pc, #128]	@ (800cac8 <SVCCTL_App_Notification+0x414>)
 800ca46:	82da      	strh	r2, [r3, #22]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2180      	movs	r1, #128	@ 0x80
 800ca4c:	4826      	ldr	r0, [pc, #152]	@ (800cae8 <SVCCTL_App_Notification+0x434>)
 800ca4e:	f7f7 fe2f 	bl	80046b0 <HAL_GPIO_WritePin>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ca52:	e000      	b.n	800ca56 <SVCCTL_App_Notification+0x3a2>
          break;
 800ca54:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ca56:	e031      	b.n	800cabc <SVCCTL_App_Notification+0x408>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800ca58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	f240 4207 	movw	r2, #1031	@ 0x407
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d004      	beq.n	800ca76 <SVCCTL_App_Notification+0x3c2>
 800ca6c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d00e      	beq.n	800ca92 <SVCCTL_App_Notification+0x3de>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ca74:	e022      	b.n	800cabc <SVCCTL_App_Notification+0x408>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ca76:	4815      	ldr	r0, [pc, #84]	@ (800cacc <SVCCTL_App_Notification+0x418>)
 800ca78:	f7fe ffa6 	bl	800b9c8 <DbgTraceGetFileName>
 800ca7c:	4601      	mov	r1, r0
 800ca7e:	f44f 7312 	mov.w	r3, #584	@ 0x248
 800ca82:	4a13      	ldr	r2, [pc, #76]	@ (800cad0 <SVCCTL_App_Notification+0x41c>)
 800ca84:	4813      	ldr	r0, [pc, #76]	@ (800cad4 <SVCCTL_App_Notification+0x420>)
 800ca86:	f002 f80f 	bl	800eaa8 <iprintf>
 800ca8a:	4818      	ldr	r0, [pc, #96]	@ (800caec <SVCCTL_App_Notification+0x438>)
 800ca8c:	f002 f80c 	bl	800eaa8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ca90:	e012      	b.n	800cab8 <SVCCTL_App_Notification+0x404>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800ca92:	480e      	ldr	r0, [pc, #56]	@ (800cacc <SVCCTL_App_Notification+0x418>)
 800ca94:	f7fe ff98 	bl	800b9c8 <DbgTraceGetFileName>
 800ca98:	4601      	mov	r1, r0
 800ca9a:	f44f 7314 	mov.w	r3, #592	@ 0x250
 800ca9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cad0 <SVCCTL_App_Notification+0x41c>)
 800caa0:	480c      	ldr	r0, [pc, #48]	@ (800cad4 <SVCCTL_App_Notification+0x420>)
 800caa2:	f002 f801 	bl	800eaa8 <iprintf>
 800caa6:	4812      	ldr	r0, [pc, #72]	@ (800caf0 <SVCCTL_App_Notification+0x43c>)
 800caa8:	f001 fffe 	bl	800eaa8 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800caac:	4b06      	ldr	r3, [pc, #24]	@ (800cac8 <SVCCTL_App_Notification+0x414>)
 800caae:	8adb      	ldrh	r3, [r3, #22]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fd faa4 	bl	8009ffe <aci_gatt_confirm_indication>
        break;
 800cab6:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cab8:	e000      	b.n	800cabc <SVCCTL_App_Notification+0x408>
      break;
 800caba:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cabc:	2301      	movs	r3, #1
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3730      	adds	r7, #48	@ 0x30
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bdb0      	pop	{r4, r5, r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20001610 	.word	0x20001610
 800cacc:	08011268 	.word	0x08011268
 800cad0:	08012008 	.word	0x08012008
 800cad4:	08011284 	.word	0x08011284
 800cad8:	080114e8 	.word	0x080114e8
 800cadc:	08011530 	.word	0x08011530
 800cae0:	3ff40000 	.word	0x3ff40000
 800cae4:	080113d0 	.word	0x080113d0
 800cae8:	48000c00 	.word	0x48000c00
 800caec:	08011580 	.word	0x08011580
 800caf0:	080115a8 	.word	0x080115a8

0800caf4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cafa:	4b06      	ldr	r3, [pc, #24]	@ (800cb14 <Ble_Tl_Init+0x20>)
 800cafc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cafe:	4b06      	ldr	r3, [pc, #24]	@ (800cb18 <Ble_Tl_Init+0x24>)
 800cb00:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb02:	463b      	mov	r3, r7
 800cb04:	4619      	mov	r1, r3
 800cb06:	4805      	ldr	r0, [pc, #20]	@ (800cb1c <Ble_Tl_Init+0x28>)
 800cb08:	f7fe fa42 	bl	800af90 <hci_init>

  return;
 800cb0c:	bf00      	nop
}
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	200300d8 	.word	0x200300d8
 800cb18:	0800d407 	.word	0x0800d407
 800cb1c:	0800d3cf 	.word	0x0800d3cf

0800cb20 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800cb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb22:	b08d      	sub	sp, #52	@ 0x34
 800cb24:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800cb26:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800cb2a:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cb2c:	2392      	movs	r3, #146	@ 0x92
 800cb2e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800cb30:	48b1      	ldr	r0, [pc, #708]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cb32:	f7fe ff49 	bl	800b9c8 <DbgTraceGetFileName>
 800cb36:	4601      	mov	r1, r0
 800cb38:	f240 238d 	movw	r3, #653	@ 0x28d
 800cb3c:	4aaf      	ldr	r2, [pc, #700]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cb3e:	48b0      	ldr	r0, [pc, #704]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cb40:	f001 ffb2 	bl	800eaa8 <iprintf>
 800cb44:	48af      	ldr	r0, [pc, #700]	@ (800ce04 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800cb46:	f002 f817 	bl	800eb78 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800cb4a:	f7fd fc46 	bl	800a3da <hci_reset>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00f      	beq.n	800cb78 <Ble_Hci_Gap_Gatt_Init+0x58>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800cb58:	48a7      	ldr	r0, [pc, #668]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cb5a:	f7fe ff35 	bl	800b9c8 <DbgTraceGetFileName>
 800cb5e:	4601      	mov	r1, r0
 800cb60:	f240 2396 	movw	r3, #662	@ 0x296
 800cb64:	4aa5      	ldr	r2, [pc, #660]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cb66:	48a6      	ldr	r0, [pc, #664]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cb68:	f001 ff9e 	bl	800eaa8 <iprintf>
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	48a5      	ldr	r0, [pc, #660]	@ (800ce08 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800cb72:	f001 ff99 	bl	800eaa8 <iprintf>
 800cb76:	e00c      	b.n	800cb92 <Ble_Hci_Gap_Gatt_Init+0x72>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800cb78:	489f      	ldr	r0, [pc, #636]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cb7a:	f7fe ff25 	bl	800b9c8 <DbgTraceGetFileName>
 800cb7e:	4601      	mov	r1, r0
 800cb80:	f240 239a 	movw	r3, #666	@ 0x29a
 800cb84:	4a9d      	ldr	r2, [pc, #628]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cb86:	489e      	ldr	r0, [pc, #632]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cb88:	f001 ff8e 	bl	800eaa8 <iprintf>
 800cb8c:	489f      	ldr	r0, [pc, #636]	@ (800ce0c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800cb8e:	f001 fff3 	bl	800eb78 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800cb92:	f000 fb7b 	bl	800d28c <BleGetBdAddress>
 800cb96:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	2106      	movs	r1, #6
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f7fd fb30 	bl	800a202 <aci_hal_write_config_data>
 800cba2:	4603      	mov	r3, r0
 800cba4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00f      	beq.n	800cbcc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800cbac:	4892      	ldr	r0, [pc, #584]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cbae:	f7fe ff0b 	bl	800b9c8 <DbgTraceGetFileName>
 800cbb2:	4601      	mov	r1, r0
 800cbb4:	f44f 7329 	mov.w	r3, #676	@ 0x2a4
 800cbb8:	4a90      	ldr	r2, [pc, #576]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cbba:	4891      	ldr	r0, [pc, #580]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cbbc:	f001 ff74 	bl	800eaa8 <iprintf>
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4892      	ldr	r0, [pc, #584]	@ (800ce10 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800cbc6:	f001 ff6f 	bl	800eaa8 <iprintf>
 800cbca:	e035      	b.n	800cc38 <Ble_Hci_Gap_Gatt_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800cbcc:	488a      	ldr	r0, [pc, #552]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cbce:	f7fe fefb 	bl	800b9c8 <DbgTraceGetFileName>
 800cbd2:	4601      	mov	r1, r0
 800cbd4:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800cbd8:	4a88      	ldr	r2, [pc, #544]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cbda:	4889      	ldr	r0, [pc, #548]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cbdc:	f001 ff64 	bl	800eaa8 <iprintf>
 800cbe0:	488c      	ldr	r0, [pc, #560]	@ (800ce14 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800cbe2:	f001 ffc9 	bl	800eb78 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800cbe6:	4884      	ldr	r0, [pc, #528]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cbe8:	f7fe feee 	bl	800b9c8 <DbgTraceGetFileName>
 800cbec:	4601      	mov	r1, r0
 800cbee:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800cbf2:	4a82      	ldr	r2, [pc, #520]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cbf4:	4882      	ldr	r0, [pc, #520]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cbf6:	f001 ff57 	bl	800eaa8 <iprintf>
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	3305      	adds	r3, #5
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	4618      	mov	r0, r3
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	3304      	adds	r3, #4
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	461c      	mov	r4, r3
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	3303      	adds	r3, #3
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	461d      	mov	r5, r3
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	3302      	adds	r3, #2
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	4619      	mov	r1, r3
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	9302      	str	r3, [sp, #8]
 800cc28:	9101      	str	r1, [sp, #4]
 800cc2a:	9200      	str	r2, [sp, #0]
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4601      	mov	r1, r0
 800cc32:	4879      	ldr	r0, [pc, #484]	@ (800ce18 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cc34:	f001 ff38 	bl	800eaa8 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	3305      	adds	r3, #5
 800cc3c:	781a      	ldrb	r2, [r3, #0]
 800cc3e:	4b77      	ldr	r3, [pc, #476]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cc40:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	3304      	adds	r3, #4
 800cc46:	781a      	ldrb	r2, [r3, #0]
 800cc48:	4b74      	ldr	r3, [pc, #464]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cc4a:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	3303      	adds	r3, #3
 800cc50:	781a      	ldrb	r2, [r3, #0]
 800cc52:	4b72      	ldr	r3, [pc, #456]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cc54:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	3302      	adds	r3, #2
 800cc5a:	781a      	ldrb	r2, [r3, #0]
 800cc5c:	4b6f      	ldr	r3, [pc, #444]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cc5e:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	3301      	adds	r3, #1
 800cc64:	781a      	ldrb	r2, [r3, #0]
 800cc66:	4b6d      	ldr	r3, [pc, #436]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cc68:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	781a      	ldrb	r2, [r3, #0]
 800cc6e:	4b6b      	ldr	r3, [pc, #428]	@ (800ce1c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cc70:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800cc72:	4a6b      	ldr	r2, [pc, #428]	@ (800ce20 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800cc74:	2110      	movs	r1, #16
 800cc76:	2018      	movs	r0, #24
 800cc78:	f7fd fac3 	bl	800a202 <aci_hal_write_config_data>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00f      	beq.n	800cca6 <Ble_Hci_Gap_Gatt_Init+0x186>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800cc86:	485c      	ldr	r0, [pc, #368]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cc88:	f7fe fe9e 	bl	800b9c8 <DbgTraceGetFileName>
 800cc8c:	4601      	mov	r1, r0
 800cc8e:	f44f 7341 	mov.w	r3, #772	@ 0x304
 800cc92:	4a5a      	ldr	r2, [pc, #360]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cc94:	485a      	ldr	r0, [pc, #360]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cc96:	f001 ff07 	bl	800eaa8 <iprintf>
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4861      	ldr	r0, [pc, #388]	@ (800ce24 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800cca0:	f001 ff02 	bl	800eaa8 <iprintf>
 800cca4:	e00c      	b.n	800ccc0 <Ble_Hci_Gap_Gatt_Init+0x1a0>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800cca6:	4854      	ldr	r0, [pc, #336]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cca8:	f7fe fe8e 	bl	800b9c8 <DbgTraceGetFileName>
 800ccac:	4601      	mov	r1, r0
 800ccae:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800ccb2:	4a52      	ldr	r2, [pc, #328]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800ccb4:	4852      	ldr	r0, [pc, #328]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800ccb6:	f001 fef7 	bl	800eaa8 <iprintf>
 800ccba:	485b      	ldr	r0, [pc, #364]	@ (800ce28 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800ccbc:	f001 ff5c 	bl	800eb78 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ccc0:	4a5a      	ldr	r2, [pc, #360]	@ (800ce2c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800ccc2:	2110      	movs	r1, #16
 800ccc4:	2008      	movs	r0, #8
 800ccc6:	f7fd fa9c 	bl	800a202 <aci_hal_write_config_data>
 800ccca:	4603      	mov	r3, r0
 800cccc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00f      	beq.n	800ccf4 <Ble_Hci_Gap_Gatt_Init+0x1d4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800ccd4:	4848      	ldr	r0, [pc, #288]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ccd6:	f7fe fe77 	bl	800b9c8 <DbgTraceGetFileName>
 800ccda:	4601      	mov	r1, r0
 800ccdc:	f240 3311 	movw	r3, #785	@ 0x311
 800cce0:	4a46      	ldr	r2, [pc, #280]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cce2:	4847      	ldr	r0, [pc, #284]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cce4:	f001 fee0 	bl	800eaa8 <iprintf>
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	4619      	mov	r1, r3
 800ccec:	4850      	ldr	r0, [pc, #320]	@ (800ce30 <Ble_Hci_Gap_Gatt_Init+0x310>)
 800ccee:	f001 fedb 	bl	800eaa8 <iprintf>
 800ccf2:	e00c      	b.n	800cd0e <Ble_Hci_Gap_Gatt_Init+0x1ee>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800ccf4:	4840      	ldr	r0, [pc, #256]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ccf6:	f7fe fe67 	bl	800b9c8 <DbgTraceGetFileName>
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	f240 3315 	movw	r3, #789	@ 0x315
 800cd00:	4a3e      	ldr	r2, [pc, #248]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd02:	483f      	ldr	r0, [pc, #252]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd04:	f001 fed0 	bl	800eaa8 <iprintf>
 800cd08:	484a      	ldr	r0, [pc, #296]	@ (800ce34 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800cd0a:	f001 ff35 	bl	800eb78 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cd0e:	2118      	movs	r1, #24
 800cd10:	2001      	movs	r0, #1
 800cd12:	f7fd fafb 	bl	800a30c <aci_hal_set_tx_power_level>
 800cd16:	4603      	mov	r3, r0
 800cd18:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00f      	beq.n	800cd40 <Ble_Hci_Gap_Gatt_Init+0x220>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800cd20:	4835      	ldr	r0, [pc, #212]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cd22:	f7fe fe51 	bl	800b9c8 <DbgTraceGetFileName>
 800cd26:	4601      	mov	r1, r0
 800cd28:	f240 331e 	movw	r3, #798	@ 0x31e
 800cd2c:	4a33      	ldr	r2, [pc, #204]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd2e:	4834      	ldr	r0, [pc, #208]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd30:	f001 feba 	bl	800eaa8 <iprintf>
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	4619      	mov	r1, r3
 800cd38:	483f      	ldr	r0, [pc, #252]	@ (800ce38 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800cd3a:	f001 feb5 	bl	800eaa8 <iprintf>
 800cd3e:	e00c      	b.n	800cd5a <Ble_Hci_Gap_Gatt_Init+0x23a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800cd40:	482d      	ldr	r0, [pc, #180]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cd42:	f7fe fe41 	bl	800b9c8 <DbgTraceGetFileName>
 800cd46:	4601      	mov	r1, r0
 800cd48:	f240 3322 	movw	r3, #802	@ 0x322
 800cd4c:	4a2b      	ldr	r2, [pc, #172]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd4e:	482c      	ldr	r0, [pc, #176]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd50:	f001 feaa 	bl	800eaa8 <iprintf>
 800cd54:	4839      	ldr	r0, [pc, #228]	@ (800ce3c <Ble_Hci_Gap_Gatt_Init+0x31c>)
 800cd56:	f001 ff0f 	bl	800eb78 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800cd5a:	f7fc fea4 	bl	8009aa6 <aci_gatt_init>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00f      	beq.n	800cd88 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800cd68:	4823      	ldr	r0, [pc, #140]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cd6a:	f7fe fe2d 	bl	800b9c8 <DbgTraceGetFileName>
 800cd6e:	4601      	mov	r1, r0
 800cd70:	f240 332b 	movw	r3, #811	@ 0x32b
 800cd74:	4a21      	ldr	r2, [pc, #132]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd76:	4822      	ldr	r0, [pc, #136]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd78:	f001 fe96 	bl	800eaa8 <iprintf>
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	482f      	ldr	r0, [pc, #188]	@ (800ce40 <Ble_Hci_Gap_Gatt_Init+0x320>)
 800cd82:	f001 fe91 	bl	800eaa8 <iprintf>
 800cd86:	e00c      	b.n	800cda2 <Ble_Hci_Gap_Gatt_Init+0x282>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800cd88:	481b      	ldr	r0, [pc, #108]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cd8a:	f7fe fe1d 	bl	800b9c8 <DbgTraceGetFileName>
 800cd8e:	4601      	mov	r1, r0
 800cd90:	f240 332f 	movw	r3, #815	@ 0x32f
 800cd94:	4a19      	ldr	r2, [pc, #100]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd96:	481a      	ldr	r0, [pc, #104]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd98:	f001 fe86 	bl	800eaa8 <iprintf>
 800cd9c:	4829      	ldr	r0, [pc, #164]	@ (800ce44 <Ble_Hci_Gap_Gatt_Init+0x324>)
 800cd9e:	f001 feeb 	bl	800eb78 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	f043 0301 	orr.w	r3, r3, #1
 800cdac:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d06b      	beq.n	800ce8c <Ble_Hci_Gap_Gatt_Init+0x36c>
  {
    const char *name = "IMSS";
 800cdb4:	4b24      	ldr	r3, [pc, #144]	@ (800ce48 <Ble_Hci_Gap_Gatt_Init+0x328>)
 800cdb6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800cdb8:	1dba      	adds	r2, r7, #6
 800cdba:	7bf8      	ldrb	r0, [r7, #15]
 800cdbc:	1cbb      	adds	r3, r7, #2
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	1d3b      	adds	r3, r7, #4
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	2207      	movs	r2, #7
 800cdc8:	2100      	movs	r1, #0
 800cdca:	f7fc fd29 	bl	8009820 <aci_gap_init>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d03b      	beq.n	800ce50 <Ble_Hci_Gap_Gatt_Init+0x330>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800cdd8:	4807      	ldr	r0, [pc, #28]	@ (800cdf8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cdda:	f7fe fdf5 	bl	800b9c8 <DbgTraceGetFileName>
 800cdde:	4601      	mov	r1, r0
 800cde0:	f240 334f 	movw	r3, #847	@ 0x34f
 800cde4:	4a05      	ldr	r2, [pc, #20]	@ (800cdfc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cde6:	4806      	ldr	r0, [pc, #24]	@ (800ce00 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cde8:	f001 fe5e 	bl	800eaa8 <iprintf>
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	4816      	ldr	r0, [pc, #88]	@ (800ce4c <Ble_Hci_Gap_Gatt_Init+0x32c>)
 800cdf2:	f001 fe59 	bl	800eaa8 <iprintf>
 800cdf6:	e038      	b.n	800ce6a <Ble_Hci_Gap_Gatt_Init+0x34a>
 800cdf8:	08011268 	.word	0x08011268
 800cdfc:	08012020 	.word	0x08012020
 800ce00:	08011284 	.word	0x08011284
 800ce04:	080115d0 	.word	0x080115d0
 800ce08:	080115fc 	.word	0x080115fc
 800ce0c:	0801162c 	.word	0x0801162c
 800ce10:	0801164c 	.word	0x0801164c
 800ce14:	080116a8 	.word	0x080116a8
 800ce18:	080116f4 	.word	0x080116f4
 800ce1c:	20000018 	.word	0x20000018
 800ce20:	08011fd0 	.word	0x08011fd0
 800ce24:	08011730 	.word	0x08011730
 800ce28:	08011788 	.word	0x08011788
 800ce2c:	08011fe0 	.word	0x08011fe0
 800ce30:	080117d0 	.word	0x080117d0
 800ce34:	08011828 	.word	0x08011828
 800ce38:	08011870 	.word	0x08011870
 800ce3c:	080118b0 	.word	0x080118b0
 800ce40:	080118e0 	.word	0x080118e0
 800ce44:	08011914 	.word	0x08011914
 800ce48:	08011938 	.word	0x08011938
 800ce4c:	08011940 	.word	0x08011940
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800ce50:	487e      	ldr	r0, [pc, #504]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800ce52:	f7fe fdb9 	bl	800b9c8 <DbgTraceGetFileName>
 800ce56:	4601      	mov	r1, r0
 800ce58:	f240 3353 	movw	r3, #851	@ 0x353
 800ce5c:	4a7c      	ldr	r2, [pc, #496]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800ce5e:	487d      	ldr	r0, [pc, #500]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800ce60:	f001 fe22 	bl	800eaa8 <iprintf>
 800ce64:	487c      	ldr	r0, [pc, #496]	@ (800d058 <Ble_Hci_Gap_Gatt_Init+0x538>)
 800ce66:	f001 fe87 	bl	800eb78 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ce6a:	88fc      	ldrh	r4, [r7, #6]
 800ce6c:	88bd      	ldrh	r5, [r7, #4]
 800ce6e:	68b8      	ldr	r0, [r7, #8]
 800ce70:	f7f3 f9d6 	bl	8000220 <strlen>
 800ce74:	4603      	mov	r3, r0
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4629      	mov	r1, r5
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7fd f812 	bl	8009eac <aci_gatt_update_char_value>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ce8c:	88f8      	ldrh	r0, [r7, #6]
 800ce8e:	8879      	ldrh	r1, [r7, #2]
 800ce90:	463b      	mov	r3, r7
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	2302      	movs	r3, #2
 800ce96:	2200      	movs	r2, #0
 800ce98:	f7fd f808 	bl	8009eac <aci_gatt_update_char_value>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cea0:	2202      	movs	r2, #2
 800cea2:	2102      	movs	r1, #2
 800cea4:	2000      	movs	r0, #0
 800cea6:	f7fd fb3a 	bl	800a51e <hci_le_set_default_phy>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00f      	beq.n	800ced4 <Ble_Hci_Gap_Gatt_Init+0x3b4>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800ceb4:	4865      	ldr	r0, [pc, #404]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800ceb6:	f7fe fd87 	bl	800b9c8 <DbgTraceGetFileName>
 800ceba:	4601      	mov	r1, r0
 800cebc:	f240 3375 	movw	r3, #885	@ 0x375
 800cec0:	4a63      	ldr	r2, [pc, #396]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cec2:	4864      	ldr	r0, [pc, #400]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800cec4:	f001 fdf0 	bl	800eaa8 <iprintf>
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
 800ceca:	4619      	mov	r1, r3
 800cecc:	4863      	ldr	r0, [pc, #396]	@ (800d05c <Ble_Hci_Gap_Gatt_Init+0x53c>)
 800cece:	f001 fdeb 	bl	800eaa8 <iprintf>
 800ced2:	e00c      	b.n	800ceee <Ble_Hci_Gap_Gatt_Init+0x3ce>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800ced4:	485d      	ldr	r0, [pc, #372]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800ced6:	f7fe fd77 	bl	800b9c8 <DbgTraceGetFileName>
 800ceda:	4601      	mov	r1, r0
 800cedc:	f240 3379 	movw	r3, #889	@ 0x379
 800cee0:	4a5b      	ldr	r2, [pc, #364]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cee2:	485c      	ldr	r0, [pc, #368]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800cee4:	f001 fde0 	bl	800eaa8 <iprintf>
 800cee8:	485d      	ldr	r0, [pc, #372]	@ (800d060 <Ble_Hci_Gap_Gatt_Init+0x540>)
 800ceea:	f001 fe45 	bl	800eb78 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ceee:	4b5d      	ldr	r3, [pc, #372]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cef0:	2201      	movs	r2, #1
 800cef2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cef4:	4b5b      	ldr	r3, [pc, #364]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fc fb79 	bl	80095f0 <aci_gap_set_io_capability>
 800cefe:	4603      	mov	r3, r0
 800cf00:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00f      	beq.n	800cf28 <Ble_Hci_Gap_Gatt_Init+0x408>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800cf08:	4850      	ldr	r0, [pc, #320]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800cf0a:	f7fe fd5d 	bl	800b9c8 <DbgTraceGetFileName>
 800cf0e:	4601      	mov	r1, r0
 800cf10:	f240 3383 	movw	r3, #899	@ 0x383
 800cf14:	4a4e      	ldr	r2, [pc, #312]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cf16:	484f      	ldr	r0, [pc, #316]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800cf18:	f001 fdc6 	bl	800eaa8 <iprintf>
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4851      	ldr	r0, [pc, #324]	@ (800d068 <Ble_Hci_Gap_Gatt_Init+0x548>)
 800cf22:	f001 fdc1 	bl	800eaa8 <iprintf>
 800cf26:	e00c      	b.n	800cf42 <Ble_Hci_Gap_Gatt_Init+0x422>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800cf28:	4848      	ldr	r0, [pc, #288]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800cf2a:	f7fe fd4d 	bl	800b9c8 <DbgTraceGetFileName>
 800cf2e:	4601      	mov	r1, r0
 800cf30:	f240 3387 	movw	r3, #903	@ 0x387
 800cf34:	4a46      	ldr	r2, [pc, #280]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cf36:	4847      	ldr	r0, [pc, #284]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800cf38:	f001 fdb6 	bl	800eaa8 <iprintf>
 800cf3c:	484b      	ldr	r0, [pc, #300]	@ (800d06c <Ble_Hci_Gap_Gatt_Init+0x54c>)
 800cf3e:	f001 fe1b 	bl	800eb78 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cf42:	4b48      	ldr	r3, [pc, #288]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf44:	2201      	movs	r2, #1
 800cf46:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800cf48:	4b46      	ldr	r3, [pc, #280]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800cf4e:	4b45      	ldr	r3, [pc, #276]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf50:	2210      	movs	r2, #16
 800cf52:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800cf54:	4b43      	ldr	r3, [pc, #268]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800cf5a:	4b42      	ldr	r3, [pc, #264]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf5c:	4a44      	ldr	r2, [pc, #272]	@ (800d070 <Ble_Hci_Gap_Gatt_Init+0x550>)
 800cf5e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800cf60:	4b40      	ldr	r3, [pc, #256]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf62:	2201      	movs	r2, #1
 800cf64:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cf66:	4b3f      	ldr	r3, [pc, #252]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf68:	789c      	ldrb	r4, [r3, #2]
 800cf6a:	4b3e      	ldr	r3, [pc, #248]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf6c:	785d      	ldrb	r5, [r3, #1]
 800cf6e:	4b3d      	ldr	r3, [pc, #244]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf70:	791b      	ldrb	r3, [r3, #4]
 800cf72:	4a3c      	ldr	r2, [pc, #240]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf74:	7952      	ldrb	r2, [r2, #5]
 800cf76:	493b      	ldr	r1, [pc, #236]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf78:	78c9      	ldrb	r1, [r1, #3]
 800cf7a:	483a      	ldr	r0, [pc, #232]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cf7c:	6880      	ldr	r0, [r0, #8]
 800cf7e:	2600      	movs	r6, #0
 800cf80:	9604      	str	r6, [sp, #16]
 800cf82:	9003      	str	r0, [sp, #12]
 800cf84:	9102      	str	r1, [sp, #8]
 800cf86:	9201      	str	r2, [sp, #4]
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7fc fb81 	bl	8009698 <aci_gap_set_authentication_requirement>
 800cf96:	4603      	mov	r3, r0
 800cf98:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00f      	beq.n	800cfc0 <Ble_Hci_Gap_Gatt_Init+0x4a0>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800cfa0:	482a      	ldr	r0, [pc, #168]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800cfa2:	f7fe fd11 	bl	800b9c8 <DbgTraceGetFileName>
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	f240 33a2 	movw	r3, #930	@ 0x3a2
 800cfac:	4a28      	ldr	r2, [pc, #160]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cfae:	4829      	ldr	r0, [pc, #164]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800cfb0:	f001 fd7a 	bl	800eaa8 <iprintf>
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	482e      	ldr	r0, [pc, #184]	@ (800d074 <Ble_Hci_Gap_Gatt_Init+0x554>)
 800cfba:	f001 fd75 	bl	800eaa8 <iprintf>
 800cfbe:	e00c      	b.n	800cfda <Ble_Hci_Gap_Gatt_Init+0x4ba>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800cfc0:	4822      	ldr	r0, [pc, #136]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800cfc2:	f7fe fd01 	bl	800b9c8 <DbgTraceGetFileName>
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	f240 33a6 	movw	r3, #934	@ 0x3a6
 800cfcc:	4a20      	ldr	r2, [pc, #128]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cfce:	4821      	ldr	r0, [pc, #132]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800cfd0:	f001 fd6a 	bl	800eaa8 <iprintf>
 800cfd4:	4828      	ldr	r0, [pc, #160]	@ (800d078 <Ble_Hci_Gap_Gatt_Init+0x558>)
 800cfd6:	f001 fdcf 	bl	800eb78 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cfda:	4b22      	ldr	r3, [pc, #136]	@ (800d064 <Ble_Hci_Gap_Gatt_Init+0x544>)
 800cfdc:	789b      	ldrb	r3, [r3, #2]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d023      	beq.n	800d02a <Ble_Hci_Gap_Gatt_Init+0x50a>
  {
    ret = aci_gap_configure_whitelist();
 800cfe2:	f7fc fd3c 	bl	8009a5e <aci_gap_configure_filter_accept_list>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800cfea:	7dfb      	ldrb	r3, [r7, #23]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00f      	beq.n	800d010 <Ble_Hci_Gap_Gatt_Init+0x4f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800cff0:	4816      	ldr	r0, [pc, #88]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800cff2:	f7fe fce9 	bl	800b9c8 <DbgTraceGetFileName>
 800cff6:	4601      	mov	r1, r0
 800cff8:	f240 33b1 	movw	r3, #945	@ 0x3b1
 800cffc:	4a14      	ldr	r2, [pc, #80]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800cffe:	4815      	ldr	r0, [pc, #84]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800d000:	f001 fd52 	bl	800eaa8 <iprintf>
 800d004:	7dfb      	ldrb	r3, [r7, #23]
 800d006:	4619      	mov	r1, r3
 800d008:	481c      	ldr	r0, [pc, #112]	@ (800d07c <Ble_Hci_Gap_Gatt_Init+0x55c>)
 800d00a:	f001 fd4d 	bl	800eaa8 <iprintf>
 800d00e:	e00c      	b.n	800d02a <Ble_Hci_Gap_Gatt_Init+0x50a>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800d010:	480e      	ldr	r0, [pc, #56]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800d012:	f7fe fcd9 	bl	800b9c8 <DbgTraceGetFileName>
 800d016:	4601      	mov	r1, r0
 800d018:	f240 33b5 	movw	r3, #949	@ 0x3b5
 800d01c:	4a0c      	ldr	r2, [pc, #48]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800d01e:	480d      	ldr	r0, [pc, #52]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800d020:	f001 fd42 	bl	800eaa8 <iprintf>
 800d024:	4816      	ldr	r0, [pc, #88]	@ (800d080 <Ble_Hci_Gap_Gatt_Init+0x560>)
 800d026:	f001 fda7 	bl	800eb78 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800d02a:	4808      	ldr	r0, [pc, #32]	@ (800d04c <Ble_Hci_Gap_Gatt_Init+0x52c>)
 800d02c:	f7fe fccc 	bl	800b9c8 <DbgTraceGetFileName>
 800d030:	4601      	mov	r1, r0
 800d032:	f44f 736e 	mov.w	r3, #952	@ 0x3b8
 800d036:	4a06      	ldr	r2, [pc, #24]	@ (800d050 <Ble_Hci_Gap_Gatt_Init+0x530>)
 800d038:	4806      	ldr	r0, [pc, #24]	@ (800d054 <Ble_Hci_Gap_Gatt_Init+0x534>)
 800d03a:	f001 fd35 	bl	800eaa8 <iprintf>
 800d03e:	4811      	ldr	r0, [pc, #68]	@ (800d084 <Ble_Hci_Gap_Gatt_Init+0x564>)
 800d040:	f001 fd32 	bl	800eaa8 <iprintf>
}
 800d044:	bf00      	nop
 800d046:	371c      	adds	r7, #28
 800d048:	46bd      	mov	sp, r7
 800d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d04c:	08011268 	.word	0x08011268
 800d050:	08012020 	.word	0x08012020
 800d054:	08011284 	.word	0x08011284
 800d058:	08011970 	.word	0x08011970
 800d05c:	08011990 	.word	0x08011990
 800d060:	080119cc 	.word	0x080119cc
 800d064:	20001610 	.word	0x20001610
 800d068:	080119f8 	.word	0x080119f8
 800d06c:	08011a38 	.word	0x08011a38
 800d070:	0001b207 	.word	0x0001b207
 800d074:	08011a68 	.word	0x08011a68
 800d078:	08011ab4 	.word	0x08011ab4
 800d07c:	08011af0 	.word	0x08011af0
 800d080:	08011b30 	.word	0x08011b30
 800d084:	08011b60 	.word	0x08011b60

0800d088 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08c      	sub	sp, #48	@ 0x30
 800d08c:	af08      	add	r7, sp, #32
 800d08e:	4603      	mov	r3, r0
 800d090:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d092:	2392      	movs	r3, #146	@ 0x92
 800d094:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d106      	bne.n	800d0aa <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d09c:	4b69      	ldr	r3, [pc, #420]	@ (800d244 <Adv_Request+0x1bc>)
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d0a2:	4b69      	ldr	r3, [pc, #420]	@ (800d248 <Adv_Request+0x1c0>)
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	81bb      	strh	r3, [r7, #12]
 800d0a8:	e005      	b.n	800d0b6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d0aa:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800d0ae:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d0b0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d0b4:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d0b6:	4b65      	ldr	r3, [pc, #404]	@ (800d24c <Adv_Request+0x1c4>)
 800d0b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7f5 f9c9 	bl	8002454 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d12d      	bne.n	800d124 <Adv_Request+0x9c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d0c8:	4b60      	ldr	r3, [pc, #384]	@ (800d24c <Adv_Request+0x1c4>)
 800d0ca:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d004      	beq.n	800d0dc <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d0d2:	4b5e      	ldr	r3, [pc, #376]	@ (800d24c <Adv_Request+0x1c4>)
 800d0d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d123      	bne.n	800d124 <Adv_Request+0x9c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800d0dc:	f7fc f96a 	bl	80093b4 <aci_gap_set_non_discoverable>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800d0e4:	7afb      	ldrb	r3, [r7, #11]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00f      	beq.n	800d10a <Adv_Request+0x82>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800d0ea:	4859      	ldr	r0, [pc, #356]	@ (800d250 <Adv_Request+0x1c8>)
 800d0ec:	f7fe fc6c 	bl	800b9c8 <DbgTraceGetFileName>
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	f240 33d9 	movw	r3, #985	@ 0x3d9
 800d0f6:	4a57      	ldr	r2, [pc, #348]	@ (800d254 <Adv_Request+0x1cc>)
 800d0f8:	4857      	ldr	r0, [pc, #348]	@ (800d258 <Adv_Request+0x1d0>)
 800d0fa:	f001 fcd5 	bl	800eaa8 <iprintf>
 800d0fe:	7afb      	ldrb	r3, [r7, #11]
 800d100:	4619      	mov	r1, r3
 800d102:	4856      	ldr	r0, [pc, #344]	@ (800d25c <Adv_Request+0x1d4>)
 800d104:	f001 fcd0 	bl	800eaa8 <iprintf>
 800d108:	e00c      	b.n	800d124 <Adv_Request+0x9c>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800d10a:	4851      	ldr	r0, [pc, #324]	@ (800d250 <Adv_Request+0x1c8>)
 800d10c:	f7fe fc5c 	bl	800b9c8 <DbgTraceGetFileName>
 800d110:	4601      	mov	r1, r0
 800d112:	f240 33dd 	movw	r3, #989	@ 0x3dd
 800d116:	4a4f      	ldr	r2, [pc, #316]	@ (800d254 <Adv_Request+0x1cc>)
 800d118:	484f      	ldr	r0, [pc, #316]	@ (800d258 <Adv_Request+0x1d0>)
 800d11a:	f001 fcc5 	bl	800eaa8 <iprintf>
 800d11e:	4850      	ldr	r0, [pc, #320]	@ (800d260 <Adv_Request+0x1d8>)
 800d120:	f001 fd2a 	bl	800eb78 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d124:	4a49      	ldr	r2, [pc, #292]	@ (800d24c <Adv_Request+0x1c4>)
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800d12c:	4b47      	ldr	r3, [pc, #284]	@ (800d24c <Adv_Request+0x1c4>)
 800d12e:	7e1b      	ldrb	r3, [r3, #24]
 800d130:	89ba      	ldrh	r2, [r7, #12]
 800d132:	89f9      	ldrh	r1, [r7, #14]
 800d134:	2000      	movs	r0, #0
 800d136:	9006      	str	r0, [sp, #24]
 800d138:	2000      	movs	r0, #0
 800d13a:	9005      	str	r0, [sp, #20]
 800d13c:	4849      	ldr	r0, [pc, #292]	@ (800d264 <Adv_Request+0x1dc>)
 800d13e:	9004      	str	r0, [sp, #16]
 800d140:	9303      	str	r3, [sp, #12]
 800d142:	4b49      	ldr	r3, [pc, #292]	@ (800d268 <Adv_Request+0x1e0>)
 800d144:	9302      	str	r3, [sp, #8]
 800d146:	2305      	movs	r3, #5
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	2300      	movs	r3, #0
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	2300      	movs	r3, #0
 800d150:	2000      	movs	r0, #0
 800d152:	f7fc f953 	bl	80093fc <aci_gap_set_discoverable>
 800d156:	4603      	mov	r3, r0
 800d158:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800d15a:	7afb      	ldrb	r3, [r7, #11]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00f      	beq.n	800d180 <Adv_Request+0xf8>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800d160:	483b      	ldr	r0, [pc, #236]	@ (800d250 <Adv_Request+0x1c8>)
 800d162:	f7fe fc31 	bl	800b9c8 <DbgTraceGetFileName>
 800d166:	4601      	mov	r1, r0
 800d168:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 800d16c:	4a39      	ldr	r2, [pc, #228]	@ (800d254 <Adv_Request+0x1cc>)
 800d16e:	483a      	ldr	r0, [pc, #232]	@ (800d258 <Adv_Request+0x1d0>)
 800d170:	f001 fc9a 	bl	800eaa8 <iprintf>
 800d174:	7afb      	ldrb	r3, [r7, #11]
 800d176:	4619      	mov	r1, r3
 800d178:	483c      	ldr	r0, [pc, #240]	@ (800d26c <Adv_Request+0x1e4>)
 800d17a:	f001 fc95 	bl	800eaa8 <iprintf>
 800d17e:	e00c      	b.n	800d19a <Adv_Request+0x112>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800d180:	4833      	ldr	r0, [pc, #204]	@ (800d250 <Adv_Request+0x1c8>)
 800d182:	f7fe fc21 	bl	800b9c8 <DbgTraceGetFileName>
 800d186:	4601      	mov	r1, r0
 800d188:	f44f 737d 	mov.w	r3, #1012	@ 0x3f4
 800d18c:	4a31      	ldr	r2, [pc, #196]	@ (800d254 <Adv_Request+0x1cc>)
 800d18e:	4832      	ldr	r0, [pc, #200]	@ (800d258 <Adv_Request+0x1d0>)
 800d190:	f001 fc8a 	bl	800eaa8 <iprintf>
 800d194:	4836      	ldr	r0, [pc, #216]	@ (800d270 <Adv_Request+0x1e8>)
 800d196:	f001 fcef 	bl	800eb78 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800d19a:	4936      	ldr	r1, [pc, #216]	@ (800d274 <Adv_Request+0x1ec>)
 800d19c:	200e      	movs	r0, #14
 800d19e:	f7fc fbec 	bl	800997a <aci_gap_update_adv_data>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800d1a6:	7afb      	ldrb	r3, [r7, #11]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d022      	beq.n	800d1f2 <Adv_Request+0x16a>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d10f      	bne.n	800d1d2 <Adv_Request+0x14a>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d1b2:	4827      	ldr	r0, [pc, #156]	@ (800d250 <Adv_Request+0x1c8>)
 800d1b4:	f7fe fc08 	bl	800b9c8 <DbgTraceGetFileName>
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 800d1be:	4a25      	ldr	r2, [pc, #148]	@ (800d254 <Adv_Request+0x1cc>)
 800d1c0:	4825      	ldr	r0, [pc, #148]	@ (800d258 <Adv_Request+0x1d0>)
 800d1c2:	f001 fc71 	bl	800eaa8 <iprintf>
 800d1c6:	7afb      	ldrb	r3, [r7, #11]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	482b      	ldr	r0, [pc, #172]	@ (800d278 <Adv_Request+0x1f0>)
 800d1cc:	f001 fc6c 	bl	800eaa8 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800d1d0:	e035      	b.n	800d23e <Adv_Request+0x1b6>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800d1d2:	481f      	ldr	r0, [pc, #124]	@ (800d250 <Adv_Request+0x1c8>)
 800d1d4:	f7fe fbf8 	bl	800b9c8 <DbgTraceGetFileName>
 800d1d8:	4601      	mov	r1, r0
 800d1da:	f240 4301 	movw	r3, #1025	@ 0x401
 800d1de:	4a1d      	ldr	r2, [pc, #116]	@ (800d254 <Adv_Request+0x1cc>)
 800d1e0:	481d      	ldr	r0, [pc, #116]	@ (800d258 <Adv_Request+0x1d0>)
 800d1e2:	f001 fc61 	bl	800eaa8 <iprintf>
 800d1e6:	7afb      	ldrb	r3, [r7, #11]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4824      	ldr	r0, [pc, #144]	@ (800d27c <Adv_Request+0x1f4>)
 800d1ec:	f001 fc5c 	bl	800eaa8 <iprintf>
  return;
 800d1f0:	e025      	b.n	800d23e <Adv_Request+0x1b6>
    if (NewStatus == APP_BLE_FAST_ADV)
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d114      	bne.n	800d222 <Adv_Request+0x19a>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d1f8:	4815      	ldr	r0, [pc, #84]	@ (800d250 <Adv_Request+0x1c8>)
 800d1fa:	f7fe fbe5 	bl	800b9c8 <DbgTraceGetFileName>
 800d1fe:	4601      	mov	r1, r0
 800d200:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800d204:	4a13      	ldr	r2, [pc, #76]	@ (800d254 <Adv_Request+0x1cc>)
 800d206:	4814      	ldr	r0, [pc, #80]	@ (800d258 <Adv_Request+0x1d0>)
 800d208:	f001 fc4e 	bl	800eaa8 <iprintf>
 800d20c:	481c      	ldr	r0, [pc, #112]	@ (800d280 <Adv_Request+0x1f8>)
 800d20e:	f001 fc4b 	bl	800eaa8 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800d212:	4b0e      	ldr	r3, [pc, #56]	@ (800d24c <Adv_Request+0x1c4>)
 800d214:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d218:	491a      	ldr	r1, [pc, #104]	@ (800d284 <Adv_Request+0x1fc>)
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f5 f99e 	bl	800255c <HW_TS_Start>
  return;
 800d220:	e00d      	b.n	800d23e <Adv_Request+0x1b6>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800d222:	480b      	ldr	r0, [pc, #44]	@ (800d250 <Adv_Request+0x1c8>)
 800d224:	f7fe fbd0 	bl	800b9c8 <DbgTraceGetFileName>
 800d228:	4601      	mov	r1, r0
 800d22a:	f240 430e 	movw	r3, #1038	@ 0x40e
 800d22e:	4a09      	ldr	r2, [pc, #36]	@ (800d254 <Adv_Request+0x1cc>)
 800d230:	4809      	ldr	r0, [pc, #36]	@ (800d258 <Adv_Request+0x1d0>)
 800d232:	f001 fc39 	bl	800eaa8 <iprintf>
 800d236:	4814      	ldr	r0, [pc, #80]	@ (800d288 <Adv_Request+0x200>)
 800d238:	f001 fc36 	bl	800eaa8 <iprintf>
  return;
 800d23c:	bf00      	nop
}
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	20001694 	.word	0x20001694
 800d248:	20001696 	.word	0x20001696
 800d24c:	20001610 	.word	0x20001610
 800d250:	08011268 	.word	0x08011268
 800d254:	08012038 	.word	0x08012038
 800d258:	08011284 	.word	0x08011284
 800d25c:	08011b8c 	.word	0x08011b8c
 800d260:	08011bd8 	.word	0x08011bd8
 800d264:	20001629 	.word	0x20001629
 800d268:	08011ff0 	.word	0x08011ff0
 800d26c:	08011c20 	.word	0x08011c20
 800d270:	08011c58 	.word	0x08011c58
 800d274:	20000018 	.word	0x20000018
 800d278:	08011c80 	.word	0x08011c80
 800d27c:	08011cb4 	.word	0x08011cb4
 800d280:	08011cec 	.word	0x08011cec
 800d284:	0001e046 	.word	0x0001e046
 800d288:	08011d14 	.word	0x08011d14

0800d28c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d292:	f7ff f959 	bl	800c548 <LL_FLASH_GetUDN>
 800d296:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29e:	d023      	beq.n	800d2e8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d2a0:	f7ff f96a 	bl	800c578 <LL_FLASH_GetSTCompanyID>
 800d2a4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d2a6:	f7ff f95b 	bl	800c560 <LL_FLASH_GetDeviceID>
 800d2aa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	4b16      	ldr	r3, [pc, #88]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2b2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	0a1b      	lsrs	r3, r3, #8
 800d2b8:	b2da      	uxtb	r2, r3
 800d2ba:	4b14      	ldr	r3, [pc, #80]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2bc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	4b12      	ldr	r3, [pc, #72]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2c4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	4b10      	ldr	r3, [pc, #64]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2cc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	0a1b      	lsrs	r3, r3, #8
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2d6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	0c1b      	lsrs	r3, r3, #16
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	4b0b      	ldr	r3, [pc, #44]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2e0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d30c <BleGetBdAddress+0x80>)
 800d2e4:	617b      	str	r3, [r7, #20]
 800d2e6:	e00b      	b.n	800d300 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f7fe fc4b 	bl	800bb84 <OTP_Read>
 800d2ee:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	617b      	str	r3, [r7, #20]
 800d2fa:	e001      	b.n	800d300 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d2fc:	4b04      	ldr	r3, [pc, #16]	@ (800d310 <BleGetBdAddress+0x84>)
 800d2fe:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d300:	697b      	ldr	r3, [r7, #20]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3718      	adds	r7, #24
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	20001608 	.word	0x20001608
 800d310:	08011fc8 	.word	0x08011fc8

0800d314 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800d31e:	4b12      	ldr	r3, [pc, #72]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d320:	7e1b      	ldrb	r3, [r3, #24]
 800d322:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 800d324:	88fb      	ldrh	r3, [r7, #6]
 800d326:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800d328:	4b0f      	ldr	r3, [pc, #60]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d32a:	440b      	add	r3, r1
 800d32c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800d32e:	4b0e      	ldr	r3, [pc, #56]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d330:	7e1b      	ldrb	r3, [r3, #24]
 800d332:	3301      	adds	r3, #1
 800d334:	b2da      	uxtb	r2, r3
 800d336:	4b0c      	ldr	r3, [pc, #48]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d338:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 800d33a:	88fb      	ldrh	r3, [r7, #6]
 800d33c:	0a1b      	lsrs	r3, r3, #8
 800d33e:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800d340:	4b09      	ldr	r3, [pc, #36]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d342:	7e1b      	ldrb	r3, [r3, #24]
 800d344:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 800d346:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800d348:	4b07      	ldr	r3, [pc, #28]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d34a:	440b      	add	r3, r1
 800d34c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800d34e:	4b06      	ldr	r3, [pc, #24]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d350:	7e1b      	ldrb	r3, [r3, #24]
 800d352:	3301      	adds	r3, #1
 800d354:	b2da      	uxtb	r2, r3
 800d356:	4b04      	ldr	r3, [pc, #16]	@ (800d368 <Add_Advertisment_Service_UUID+0x54>)
 800d358:	761a      	strb	r2, [r3, #24]

  return;
 800d35a:	bf00      	nop
}
 800d35c:	370c      	adds	r7, #12
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	20001610 	.word	0x20001610

0800d36c <Adv_Mgr>:

static void Adv_Mgr(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 800d370:	2100      	movs	r1, #0
 800d372:	2001      	movs	r0, #1
 800d374:	f000 fd62 	bl	800de3c <UTIL_SEQ_SetTask>

  return;
 800d378:	bf00      	nop
}
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <Adv_Update>:

static void Adv_Update(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800d380:	2002      	movs	r0, #2
 800d382:	f7ff fe81 	bl	800d088 <Adv_Request>

  return;
 800d386:	bf00      	nop
}
 800d388:	bd80      	pop	{r7, pc}

0800d38a <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d392:	2100      	movs	r1, #0
 800d394:	2004      	movs	r0, #4
 800d396:	f000 fd51 	bl	800de3c <UTIL_SEQ_SetTask>

  return;
 800d39a:	bf00      	nop
}
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d3aa:	2001      	movs	r0, #1
 800d3ac:	f000 fdb2 	bl	800df14 <UTIL_SEQ_SetEvt>

  return;
 800d3b0:	bf00      	nop
}
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d3c0:	2001      	movs	r0, #1
 800d3c2:	f000 fdc7 	bl	800df54 <UTIL_SEQ_WaitEvt>

  return;
 800d3c6:	bf00      	nop
}
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	3308      	adds	r3, #8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fd fc8f 	bl	800ad04 <SVCCTL_UserEvtRx>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d3ea:	7afb      	ldrb	r3, [r7, #11]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d003      	beq.n	800d3f8 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d3f6:	e003      	b.n	800d400 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	701a      	strb	r2, [r3, #0]
  return;
 800d3fe:	bf00      	nop
}
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	4603      	mov	r3, r0
 800d40e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <BLE_StatusNot+0x16>
 800d416:	2b01      	cmp	r3, #1
 800d418:	d006      	beq.n	800d428 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d41a:	e00b      	b.n	800d434 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d41c:	2307      	movs	r3, #7
 800d41e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 fd37 	bl	800de94 <UTIL_SEQ_PauseTask>
      break;
 800d426:	e005      	b.n	800d434 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d428:	2307      	movs	r3, #7
 800d42a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 fd51 	bl	800ded4 <UTIL_SEQ_ResumeTask>
      break;
 800d432:	bf00      	nop
  }

  return;
 800d434:	bf00      	nop
}
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
   *
   * @param UUID
   * @param pPData
   * @return
   */
  dis_information_data.pPayload = (uint8_t*)DISAPP_MANUFACTURER_NAME;
 800d442:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <DISAPP_Init+0x24>)
 800d444:	603b      	str	r3, [r7, #0]
  dis_information_data.Length = sizeof(DISAPP_MANUFACTURER_NAME);
 800d446:	2304      	movs	r3, #4
 800d448:	713b      	strb	r3, [r7, #4]
  DIS_UpdateChar(MANUFACTURER_NAME_UUID, &dis_information_data);
 800d44a:	463b      	mov	r3, r7
 800d44c:	4619      	mov	r1, r3
 800d44e:	f642 2029 	movw	r0, #10793	@ 0x2a29
 800d452:	f7fd f937 	bl	800a6c4 <DIS_UpdateChar>
  dis_information_data.pPayload = (uint8_t *)pnp_id;
  dis_information_data.Length = BLE_CFG_DIS_PNP_ID_LEN_MAX;
  DIS_UpdateChar(PNP_ID_UUID, &dis_information_data);
#endif
/* USER CODE END DISAPP_Init */
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	08011d44 	.word	0x08011d44

0800d464 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b02      	cmp	r3, #2
 800d472:	d019      	beq.n	800d4a8 <HRS_Notification+0x44>
 800d474:	2b02      	cmp	r3, #2
 800d476:	dc1d      	bgt.n	800d4b4 <HRS_Notification+0x50>
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d002      	beq.n	800d482 <HRS_Notification+0x1e>
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d007      	beq.n	800d490 <HRS_Notification+0x2c>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 800d480:	e018      	b.n	800d4b4 <HRS_Notification+0x50>
      HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 0;
 800d482:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c0 <HRS_Notification+0x5c>)
 800d484:	2200      	movs	r2, #0
 800d486:	815a      	strh	r2, [r3, #10]
      HRSAPP_Context.ResetEnergyExpended = 1;
 800d488:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c0 <HRS_Notification+0x5c>)
 800d48a:	2201      	movs	r2, #1
 800d48c:	749a      	strb	r2, [r3, #18]
      break;
 800d48e:	e012      	b.n	800d4b6 <HRS_Notification+0x52>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 800d490:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c0 <HRS_Notification+0x5c>)
 800d492:	7cdb      	ldrb	r3, [r3, #19]
 800d494:	4618      	mov	r0, r3
 800d496:	f7f4 ffdd 	bl	8002454 <HW_TS_Stop>
      HW_TS_Start(HRSAPP_Context.TimerMeasurement_Id, HRSAPP_MEASUREMENT_INTERVAL);
 800d49a:	4b09      	ldr	r3, [pc, #36]	@ (800d4c0 <HRS_Notification+0x5c>)
 800d49c:	7cdb      	ldrb	r3, [r3, #19]
 800d49e:	21cc      	movs	r1, #204	@ 0xcc
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7f5 f85b 	bl	800255c <HW_TS_Start>
      break;
 800d4a6:	e006      	b.n	800d4b6 <HRS_Notification+0x52>
      HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 800d4a8:	4b05      	ldr	r3, [pc, #20]	@ (800d4c0 <HRS_Notification+0x5c>)
 800d4aa:	7cdb      	ldrb	r3, [r3, #19]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f4 ffd1 	bl	8002454 <HW_TS_Stop>
      break;
 800d4b2:	e000      	b.n	800d4b6 <HRS_Notification+0x52>
      break;
 800d4b4:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 800d4b6:	bf00      	nop
}
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20001698 	.word	0x20001698

0800d4c4 <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HRSAPP_Measurement );
 800d4ca:	4a20      	ldr	r2, [pc, #128]	@ (800d54c <HRSAPP_Init+0x88>)
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	2002      	movs	r0, #2
 800d4d0:	f000 fc92 	bl	800ddf8 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN HRSAPP_Init */
  /**
   * Set Body Sensor Location
   */
  HRSAPP_Context.ResetEnergyExpended = 0;
 800d4d4:	4b1e      	ldr	r3, [pc, #120]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	749a      	strb	r2, [r3, #18]
  HRSAPP_Context.BodySensorLocationChar = HRS_BODY_SENSOR_LOCATION_HAND;
 800d4da:	4b1d      	ldr	r3, [pc, #116]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d4dc:	2204      	movs	r2, #4
 800d4de:	701a      	strb	r2, [r3, #0]
  HRS_UpdateChar(SENSOR_LOCATION_UUID, (uint8_t *)&HRSAPP_Context.BodySensorLocationChar);
 800d4e0:	491b      	ldr	r1, [pc, #108]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d4e2:	f642 2038 	movw	r0, #10808	@ 0x2a38
 800d4e6:	f7fd fb27 	bl	800ab38 <HRS_UpdateChar>

  /**
   * Set Flags for measurement value
   */

  HRSAPP_Context.MeasurementvalueChar.Flags = ( HRS_HRM_VALUE_FORMAT_UINT16      | 
 800d4ea:	4b19      	ldr	r3, [pc, #100]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d4ec:	221f      	movs	r2, #31
 800d4ee:	745a      	strb	r2, [r3, #17]
                                                  HRS_HRM_SENSOR_CONTACTS_SUPPORTED |
                                                  HRS_HRM_ENERGY_EXPENDED_PRESENT  |
                                                  HRS_HRM_RR_INTERVAL_PRESENT );

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800d4f0:	4b17      	ldr	r3, [pc, #92]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d4f2:	7c5b      	ldrb	r3, [r3, #17]
 800d4f4:	f003 0308 	and.w	r3, r3, #8
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <HRSAPP_Init+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 10;
 800d4fc:	4b14      	ldr	r3, [pc, #80]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d4fe:	220a      	movs	r2, #10
 800d500:	815a      	strh	r2, [r3, #10]
#endif
  
#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_RR_INTERVAL_PRESENT)
 800d502:	4b13      	ldr	r3, [pc, #76]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d504:	7c5b      	ldrb	r3, [r3, #17]
 800d506:	f003 0310 	and.w	r3, r3, #16
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d013      	beq.n	800d536 <HRSAPP_Init+0x72>
  {
    uint8_t i;
    
    HRSAPP_Context.MeasurementvalueChar.NbreOfValidRRIntervalValues = BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG;
 800d50e:	4b10      	ldr	r3, [pc, #64]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d510:	2201      	movs	r2, #1
 800d512:	741a      	strb	r2, [r3, #16]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 800d514:	2300      	movs	r3, #0
 800d516:	71fb      	strb	r3, [r7, #7]
 800d518:	e00a      	b.n	800d530 <HRSAPP_Init+0x6c>
      HRSAPP_Context.MeasurementvalueChar.aRRIntervalValues[i] = 1024;
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	4a0c      	ldr	r2, [pc, #48]	@ (800d550 <HRSAPP_Init+0x8c>)
 800d51e:	3304      	adds	r3, #4
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	4413      	add	r3, r2
 800d524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d528:	809a      	strh	r2, [r3, #4]
    for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	3301      	adds	r3, #1
 800d52e:	71fb      	strb	r3, [r7, #7]
 800d530:	79fb      	ldrb	r3, [r7, #7]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0f1      	beq.n	800d51a <HRSAPP_Init+0x56>
#endif
  
  /**
   * Create timer for Heart Rate Measurement
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HRSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HrMeas);
 800d536:	4b07      	ldr	r3, [pc, #28]	@ (800d554 <HRSAPP_Init+0x90>)
 800d538:	2201      	movs	r2, #1
 800d53a:	4907      	ldr	r1, [pc, #28]	@ (800d558 <HRSAPP_Init+0x94>)
 800d53c:	2000      	movs	r0, #0
 800d53e:	f7f4 ff0f 	bl	8002360 <HW_TS_Create>

/* USER CODE END HRSAPP_Init */
  return;
 800d542:	bf00      	nop
}
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	0800d55d 	.word	0x0800d55d
 800d550:	20001698 	.word	0x20001698
 800d554:	0800d69d 	.word	0x0800d69d
 800d558:	200016ab 	.word	0x200016ab

0800d55c <HRSAPP_Measurement>:

static void HRSAPP_Measurement(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af02      	add	r7, sp, #8
/* USER CODE BEGIN HRSAPP_Measurement */
  uint16_t measurement, measurement1, measurement2, measurement3;
  ldc1614_processDRDY();
 800d562:	f7f5 f9b9 	bl	80028d8 <ldc1614_processDRDY>
  induct_ch0 = ldc1614_readInductance(0);
 800d566:	2000      	movs	r0, #0
 800d568:	f7f5 fa62 	bl	8002a30 <ldc1614_readInductance>
 800d56c:	eef0 7a40 	vmov.f32	s15, s0
 800d570:	4b40      	ldr	r3, [pc, #256]	@ (800d674 <HRSAPP_Measurement+0x118>)
 800d572:	edc3 7a00 	vstr	s15, [r3]
  induct_ch1 = ldc1614_readInductance(1);
 800d576:	2001      	movs	r0, #1
 800d578:	f7f5 fa5a 	bl	8002a30 <ldc1614_readInductance>
 800d57c:	eef0 7a40 	vmov.f32	s15, s0
 800d580:	4b3d      	ldr	r3, [pc, #244]	@ (800d678 <HRSAPP_Measurement+0x11c>)
 800d582:	edc3 7a00 	vstr	s15, [r3]
  induct_ch2 = ldc1614_readInductance(2);
 800d586:	2002      	movs	r0, #2
 800d588:	f7f5 fa52 	bl	8002a30 <ldc1614_readInductance>
 800d58c:	eef0 7a40 	vmov.f32	s15, s0
 800d590:	4b3a      	ldr	r3, [pc, #232]	@ (800d67c <HRSAPP_Measurement+0x120>)
 800d592:	edc3 7a00 	vstr	s15, [r3]
  induct_ch3 = ldc1614_readInductance(3);
 800d596:	2003      	movs	r0, #3
 800d598:	f7f5 fa4a 	bl	8002a30 <ldc1614_readInductance>
 800d59c:	eef0 7a40 	vmov.f32	s15, s0
 800d5a0:	4b37      	ldr	r3, [pc, #220]	@ (800d680 <HRSAPP_Measurement+0x124>)
 800d5a2:	edc3 7a00 	vstr	s15, [r3]
  measurement = encode_floats(induct_ch0);
 800d5a6:	4b33      	ldr	r3, [pc, #204]	@ (800d674 <HRSAPP_Measurement+0x118>)
 800d5a8:	edd3 7a00 	vldr	s15, [r3]
 800d5ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b0:	f000 f87c 	bl	800d6ac <encode_floats>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	80fb      	strh	r3, [r7, #6]
  measurement1 = encode_floats(induct_ch1);
 800d5b8:	4b2f      	ldr	r3, [pc, #188]	@ (800d678 <HRSAPP_Measurement+0x11c>)
 800d5ba:	edd3 7a00 	vldr	s15, [r3]
 800d5be:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c2:	f000 f873 	bl	800d6ac <encode_floats>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	80bb      	strh	r3, [r7, #4]
  measurement2 = encode_floats(induct_ch2);
 800d5ca:	4b2c      	ldr	r3, [pc, #176]	@ (800d67c <HRSAPP_Measurement+0x120>)
 800d5cc:	edd3 7a00 	vldr	s15, [r3]
 800d5d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5d4:	f000 f86a 	bl	800d6ac <encode_floats>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	807b      	strh	r3, [r7, #2]
  measurement3 = encode_floats(induct_ch3);
 800d5dc:	4b28      	ldr	r3, [pc, #160]	@ (800d680 <HRSAPP_Measurement+0x124>)
 800d5de:	edd3 7a00 	vldr	s15, [r3]
 800d5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d5e6:	f000 f861 	bl	800d6ac <encode_floats>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	803b      	strh	r3, [r7, #0]

//  measurement = ((HRSAPP_Read_RTC_SSR_SS()) & 0x07) + 65;
  APP_DBG_MSG("  data: %.5f,%x\n\r", induct_ch0, measurement);
 800d5ee:	4825      	ldr	r0, [pc, #148]	@ (800d684 <HRSAPP_Measurement+0x128>)
 800d5f0:	f7fe f9ea 	bl	800b9c8 <DbgTraceGetFileName>
 800d5f4:	4601      	mov	r1, r0
 800d5f6:	23c8      	movs	r3, #200	@ 0xc8
 800d5f8:	4a23      	ldr	r2, [pc, #140]	@ (800d688 <HRSAPP_Measurement+0x12c>)
 800d5fa:	4824      	ldr	r0, [pc, #144]	@ (800d68c <HRSAPP_Measurement+0x130>)
 800d5fc:	f001 fa54 	bl	800eaa8 <iprintf>
 800d600:	4b1c      	ldr	r3, [pc, #112]	@ (800d674 <HRSAPP_Measurement+0x118>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4618      	mov	r0, r3
 800d606:	f7f2 ff77 	bl	80004f8 <__aeabi_f2d>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	88f9      	ldrh	r1, [r7, #6]
 800d610:	9100      	str	r1, [sp, #0]
 800d612:	481f      	ldr	r0, [pc, #124]	@ (800d690 <HRSAPP_Measurement+0x134>)
 800d614:	f001 fa48 	bl	800eaa8 <iprintf>

  HRSAPP_Context.MeasurementvalueChar.MeasurementValue = measurement;
 800d618:	4a1e      	ldr	r2, [pc, #120]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	8053      	strh	r3, [r2, #2]
  HRSAPP_Context.MeasurementvalueChar.MeasurementValue1 = measurement1;
 800d61e:	4a1d      	ldr	r2, [pc, #116]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d620:	88bb      	ldrh	r3, [r7, #4]
 800d622:	8093      	strh	r3, [r2, #4]
  HRSAPP_Context.MeasurementvalueChar.MeasurementValue2 = measurement2;
 800d624:	4a1b      	ldr	r2, [pc, #108]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d626:	887b      	ldrh	r3, [r7, #2]
 800d628:	80d3      	strh	r3, [r2, #6]
  HRSAPP_Context.MeasurementvalueChar.MeasurementValue3 = measurement3;
 800d62a:	4a1a      	ldr	r2, [pc, #104]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d62c:	883b      	ldrh	r3, [r7, #0]
 800d62e:	8113      	strh	r3, [r2, #8]
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 800d630:	4b18      	ldr	r3, [pc, #96]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d632:	7c5b      	ldrb	r3, [r3, #17]
 800d634:	f003 0308 	and.w	r3, r3, #8
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00a      	beq.n	800d652 <HRSAPP_Measurement+0xf6>
     (HRSAPP_Context.ResetEnergyExpended == 0))
 800d63c:	4b15      	ldr	r3, [pc, #84]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d63e:	7c9b      	ldrb	r3, [r3, #18]
  if((HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT) &&
 800d640:	2b00      	cmp	r3, #0
 800d642:	d106      	bne.n	800d652 <HRSAPP_Measurement+0xf6>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended += 5;
 800d644:	4b13      	ldr	r3, [pc, #76]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d646:	895b      	ldrh	r3, [r3, #10]
 800d648:	3305      	adds	r3, #5
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	4b11      	ldr	r3, [pc, #68]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d64e:	815a      	strh	r2, [r3, #10]
 800d650:	e006      	b.n	800d660 <HRSAPP_Measurement+0x104>
  else if(HRSAPP_Context.ResetEnergyExpended == 1)
 800d652:	4b10      	ldr	r3, [pc, #64]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d654:	7c9b      	ldrb	r3, [r3, #18]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d102      	bne.n	800d660 <HRSAPP_Measurement+0x104>
    HRSAPP_Context.ResetEnergyExpended = 0;
 800d65a:	4b0e      	ldr	r3, [pc, #56]	@ (800d694 <HRSAPP_Measurement+0x138>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	749a      	strb	r2, [r3, #18]
#endif

  HRS_UpdateChar(HEART_RATE_MEASURMENT_UUID, (uint8_t *)&HRSAPP_Context.MeasurementvalueChar);
 800d660:	490d      	ldr	r1, [pc, #52]	@ (800d698 <HRSAPP_Measurement+0x13c>)
 800d662:	f642 2037 	movw	r0, #10807	@ 0x2a37
 800d666:	f7fd fa67 	bl	800ab38 <HRS_UpdateChar>

/* USER CODE END HRSAPP_Measurement */
  return;
 800d66a:	bf00      	nop
}
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000518 	.word	0x20000518
 800d678:	2000051c 	.word	0x2000051c
 800d67c:	20000520 	.word	0x20000520
 800d680:	20000524 	.word	0x20000524
 800d684:	08011d48 	.word	0x08011d48
 800d688:	08012044 	.word	0x08012044
 800d68c:	08011d64 	.word	0x08011d64
 800d690:	08011d78 	.word	0x08011d78
 800d694:	20001698 	.word	0x20001698
 800d698:	2000169a 	.word	0x2000169a

0800d69c <HrMeas>:

static void HrMeas( void )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	2002      	movs	r0, #2
 800d6a4:	f000 fbca 	bl	800de3c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 800d6a8:	bf00      	nop
}
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <encode_floats>:
{
  return ((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
}

/* USER CODE BEGIN FD */
uint16_t encode_floats(float a){
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	ed87 0a01 	vstr	s0, [r7, #4]

	float scaled_value = roundf(a * 10000);
 800d6b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800d6e8 <encode_floats+0x3c>
 800d6be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6c2:	eeb0 0a67 	vmov.f32	s0, s15
 800d6c6:	f003 fbb1 	bl	8010e2c <roundf>
 800d6ca:	ed87 0a03 	vstr	s0, [r7, #12]
	uint16_t result = (uint16_t)scaled_value;  // 转换为uint16_t类型
 800d6ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6d6:	ee17 3a90 	vmov	r3, s15
 800d6da:	817b      	strh	r3, [r7, #10]

	return result;
 800d6dc:	897b      	ldrh	r3, [r7, #10]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	461c4000 	.word	0x461c4000

0800d6ec <LL_PWR_EnableBootC2>:
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d6f0:	4b05      	ldr	r3, [pc, #20]	@ (800d708 <LL_PWR_EnableBootC2+0x1c>)
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4a04      	ldr	r2, [pc, #16]	@ (800d708 <LL_PWR_EnableBootC2+0x1c>)
 800d6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6fa:	60d3      	str	r3, [r2, #12]
}
 800d6fc:	bf00      	nop
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	58000400 	.word	0x58000400

0800d70c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d714:	4b06      	ldr	r3, [pc, #24]	@ (800d730 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d716:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800d71a:	4905      	ldr	r1, [pc, #20]	@ (800d730 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4313      	orrs	r3, r2
 800d720:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800d724:	bf00      	nop
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	58000800 	.word	0x58000800

0800d734 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d73c:	4b05      	ldr	r3, [pc, #20]	@ (800d754 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d73e:	6a1a      	ldr	r2, [r3, #32]
 800d740:	4904      	ldr	r1, [pc, #16]	@ (800d754 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4313      	orrs	r3, r2
 800d746:	620b      	str	r3, [r1, #32]
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	58000800 	.word	0x58000800

0800d758 <LL_AHB3_GRP1_EnableClock>:
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d764:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4013      	ands	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d77c:	68fb      	ldr	r3, [r7, #12]
}
 800d77e:	bf00      	nop
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b085      	sub	sp, #20
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d796:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d79a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d7a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7aa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
}
 800d7b6:	bf00      	nop
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b083      	sub	sp, #12
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	601a      	str	r2, [r3, #0]
}
 800d7d6:	bf00      	nop
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr

0800d7e2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d7e2:	b480      	push	{r7}
 800d7e4:	b083      	sub	sp, #12
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f043 0201 	orr.w	r2, r3, #1
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
}
 800d7f6:	bf00      	nop
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d802:	b480      	push	{r7}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	041b      	lsls	r3, r3, #16
 800d814:	43db      	mvns	r3, r3
 800d816:	401a      	ands	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	605a      	str	r2, [r3, #4]
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	041b      	lsls	r3, r3, #16
 800d83a:	431a      	orrs	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	605a      	str	r2, [r3, #4]
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	43db      	mvns	r3, r3
 800d85e:	401a      	ands	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	605a      	str	r2, [r3, #4]
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	609a      	str	r2, [r3, #8]
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	041a      	lsls	r2, r3, #16
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	609a      	str	r2, [r3, #8]
}
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	68da      	ldr	r2, [r3, #12]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	683a      	ldr	r2, [r7, #0]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d101      	bne.n	800d8c6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	69da      	ldr	r2, [r3, #28]
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d101      	bne.n	800d8f0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e000      	b.n	800d8f2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
	...

0800d900 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d904:	2102      	movs	r1, #2
 800d906:	4818      	ldr	r0, [pc, #96]	@ (800d968 <HW_IPCC_Rx_Handler+0x68>)
 800d908:	f7ff ffe4 	bl	800d8d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d008      	beq.n	800d924 <HW_IPCC_Rx_Handler+0x24>
 800d912:	4b15      	ldr	r3, [pc, #84]	@ (800d968 <HW_IPCC_Rx_Handler+0x68>)
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d102      	bne.n	800d924 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d91e:	f000 f8d5 	bl	800dacc <HW_IPCC_SYS_EvtHandler>
 800d922:	e01e      	b.n	800d962 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d924:	2101      	movs	r1, #1
 800d926:	4810      	ldr	r0, [pc, #64]	@ (800d968 <HW_IPCC_Rx_Handler+0x68>)
 800d928:	f7ff ffd4 	bl	800d8d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <HW_IPCC_Rx_Handler+0x44>
 800d932:	4b0d      	ldr	r3, [pc, #52]	@ (800d968 <HW_IPCC_Rx_Handler+0x68>)
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d102      	bne.n	800d944 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d93e:	f000 f889 	bl	800da54 <HW_IPCC_BLE_EvtHandler>
 800d942:	e00e      	b.n	800d962 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d944:	2108      	movs	r1, #8
 800d946:	4808      	ldr	r0, [pc, #32]	@ (800d968 <HW_IPCC_Rx_Handler+0x68>)
 800d948:	f7ff ffc4 	bl	800d8d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d008      	beq.n	800d964 <HW_IPCC_Rx_Handler+0x64>
 800d952:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <HW_IPCC_Rx_Handler+0x68>)
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	f003 0308 	and.w	r3, r3, #8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d95e:	f000 f901 	bl	800db64 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d962:	bf00      	nop
 800d964:	bf00      	nop
}
 800d966:	bd80      	pop	{r7, pc}
 800d968:	58000c00 	.word	0x58000c00

0800d96c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d970:	2102      	movs	r1, #2
 800d972:	4818      	ldr	r0, [pc, #96]	@ (800d9d4 <HW_IPCC_Tx_Handler+0x68>)
 800d974:	f7ff ff99 	bl	800d8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d108      	bne.n	800d990 <HW_IPCC_Tx_Handler+0x24>
 800d97e:	4b15      	ldr	r3, [pc, #84]	@ (800d9d4 <HW_IPCC_Tx_Handler+0x68>)
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d102      	bne.n	800d990 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d98a:	f000 f893 	bl	800dab4 <HW_IPCC_SYS_CmdEvtHandler>
 800d98e:	e01e      	b.n	800d9ce <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d990:	2108      	movs	r1, #8
 800d992:	4810      	ldr	r0, [pc, #64]	@ (800d9d4 <HW_IPCC_Tx_Handler+0x68>)
 800d994:	f7ff ff89 	bl	800d8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d108      	bne.n	800d9b0 <HW_IPCC_Tx_Handler+0x44>
 800d99e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <HW_IPCC_Tx_Handler+0x68>)
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d102      	bne.n	800d9b0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d9aa:	f000 f8bd 	bl	800db28 <HW_IPCC_MM_FreeBufHandler>
 800d9ae:	e00e      	b.n	800d9ce <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d9b0:	2120      	movs	r1, #32
 800d9b2:	4808      	ldr	r0, [pc, #32]	@ (800d9d4 <HW_IPCC_Tx_Handler+0x68>)
 800d9b4:	f7ff ff79 	bl	800d8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d108      	bne.n	800d9d0 <HW_IPCC_Tx_Handler+0x64>
 800d9be:	4b05      	ldr	r3, [pc, #20]	@ (800d9d4 <HW_IPCC_Tx_Handler+0x68>)
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d102      	bne.n	800d9d0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d9ca:	f000 f84f 	bl	800da6c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
}
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	58000c00 	.word	0x58000c00

0800d9d8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d9dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d9e0:	f7ff fed3 	bl	800d78a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d9e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d9e8:	f7ff fea4 	bl	800d734 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d9ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d9f0:	f7ff fe8c 	bl	800d70c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d9f4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d9f6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d9f8:	f7ff fe78 	bl	800d6ec <LL_PWR_EnableBootC2>

  return;
 800d9fc:	bf00      	nop
}
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800da04:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800da08:	f7ff fea6 	bl	800d758 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800da0c:	4806      	ldr	r0, [pc, #24]	@ (800da28 <HW_IPCC_Init+0x28>)
 800da0e:	f7ff fee8 	bl	800d7e2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800da12:	4805      	ldr	r0, [pc, #20]	@ (800da28 <HW_IPCC_Init+0x28>)
 800da14:	f7ff fed5 	bl	800d7c2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800da18:	202c      	movs	r0, #44	@ 0x2c
 800da1a:	f7f6 f962 	bl	8003ce2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800da1e:	202d      	movs	r0, #45	@ 0x2d
 800da20:	f7f6 f95f 	bl	8003ce2 <HAL_NVIC_EnableIRQ>

  return;
 800da24:	bf00      	nop
}
 800da26:	bd80      	pop	{r7, pc}
 800da28:	58000c00 	.word	0x58000c00

0800da2c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800da30:	2101      	movs	r1, #1
 800da32:	4802      	ldr	r0, [pc, #8]	@ (800da3c <HW_IPCC_BLE_Init+0x10>)
 800da34:	f7ff ff0a 	bl	800d84c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800da38:	bf00      	nop
}
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	58000c00 	.word	0x58000c00

0800da40 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800da44:	2101      	movs	r1, #1
 800da46:	4802      	ldr	r0, [pc, #8]	@ (800da50 <HW_IPCC_BLE_SendCmd+0x10>)
 800da48:	f7ff ff20 	bl	800d88c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800da4c:	bf00      	nop
}
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	58000c00 	.word	0x58000c00

0800da54 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800da58:	f7fd fdfe 	bl	800b658 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800da5c:	2101      	movs	r1, #1
 800da5e:	4802      	ldr	r0, [pc, #8]	@ (800da68 <HW_IPCC_BLE_EvtHandler+0x14>)
 800da60:	f7ff ff06 	bl	800d870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800da64:	bf00      	nop
}
 800da66:	bd80      	pop	{r7, pc}
 800da68:	58000c00 	.word	0x58000c00

0800da6c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800da70:	2120      	movs	r1, #32
 800da72:	4803      	ldr	r0, [pc, #12]	@ (800da80 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800da74:	f7ff fed8 	bl	800d828 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800da78:	f7fd fe1e 	bl	800b6b8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800da7c:	bf00      	nop
}
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	58000c00 	.word	0x58000c00

0800da84 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800da88:	2102      	movs	r1, #2
 800da8a:	4802      	ldr	r0, [pc, #8]	@ (800da94 <HW_IPCC_SYS_Init+0x10>)
 800da8c:	f7ff fede 	bl	800d84c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800da90:	bf00      	nop
}
 800da92:	bd80      	pop	{r7, pc}
 800da94:	58000c00 	.word	0x58000c00

0800da98 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800da9c:	2102      	movs	r1, #2
 800da9e:	4804      	ldr	r0, [pc, #16]	@ (800dab0 <HW_IPCC_SYS_SendCmd+0x18>)
 800daa0:	f7ff fef4 	bl	800d88c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800daa4:	2102      	movs	r1, #2
 800daa6:	4802      	ldr	r0, [pc, #8]	@ (800dab0 <HW_IPCC_SYS_SendCmd+0x18>)
 800daa8:	f7ff feab 	bl	800d802 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800daac:	bf00      	nop
}
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	58000c00 	.word	0x58000c00

0800dab4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800dab8:	2102      	movs	r1, #2
 800daba:	4803      	ldr	r0, [pc, #12]	@ (800dac8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800dabc:	f7ff feb4 	bl	800d828 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800dac0:	f7fd fe4a 	bl	800b758 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800dac4:	bf00      	nop
}
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	58000c00 	.word	0x58000c00

0800dacc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800dad0:	f7fd fe58 	bl	800b784 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800dad4:	2102      	movs	r1, #2
 800dad6:	4802      	ldr	r0, [pc, #8]	@ (800dae0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800dad8:	f7ff feca 	bl	800d870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dadc:	bf00      	nop
}
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	58000c00 	.word	0x58000c00

0800dae4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800daec:	2108      	movs	r1, #8
 800daee:	480c      	ldr	r0, [pc, #48]	@ (800db20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800daf0:	f7ff fedb 	bl	800d8aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d007      	beq.n	800db0a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800dafa:	4a0a      	ldr	r2, [pc, #40]	@ (800db24 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800db00:	2108      	movs	r1, #8
 800db02:	4807      	ldr	r0, [pc, #28]	@ (800db20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800db04:	f7ff fe7d 	bl	800d802 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800db08:	e006      	b.n	800db18 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800db0e:	2108      	movs	r1, #8
 800db10:	4803      	ldr	r0, [pc, #12]	@ (800db20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800db12:	f7ff febb 	bl	800d88c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800db16:	bf00      	nop
}
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	58000c00 	.word	0x58000c00
 800db24:	200016ac 	.word	0x200016ac

0800db28 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800db2c:	2108      	movs	r1, #8
 800db2e:	4806      	ldr	r0, [pc, #24]	@ (800db48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800db30:	f7ff fe7a 	bl	800d828 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800db34:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800db3a:	2108      	movs	r1, #8
 800db3c:	4802      	ldr	r0, [pc, #8]	@ (800db48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800db3e:	f7ff fea5 	bl	800d88c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800db42:	bf00      	nop
}
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	58000c00 	.word	0x58000c00
 800db4c:	200016ac 	.word	0x200016ac

0800db50 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800db54:	2108      	movs	r1, #8
 800db56:	4802      	ldr	r0, [pc, #8]	@ (800db60 <HW_IPCC_TRACES_Init+0x10>)
 800db58:	f7ff fe78 	bl	800d84c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800db5c:	bf00      	nop
}
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	58000c00 	.word	0x58000c00

0800db64 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800db68:	f7fd feb4 	bl	800b8d4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800db6c:	2108      	movs	r1, #8
 800db6e:	4802      	ldr	r0, [pc, #8]	@ (800db78 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800db70:	f7ff fe7e 	bl	800d870 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db74:	bf00      	nop
}
 800db76:	bd80      	pop	{r7, pc}
 800db78:	58000c00 	.word	0x58000c00

0800db7c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800db7c:	b480      	push	{r7}
 800db7e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800db80:	4b05      	ldr	r3, [pc, #20]	@ (800db98 <UTIL_LPM_Init+0x1c>)
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800db86:	4b05      	ldr	r3, [pc, #20]	@ (800db9c <UTIL_LPM_Init+0x20>)
 800db88:	2200      	movs	r2, #0
 800db8a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800db8c:	bf00      	nop
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	200016b0 	.word	0x200016b0
 800db9c:	200016b4 	.word	0x200016b4

0800dba0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dba0:	b480      	push	{r7}
 800dba2:	b087      	sub	sp, #28
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbac:	f3ef 8310 	mrs	r3, PRIMASK
 800dbb0:	613b      	str	r3, [r7, #16]
  return(result);
 800dbb2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800dbb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbb6:	b672      	cpsid	i
}
 800dbb8:	bf00      	nop
  
  switch(state)
 800dbba:	78fb      	ldrb	r3, [r7, #3]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d008      	beq.n	800dbd2 <UTIL_LPM_SetOffMode+0x32>
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d10e      	bne.n	800dbe2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800dbc4:	4b0d      	ldr	r3, [pc, #52]	@ (800dbfc <UTIL_LPM_SetOffMode+0x5c>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	4a0b      	ldr	r2, [pc, #44]	@ (800dbfc <UTIL_LPM_SetOffMode+0x5c>)
 800dbce:	6013      	str	r3, [r2, #0]
      break;
 800dbd0:	e008      	b.n	800dbe4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	43da      	mvns	r2, r3
 800dbd6:	4b09      	ldr	r3, [pc, #36]	@ (800dbfc <UTIL_LPM_SetOffMode+0x5c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4013      	ands	r3, r2
 800dbdc:	4a07      	ldr	r2, [pc, #28]	@ (800dbfc <UTIL_LPM_SetOffMode+0x5c>)
 800dbde:	6013      	str	r3, [r2, #0]
      break;
 800dbe0:	e000      	b.n	800dbe4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800dbe2:	bf00      	nop
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f383 8810 	msr	PRIMASK, r3
}
 800dbee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dbf0:	bf00      	nop
 800dbf2:	371c      	adds	r7, #28
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	200016b4 	.word	0x200016b4

0800dc00 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b090      	sub	sp, #64	@ 0x40
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800dc08:	4b73      	ldr	r3, [pc, #460]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800dc0e:	4b72      	ldr	r3, [pc, #456]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4013      	ands	r3, r2
 800dc16:	4a70      	ldr	r2, [pc, #448]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dc18:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800dc1a:	4b70      	ldr	r3, [pc, #448]	@ (800dddc <UTIL_SEQ_Run+0x1dc>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800dc20:	4b6f      	ldr	r3, [pc, #444]	@ (800dde0 <UTIL_SEQ_Run+0x1e0>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800dc26:	4b6f      	ldr	r3, [pc, #444]	@ (800dde4 <UTIL_SEQ_Run+0x1e4>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800dc2c:	4b6e      	ldr	r3, [pc, #440]	@ (800dde8 <UTIL_SEQ_Run+0x1e8>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dc32:	e08d      	b.n	800dd50 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800dc34:	2300      	movs	r3, #0
 800dc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dc38:	e002      	b.n	800dc40 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800dc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dc40:	4a6a      	ldr	r2, [pc, #424]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4a:	401a      	ands	r2, r3
 800dc4c:	4b62      	ldr	r3, [pc, #392]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4013      	ands	r3, r2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0f1      	beq.n	800dc3a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800dc56:	4a65      	ldr	r2, [pc, #404]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc60:	401a      	ands	r2, r3
 800dc62:	4b5d      	ldr	r3, [pc, #372]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4013      	ands	r3, r2
 800dc68:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dc6a:	4a60      	ldr	r2, [pc, #384]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dc6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc6e:	00db      	lsls	r3, r3, #3
 800dc70:	4413      	add	r3, r2
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc76:	4013      	ands	r3, r2
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d106      	bne.n	800dc8a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dc7c:	4a5b      	ldr	r2, [pc, #364]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	4413      	add	r3, r2
 800dc84:	f04f 32ff 	mov.w	r2, #4294967295
 800dc88:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dc8a:	4a58      	ldr	r2, [pc, #352]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dc8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	4413      	add	r3, r2
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc96:	4013      	ands	r3, r2
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 f9b3 	bl	800e004 <SEQ_BitPosition>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	461a      	mov	r2, r3
 800dca2:	4b53      	ldr	r3, [pc, #332]	@ (800ddf0 <UTIL_SEQ_Run+0x1f0>)
 800dca4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800dca6:	4a51      	ldr	r2, [pc, #324]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	4413      	add	r3, r2
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	4b4f      	ldr	r3, [pc, #316]	@ (800ddf0 <UTIL_SEQ_Run+0x1f0>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	401a      	ands	r2, r3
 800dcbe:	494b      	ldr	r1, [pc, #300]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dcc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	440b      	add	r3, r1
 800dcc6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcc8:	f3ef 8310 	mrs	r3, PRIMASK
 800dccc:	61bb      	str	r3, [r7, #24]
  return(result);
 800dcce:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dcd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800dcd2:	b672      	cpsid	i
}
 800dcd4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800dcd6:	4b46      	ldr	r3, [pc, #280]	@ (800ddf0 <UTIL_SEQ_Run+0x1f0>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dce0:	43da      	mvns	r2, r3
 800dce2:	4b3e      	ldr	r3, [pc, #248]	@ (800dddc <UTIL_SEQ_Run+0x1dc>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4013      	ands	r3, r2
 800dce8:	4a3c      	ldr	r2, [pc, #240]	@ (800dddc <UTIL_SEQ_Run+0x1dc>)
 800dcea:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800dcec:	2302      	movs	r3, #2
 800dcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcf0:	e013      	b.n	800dd1a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800dcf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	4a3d      	ldr	r2, [pc, #244]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dcf8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dcfc:	4b3c      	ldr	r3, [pc, #240]	@ (800ddf0 <UTIL_SEQ_Run+0x1f0>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2201      	movs	r2, #1
 800dd02:	fa02 f303 	lsl.w	r3, r2, r3
 800dd06:	43da      	mvns	r2, r3
 800dd08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	400a      	ands	r2, r1
 800dd0e:	4937      	ldr	r1, [pc, #220]	@ (800ddec <UTIL_SEQ_Run+0x1ec>)
 800dd10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800dd14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd16:	3b01      	subs	r3, #1
 800dd18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1e8      	bne.n	800dcf2 <UTIL_SEQ_Run+0xf2>
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	f383 8810 	msr	PRIMASK, r3
}
 800dd2a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800dd2c:	4b30      	ldr	r3, [pc, #192]	@ (800ddf0 <UTIL_SEQ_Run+0x1f0>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a30      	ldr	r2, [pc, #192]	@ (800ddf4 <UTIL_SEQ_Run+0x1f4>)
 800dd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd36:	4798      	blx	r3

    local_taskset = TaskSet;
 800dd38:	4b28      	ldr	r3, [pc, #160]	@ (800dddc <UTIL_SEQ_Run+0x1dc>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800dd3e:	4b28      	ldr	r3, [pc, #160]	@ (800dde0 <UTIL_SEQ_Run+0x1e0>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800dd44:	4b27      	ldr	r3, [pc, #156]	@ (800dde4 <UTIL_SEQ_Run+0x1e4>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800dd4a:	4b27      	ldr	r3, [pc, #156]	@ (800dde8 <UTIL_SEQ_Run+0x1e8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dd50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	401a      	ands	r2, r3
 800dd56:	4b20      	ldr	r3, [pc, #128]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d005      	beq.n	800dd6c <UTIL_SEQ_Run+0x16c>
 800dd60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd64:	4013      	ands	r3, r2
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f43f af64 	beq.w	800dc34 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800dd6c:	4b20      	ldr	r3, [pc, #128]	@ (800ddf0 <UTIL_SEQ_Run+0x1f0>)
 800dd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd72:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800dd74:	f000 f938 	bl	800dfe8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd78:	f3ef 8310 	mrs	r3, PRIMASK
 800dd7c:	613b      	str	r3, [r7, #16]
  return(result);
 800dd7e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800dd80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd82:	b672      	cpsid	i
}
 800dd84:	bf00      	nop
  local_taskset = TaskSet;
 800dd86:	4b15      	ldr	r3, [pc, #84]	@ (800dddc <UTIL_SEQ_Run+0x1dc>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800dd8c:	4b14      	ldr	r3, [pc, #80]	@ (800dde0 <UTIL_SEQ_Run+0x1e0>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800dd92:	4b14      	ldr	r3, [pc, #80]	@ (800dde4 <UTIL_SEQ_Run+0x1e4>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800dd98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9c:	401a      	ands	r2, r3
 800dd9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4013      	ands	r3, r2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d107      	bne.n	800ddb8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800dda8:	4b0f      	ldr	r3, [pc, #60]	@ (800dde8 <UTIL_SEQ_Run+0x1e8>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddae:	4013      	ands	r3, r2
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d101      	bne.n	800ddb8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ddb4:	f7f3 fdaf 	bl	8001916 <UTIL_SEQ_Idle>
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f383 8810 	msr	PRIMASK, r3
}
 800ddc2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ddc4:	f000 f917 	bl	800dff6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ddc8:	4a03      	ldr	r2, [pc, #12]	@ (800ddd8 <UTIL_SEQ_Run+0x1d8>)
 800ddca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddcc:	6013      	str	r3, [r2, #0]

  return;
 800ddce:	bf00      	nop
}
 800ddd0:	3740      	adds	r7, #64	@ 0x40
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	2000002c 	.word	0x2000002c
 800dddc:	200016b8 	.word	0x200016b8
 800dde0:	200016bc 	.word	0x200016bc
 800dde4:	20000028 	.word	0x20000028
 800dde8:	200016c0 	.word	0x200016c0
 800ddec:	20001748 	.word	0x20001748
 800ddf0:	200016c4 	.word	0x200016c4
 800ddf4:	200016c8 	.word	0x200016c8

0800ddf8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de04:	f3ef 8310 	mrs	r3, PRIMASK
 800de08:	617b      	str	r3, [r7, #20]
  return(result);
 800de0a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800de0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800de0e:	b672      	cpsid	i
}
 800de10:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f000 f8f6 	bl	800e004 <SEQ_BitPosition>
 800de18:	4603      	mov	r3, r0
 800de1a:	4619      	mov	r1, r3
 800de1c:	4a06      	ldr	r2, [pc, #24]	@ (800de38 <UTIL_SEQ_RegTask+0x40>)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	f383 8810 	msr	PRIMASK, r3
}
 800de2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800de30:	bf00      	nop
}
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	200016c8 	.word	0x200016c8

0800de3c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800de3c:	b480      	push	{r7}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de46:	f3ef 8310 	mrs	r3, PRIMASK
 800de4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800de4c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800de4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de50:	b672      	cpsid	i
}
 800de52:	bf00      	nop

  TaskSet |= TaskId_bm;
 800de54:	4b0d      	ldr	r3, [pc, #52]	@ (800de8c <UTIL_SEQ_SetTask+0x50>)
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	4a0b      	ldr	r2, [pc, #44]	@ (800de8c <UTIL_SEQ_SetTask+0x50>)
 800de5e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800de60:	4a0b      	ldr	r2, [pc, #44]	@ (800de90 <UTIL_SEQ_SetTask+0x54>)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	431a      	orrs	r2, r3
 800de6c:	4908      	ldr	r1, [pc, #32]	@ (800de90 <UTIL_SEQ_SetTask+0x54>)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	f383 8810 	msr	PRIMASK, r3
}
 800de7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800de80:	bf00      	nop
}
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr
 800de8c:	200016b8 	.word	0x200016b8
 800de90:	20001748 	.word	0x20001748

0800de94 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800de94:	b480      	push	{r7}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de9c:	f3ef 8310 	mrs	r3, PRIMASK
 800dea0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dea2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dea6:	b672      	cpsid	i
}
 800dea8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	43da      	mvns	r2, r3
 800deae:	4b08      	ldr	r3, [pc, #32]	@ (800ded0 <UTIL_SEQ_PauseTask+0x3c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4013      	ands	r3, r2
 800deb4:	4a06      	ldr	r2, [pc, #24]	@ (800ded0 <UTIL_SEQ_PauseTask+0x3c>)
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f383 8810 	msr	PRIMASK, r3
}
 800dec2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dec4:	bf00      	nop
}
 800dec6:	371c      	adds	r7, #28
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	20000028 	.word	0x20000028

0800ded4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dedc:	f3ef 8310 	mrs	r3, PRIMASK
 800dee0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dee2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dee4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dee6:	b672      	cpsid	i
}
 800dee8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800deea:	4b09      	ldr	r3, [pc, #36]	@ (800df10 <UTIL_SEQ_ResumeTask+0x3c>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4313      	orrs	r3, r2
 800def2:	4a07      	ldr	r2, [pc, #28]	@ (800df10 <UTIL_SEQ_ResumeTask+0x3c>)
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	f383 8810 	msr	PRIMASK, r3
}
 800df00:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800df02:	bf00      	nop
}
 800df04:	371c      	adds	r7, #28
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	20000028 	.word	0x20000028

0800df14 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800df14:	b480      	push	{r7}
 800df16:	b087      	sub	sp, #28
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df1c:	f3ef 8310 	mrs	r3, PRIMASK
 800df20:	60fb      	str	r3, [r7, #12]
  return(result);
 800df22:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800df24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800df26:	b672      	cpsid	i
}
 800df28:	bf00      	nop

  EvtSet |= EvtId_bm;
 800df2a:	4b09      	ldr	r3, [pc, #36]	@ (800df50 <UTIL_SEQ_SetEvt+0x3c>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4313      	orrs	r3, r2
 800df32:	4a07      	ldr	r2, [pc, #28]	@ (800df50 <UTIL_SEQ_SetEvt+0x3c>)
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	f383 8810 	msr	PRIMASK, r3
}
 800df40:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800df42:	bf00      	nop
}
 800df44:	371c      	adds	r7, #28
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	200016bc 	.word	0x200016bc

0800df54 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b088      	sub	sp, #32
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800df5c:	4b1f      	ldr	r3, [pc, #124]	@ (800dfdc <UTIL_SEQ_WaitEvt+0x88>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800df62:	4b1e      	ldr	r3, [pc, #120]	@ (800dfdc <UTIL_SEQ_WaitEvt+0x88>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6a:	d102      	bne.n	800df72 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800df6c:	2300      	movs	r3, #0
 800df6e:	61fb      	str	r3, [r7, #28]
 800df70:	e005      	b.n	800df7e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800df72:	4b1a      	ldr	r3, [pc, #104]	@ (800dfdc <UTIL_SEQ_WaitEvt+0x88>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2201      	movs	r2, #1
 800df78:	fa02 f303 	lsl.w	r3, r2, r3
 800df7c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800df7e:	4b18      	ldr	r3, [pc, #96]	@ (800dfe0 <UTIL_SEQ_WaitEvt+0x8c>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800df84:	4a16      	ldr	r2, [pc, #88]	@ (800dfe0 <UTIL_SEQ_WaitEvt+0x8c>)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800df8a:	e003      	b.n	800df94 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800df8c:	6879      	ldr	r1, [r7, #4]
 800df8e:	69f8      	ldr	r0, [r7, #28]
 800df90:	f7f3 fcc8 	bl	8001924 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800df94:	4b13      	ldr	r3, [pc, #76]	@ (800dfe4 <UTIL_SEQ_WaitEvt+0x90>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4013      	ands	r3, r2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d0f5      	beq.n	800df8c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800dfa0:	4a0e      	ldr	r2, [pc, #56]	@ (800dfdc <UTIL_SEQ_WaitEvt+0x88>)
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800dfaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfac:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dfae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfb0:	b672      	cpsid	i
}
 800dfb2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	43da      	mvns	r2, r3
 800dfb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe4 <UTIL_SEQ_WaitEvt+0x90>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	4a09      	ldr	r2, [pc, #36]	@ (800dfe4 <UTIL_SEQ_WaitEvt+0x90>)
 800dfc0:	6013      	str	r3, [r2, #0]
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f383 8810 	msr	PRIMASK, r3
}
 800dfcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800dfce:	4a04      	ldr	r2, [pc, #16]	@ (800dfe0 <UTIL_SEQ_WaitEvt+0x8c>)
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	6013      	str	r3, [r2, #0]
  return;
 800dfd4:	bf00      	nop
}
 800dfd6:	3720      	adds	r7, #32
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	200016c4 	.word	0x200016c4
 800dfe0:	200016c0 	.word	0x200016c0
 800dfe4:	200016bc 	.word	0x200016bc

0800dfe8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dfec:	bf00      	nop
}
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dff6:	b480      	push	{r7}
 800dff8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dffa:	bf00      	nop
}
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800e00c:	2300      	movs	r3, #0
 800e00e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e01a:	d204      	bcs.n	800e026 <SEQ_BitPosition+0x22>
 800e01c:	2310      	movs	r3, #16
 800e01e:	73fb      	strb	r3, [r7, #15]
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	041b      	lsls	r3, r3, #16
 800e024:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e02c:	d205      	bcs.n	800e03a <SEQ_BitPosition+0x36>
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	3308      	adds	r3, #8
 800e032:	73fb      	strb	r3, [r7, #15]
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	021b      	lsls	r3, r3, #8
 800e038:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e040:	d205      	bcs.n	800e04e <SEQ_BitPosition+0x4a>
 800e042:	7bfb      	ldrb	r3, [r7, #15]
 800e044:	3304      	adds	r3, #4
 800e046:	73fb      	strb	r3, [r7, #15]
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	011b      	lsls	r3, r3, #4
 800e04c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	0f1b      	lsrs	r3, r3, #28
 800e052:	4a07      	ldr	r2, [pc, #28]	@ (800e070 <SEQ_BitPosition+0x6c>)
 800e054:	5cd2      	ldrb	r2, [r2, r3]
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	4413      	add	r3, r2
 800e05a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	f1c3 031f 	rsb	r3, r3, #31
 800e062:	b2db      	uxtb	r3, r3
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr
 800e070:	08012058 	.word	0x08012058

0800e074 <__cvt>:
 800e074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e078:	ec57 6b10 	vmov	r6, r7, d0
 800e07c:	2f00      	cmp	r7, #0
 800e07e:	460c      	mov	r4, r1
 800e080:	4619      	mov	r1, r3
 800e082:	463b      	mov	r3, r7
 800e084:	bfbb      	ittet	lt
 800e086:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e08a:	461f      	movlt	r7, r3
 800e08c:	2300      	movge	r3, #0
 800e08e:	232d      	movlt	r3, #45	@ 0x2d
 800e090:	700b      	strb	r3, [r1, #0]
 800e092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e094:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e098:	4691      	mov	r9, r2
 800e09a:	f023 0820 	bic.w	r8, r3, #32
 800e09e:	bfbc      	itt	lt
 800e0a0:	4632      	movlt	r2, r6
 800e0a2:	4616      	movlt	r6, r2
 800e0a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0a8:	d005      	beq.n	800e0b6 <__cvt+0x42>
 800e0aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e0ae:	d100      	bne.n	800e0b2 <__cvt+0x3e>
 800e0b0:	3401      	adds	r4, #1
 800e0b2:	2102      	movs	r1, #2
 800e0b4:	e000      	b.n	800e0b8 <__cvt+0x44>
 800e0b6:	2103      	movs	r1, #3
 800e0b8:	ab03      	add	r3, sp, #12
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	ab02      	add	r3, sp, #8
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	ec47 6b10 	vmov	d0, r6, r7
 800e0c4:	4653      	mov	r3, sl
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	f000 ff82 	bl	800efd0 <_dtoa_r>
 800e0cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	d119      	bne.n	800e108 <__cvt+0x94>
 800e0d4:	f019 0f01 	tst.w	r9, #1
 800e0d8:	d00e      	beq.n	800e0f8 <__cvt+0x84>
 800e0da:	eb00 0904 	add.w	r9, r0, r4
 800e0de:	2200      	movs	r2, #0
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	f7f2 fcc7 	bl	8000a78 <__aeabi_dcmpeq>
 800e0ea:	b108      	cbz	r0, 800e0f0 <__cvt+0x7c>
 800e0ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0f0:	2230      	movs	r2, #48	@ 0x30
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	454b      	cmp	r3, r9
 800e0f6:	d31e      	bcc.n	800e136 <__cvt+0xc2>
 800e0f8:	9b03      	ldr	r3, [sp, #12]
 800e0fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0fc:	1b5b      	subs	r3, r3, r5
 800e0fe:	4628      	mov	r0, r5
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	b004      	add	sp, #16
 800e104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e108:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e10c:	eb00 0904 	add.w	r9, r0, r4
 800e110:	d1e5      	bne.n	800e0de <__cvt+0x6a>
 800e112:	7803      	ldrb	r3, [r0, #0]
 800e114:	2b30      	cmp	r3, #48	@ 0x30
 800e116:	d10a      	bne.n	800e12e <__cvt+0xba>
 800e118:	2200      	movs	r2, #0
 800e11a:	2300      	movs	r3, #0
 800e11c:	4630      	mov	r0, r6
 800e11e:	4639      	mov	r1, r7
 800e120:	f7f2 fcaa 	bl	8000a78 <__aeabi_dcmpeq>
 800e124:	b918      	cbnz	r0, 800e12e <__cvt+0xba>
 800e126:	f1c4 0401 	rsb	r4, r4, #1
 800e12a:	f8ca 4000 	str.w	r4, [sl]
 800e12e:	f8da 3000 	ldr.w	r3, [sl]
 800e132:	4499      	add	r9, r3
 800e134:	e7d3      	b.n	800e0de <__cvt+0x6a>
 800e136:	1c59      	adds	r1, r3, #1
 800e138:	9103      	str	r1, [sp, #12]
 800e13a:	701a      	strb	r2, [r3, #0]
 800e13c:	e7d9      	b.n	800e0f2 <__cvt+0x7e>

0800e13e <__exponent>:
 800e13e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e140:	2900      	cmp	r1, #0
 800e142:	bfba      	itte	lt
 800e144:	4249      	neglt	r1, r1
 800e146:	232d      	movlt	r3, #45	@ 0x2d
 800e148:	232b      	movge	r3, #43	@ 0x2b
 800e14a:	2909      	cmp	r1, #9
 800e14c:	7002      	strb	r2, [r0, #0]
 800e14e:	7043      	strb	r3, [r0, #1]
 800e150:	dd29      	ble.n	800e1a6 <__exponent+0x68>
 800e152:	f10d 0307 	add.w	r3, sp, #7
 800e156:	461d      	mov	r5, r3
 800e158:	270a      	movs	r7, #10
 800e15a:	461a      	mov	r2, r3
 800e15c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e160:	fb07 1416 	mls	r4, r7, r6, r1
 800e164:	3430      	adds	r4, #48	@ 0x30
 800e166:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e16a:	460c      	mov	r4, r1
 800e16c:	2c63      	cmp	r4, #99	@ 0x63
 800e16e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e172:	4631      	mov	r1, r6
 800e174:	dcf1      	bgt.n	800e15a <__exponent+0x1c>
 800e176:	3130      	adds	r1, #48	@ 0x30
 800e178:	1e94      	subs	r4, r2, #2
 800e17a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e17e:	1c41      	adds	r1, r0, #1
 800e180:	4623      	mov	r3, r4
 800e182:	42ab      	cmp	r3, r5
 800e184:	d30a      	bcc.n	800e19c <__exponent+0x5e>
 800e186:	f10d 0309 	add.w	r3, sp, #9
 800e18a:	1a9b      	subs	r3, r3, r2
 800e18c:	42ac      	cmp	r4, r5
 800e18e:	bf88      	it	hi
 800e190:	2300      	movhi	r3, #0
 800e192:	3302      	adds	r3, #2
 800e194:	4403      	add	r3, r0
 800e196:	1a18      	subs	r0, r3, r0
 800e198:	b003      	add	sp, #12
 800e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e19c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e1a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e1a4:	e7ed      	b.n	800e182 <__exponent+0x44>
 800e1a6:	2330      	movs	r3, #48	@ 0x30
 800e1a8:	3130      	adds	r1, #48	@ 0x30
 800e1aa:	7083      	strb	r3, [r0, #2]
 800e1ac:	70c1      	strb	r1, [r0, #3]
 800e1ae:	1d03      	adds	r3, r0, #4
 800e1b0:	e7f1      	b.n	800e196 <__exponent+0x58>
	...

0800e1b4 <_printf_float>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	b08d      	sub	sp, #52	@ 0x34
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e1c0:	4616      	mov	r6, r2
 800e1c2:	461f      	mov	r7, r3
 800e1c4:	4605      	mov	r5, r0
 800e1c6:	f000 fdf5 	bl	800edb4 <_localeconv_r>
 800e1ca:	6803      	ldr	r3, [r0, #0]
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7f2 f826 	bl	8000220 <strlen>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800e1dc:	9005      	str	r0, [sp, #20]
 800e1de:	3307      	adds	r3, #7
 800e1e0:	f023 0307 	bic.w	r3, r3, #7
 800e1e4:	f103 0208 	add.w	r2, r3, #8
 800e1e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e1ec:	f8d4 b000 	ldr.w	fp, [r4]
 800e1f0:	f8c8 2000 	str.w	r2, [r8]
 800e1f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e1fc:	9307      	str	r3, [sp, #28]
 800e1fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800e202:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e20a:	4b9c      	ldr	r3, [pc, #624]	@ (800e47c <_printf_float+0x2c8>)
 800e20c:	f04f 32ff 	mov.w	r2, #4294967295
 800e210:	f7f2 fc64 	bl	8000adc <__aeabi_dcmpun>
 800e214:	bb70      	cbnz	r0, 800e274 <_printf_float+0xc0>
 800e216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e21a:	4b98      	ldr	r3, [pc, #608]	@ (800e47c <_printf_float+0x2c8>)
 800e21c:	f04f 32ff 	mov.w	r2, #4294967295
 800e220:	f7f2 fc3e 	bl	8000aa0 <__aeabi_dcmple>
 800e224:	bb30      	cbnz	r0, 800e274 <_printf_float+0xc0>
 800e226:	2200      	movs	r2, #0
 800e228:	2300      	movs	r3, #0
 800e22a:	4640      	mov	r0, r8
 800e22c:	4649      	mov	r1, r9
 800e22e:	f7f2 fc2d 	bl	8000a8c <__aeabi_dcmplt>
 800e232:	b110      	cbz	r0, 800e23a <_printf_float+0x86>
 800e234:	232d      	movs	r3, #45	@ 0x2d
 800e236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e23a:	4a91      	ldr	r2, [pc, #580]	@ (800e480 <_printf_float+0x2cc>)
 800e23c:	4b91      	ldr	r3, [pc, #580]	@ (800e484 <_printf_float+0x2d0>)
 800e23e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e242:	bf94      	ite	ls
 800e244:	4690      	movls	r8, r2
 800e246:	4698      	movhi	r8, r3
 800e248:	2303      	movs	r3, #3
 800e24a:	6123      	str	r3, [r4, #16]
 800e24c:	f02b 0304 	bic.w	r3, fp, #4
 800e250:	6023      	str	r3, [r4, #0]
 800e252:	f04f 0900 	mov.w	r9, #0
 800e256:	9700      	str	r7, [sp, #0]
 800e258:	4633      	mov	r3, r6
 800e25a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e25c:	4621      	mov	r1, r4
 800e25e:	4628      	mov	r0, r5
 800e260:	f000 f9d2 	bl	800e608 <_printf_common>
 800e264:	3001      	adds	r0, #1
 800e266:	f040 808d 	bne.w	800e384 <_printf_float+0x1d0>
 800e26a:	f04f 30ff 	mov.w	r0, #4294967295
 800e26e:	b00d      	add	sp, #52	@ 0x34
 800e270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e274:	4642      	mov	r2, r8
 800e276:	464b      	mov	r3, r9
 800e278:	4640      	mov	r0, r8
 800e27a:	4649      	mov	r1, r9
 800e27c:	f7f2 fc2e 	bl	8000adc <__aeabi_dcmpun>
 800e280:	b140      	cbz	r0, 800e294 <_printf_float+0xe0>
 800e282:	464b      	mov	r3, r9
 800e284:	2b00      	cmp	r3, #0
 800e286:	bfbc      	itt	lt
 800e288:	232d      	movlt	r3, #45	@ 0x2d
 800e28a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e28e:	4a7e      	ldr	r2, [pc, #504]	@ (800e488 <_printf_float+0x2d4>)
 800e290:	4b7e      	ldr	r3, [pc, #504]	@ (800e48c <_printf_float+0x2d8>)
 800e292:	e7d4      	b.n	800e23e <_printf_float+0x8a>
 800e294:	6863      	ldr	r3, [r4, #4]
 800e296:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e29a:	9206      	str	r2, [sp, #24]
 800e29c:	1c5a      	adds	r2, r3, #1
 800e29e:	d13b      	bne.n	800e318 <_printf_float+0x164>
 800e2a0:	2306      	movs	r3, #6
 800e2a2:	6063      	str	r3, [r4, #4]
 800e2a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	6022      	str	r2, [r4, #0]
 800e2ac:	9303      	str	r3, [sp, #12]
 800e2ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800e2b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e2b4:	ab09      	add	r3, sp, #36	@ 0x24
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	6861      	ldr	r1, [r4, #4]
 800e2ba:	ec49 8b10 	vmov	d0, r8, r9
 800e2be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f7ff fed6 	bl	800e074 <__cvt>
 800e2c8:	9b06      	ldr	r3, [sp, #24]
 800e2ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2cc:	2b47      	cmp	r3, #71	@ 0x47
 800e2ce:	4680      	mov	r8, r0
 800e2d0:	d129      	bne.n	800e326 <_printf_float+0x172>
 800e2d2:	1cc8      	adds	r0, r1, #3
 800e2d4:	db02      	blt.n	800e2dc <_printf_float+0x128>
 800e2d6:	6863      	ldr	r3, [r4, #4]
 800e2d8:	4299      	cmp	r1, r3
 800e2da:	dd41      	ble.n	800e360 <_printf_float+0x1ac>
 800e2dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800e2e0:	fa5f fa8a 	uxtb.w	sl, sl
 800e2e4:	3901      	subs	r1, #1
 800e2e6:	4652      	mov	r2, sl
 800e2e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e2ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800e2ee:	f7ff ff26 	bl	800e13e <__exponent>
 800e2f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2f4:	1813      	adds	r3, r2, r0
 800e2f6:	2a01      	cmp	r2, #1
 800e2f8:	4681      	mov	r9, r0
 800e2fa:	6123      	str	r3, [r4, #16]
 800e2fc:	dc02      	bgt.n	800e304 <_printf_float+0x150>
 800e2fe:	6822      	ldr	r2, [r4, #0]
 800e300:	07d2      	lsls	r2, r2, #31
 800e302:	d501      	bpl.n	800e308 <_printf_float+0x154>
 800e304:	3301      	adds	r3, #1
 800e306:	6123      	str	r3, [r4, #16]
 800e308:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0a2      	beq.n	800e256 <_printf_float+0xa2>
 800e310:	232d      	movs	r3, #45	@ 0x2d
 800e312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e316:	e79e      	b.n	800e256 <_printf_float+0xa2>
 800e318:	9a06      	ldr	r2, [sp, #24]
 800e31a:	2a47      	cmp	r2, #71	@ 0x47
 800e31c:	d1c2      	bne.n	800e2a4 <_printf_float+0xf0>
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d1c0      	bne.n	800e2a4 <_printf_float+0xf0>
 800e322:	2301      	movs	r3, #1
 800e324:	e7bd      	b.n	800e2a2 <_printf_float+0xee>
 800e326:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e32a:	d9db      	bls.n	800e2e4 <_printf_float+0x130>
 800e32c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e330:	d118      	bne.n	800e364 <_printf_float+0x1b0>
 800e332:	2900      	cmp	r1, #0
 800e334:	6863      	ldr	r3, [r4, #4]
 800e336:	dd0b      	ble.n	800e350 <_printf_float+0x19c>
 800e338:	6121      	str	r1, [r4, #16]
 800e33a:	b913      	cbnz	r3, 800e342 <_printf_float+0x18e>
 800e33c:	6822      	ldr	r2, [r4, #0]
 800e33e:	07d0      	lsls	r0, r2, #31
 800e340:	d502      	bpl.n	800e348 <_printf_float+0x194>
 800e342:	3301      	adds	r3, #1
 800e344:	440b      	add	r3, r1
 800e346:	6123      	str	r3, [r4, #16]
 800e348:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e34a:	f04f 0900 	mov.w	r9, #0
 800e34e:	e7db      	b.n	800e308 <_printf_float+0x154>
 800e350:	b913      	cbnz	r3, 800e358 <_printf_float+0x1a4>
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	07d2      	lsls	r2, r2, #31
 800e356:	d501      	bpl.n	800e35c <_printf_float+0x1a8>
 800e358:	3302      	adds	r3, #2
 800e35a:	e7f4      	b.n	800e346 <_printf_float+0x192>
 800e35c:	2301      	movs	r3, #1
 800e35e:	e7f2      	b.n	800e346 <_printf_float+0x192>
 800e360:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e366:	4299      	cmp	r1, r3
 800e368:	db05      	blt.n	800e376 <_printf_float+0x1c2>
 800e36a:	6823      	ldr	r3, [r4, #0]
 800e36c:	6121      	str	r1, [r4, #16]
 800e36e:	07d8      	lsls	r0, r3, #31
 800e370:	d5ea      	bpl.n	800e348 <_printf_float+0x194>
 800e372:	1c4b      	adds	r3, r1, #1
 800e374:	e7e7      	b.n	800e346 <_printf_float+0x192>
 800e376:	2900      	cmp	r1, #0
 800e378:	bfd4      	ite	le
 800e37a:	f1c1 0202 	rsble	r2, r1, #2
 800e37e:	2201      	movgt	r2, #1
 800e380:	4413      	add	r3, r2
 800e382:	e7e0      	b.n	800e346 <_printf_float+0x192>
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	055a      	lsls	r2, r3, #21
 800e388:	d407      	bmi.n	800e39a <_printf_float+0x1e6>
 800e38a:	6923      	ldr	r3, [r4, #16]
 800e38c:	4642      	mov	r2, r8
 800e38e:	4631      	mov	r1, r6
 800e390:	4628      	mov	r0, r5
 800e392:	47b8      	blx	r7
 800e394:	3001      	adds	r0, #1
 800e396:	d12b      	bne.n	800e3f0 <_printf_float+0x23c>
 800e398:	e767      	b.n	800e26a <_printf_float+0xb6>
 800e39a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e39e:	f240 80dd 	bls.w	800e55c <_printf_float+0x3a8>
 800e3a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f7f2 fb65 	bl	8000a78 <__aeabi_dcmpeq>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d033      	beq.n	800e41a <_printf_float+0x266>
 800e3b2:	4a37      	ldr	r2, [pc, #220]	@ (800e490 <_printf_float+0x2dc>)
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	47b8      	blx	r7
 800e3bc:	3001      	adds	r0, #1
 800e3be:	f43f af54 	beq.w	800e26a <_printf_float+0xb6>
 800e3c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e3c6:	4543      	cmp	r3, r8
 800e3c8:	db02      	blt.n	800e3d0 <_printf_float+0x21c>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	07d8      	lsls	r0, r3, #31
 800e3ce:	d50f      	bpl.n	800e3f0 <_printf_float+0x23c>
 800e3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	f43f af45 	beq.w	800e26a <_printf_float+0xb6>
 800e3e0:	f04f 0900 	mov.w	r9, #0
 800e3e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3e8:	f104 0a1a 	add.w	sl, r4, #26
 800e3ec:	45c8      	cmp	r8, r9
 800e3ee:	dc09      	bgt.n	800e404 <_printf_float+0x250>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	079b      	lsls	r3, r3, #30
 800e3f4:	f100 8103 	bmi.w	800e5fe <_printf_float+0x44a>
 800e3f8:	68e0      	ldr	r0, [r4, #12]
 800e3fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3fc:	4298      	cmp	r0, r3
 800e3fe:	bfb8      	it	lt
 800e400:	4618      	movlt	r0, r3
 800e402:	e734      	b.n	800e26e <_printf_float+0xba>
 800e404:	2301      	movs	r3, #1
 800e406:	4652      	mov	r2, sl
 800e408:	4631      	mov	r1, r6
 800e40a:	4628      	mov	r0, r5
 800e40c:	47b8      	blx	r7
 800e40e:	3001      	adds	r0, #1
 800e410:	f43f af2b 	beq.w	800e26a <_printf_float+0xb6>
 800e414:	f109 0901 	add.w	r9, r9, #1
 800e418:	e7e8      	b.n	800e3ec <_printf_float+0x238>
 800e41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dc39      	bgt.n	800e494 <_printf_float+0x2e0>
 800e420:	4a1b      	ldr	r2, [pc, #108]	@ (800e490 <_printf_float+0x2dc>)
 800e422:	2301      	movs	r3, #1
 800e424:	4631      	mov	r1, r6
 800e426:	4628      	mov	r0, r5
 800e428:	47b8      	blx	r7
 800e42a:	3001      	adds	r0, #1
 800e42c:	f43f af1d 	beq.w	800e26a <_printf_float+0xb6>
 800e430:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e434:	ea59 0303 	orrs.w	r3, r9, r3
 800e438:	d102      	bne.n	800e440 <_printf_float+0x28c>
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	07d9      	lsls	r1, r3, #31
 800e43e:	d5d7      	bpl.n	800e3f0 <_printf_float+0x23c>
 800e440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e444:	4631      	mov	r1, r6
 800e446:	4628      	mov	r0, r5
 800e448:	47b8      	blx	r7
 800e44a:	3001      	adds	r0, #1
 800e44c:	f43f af0d 	beq.w	800e26a <_printf_float+0xb6>
 800e450:	f04f 0a00 	mov.w	sl, #0
 800e454:	f104 0b1a 	add.w	fp, r4, #26
 800e458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e45a:	425b      	negs	r3, r3
 800e45c:	4553      	cmp	r3, sl
 800e45e:	dc01      	bgt.n	800e464 <_printf_float+0x2b0>
 800e460:	464b      	mov	r3, r9
 800e462:	e793      	b.n	800e38c <_printf_float+0x1d8>
 800e464:	2301      	movs	r3, #1
 800e466:	465a      	mov	r2, fp
 800e468:	4631      	mov	r1, r6
 800e46a:	4628      	mov	r0, r5
 800e46c:	47b8      	blx	r7
 800e46e:	3001      	adds	r0, #1
 800e470:	f43f aefb 	beq.w	800e26a <_printf_float+0xb6>
 800e474:	f10a 0a01 	add.w	sl, sl, #1
 800e478:	e7ee      	b.n	800e458 <_printf_float+0x2a4>
 800e47a:	bf00      	nop
 800e47c:	7fefffff 	.word	0x7fefffff
 800e480:	08012068 	.word	0x08012068
 800e484:	0801206c 	.word	0x0801206c
 800e488:	08012070 	.word	0x08012070
 800e48c:	08012074 	.word	0x08012074
 800e490:	08012078 	.word	0x08012078
 800e494:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e496:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e49a:	4553      	cmp	r3, sl
 800e49c:	bfa8      	it	ge
 800e49e:	4653      	movge	r3, sl
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	4699      	mov	r9, r3
 800e4a4:	dc36      	bgt.n	800e514 <_printf_float+0x360>
 800e4a6:	f04f 0b00 	mov.w	fp, #0
 800e4aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4ae:	f104 021a 	add.w	r2, r4, #26
 800e4b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e4b4:	9306      	str	r3, [sp, #24]
 800e4b6:	eba3 0309 	sub.w	r3, r3, r9
 800e4ba:	455b      	cmp	r3, fp
 800e4bc:	dc31      	bgt.n	800e522 <_printf_float+0x36e>
 800e4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4c0:	459a      	cmp	sl, r3
 800e4c2:	dc3a      	bgt.n	800e53a <_printf_float+0x386>
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	07da      	lsls	r2, r3, #31
 800e4c8:	d437      	bmi.n	800e53a <_printf_float+0x386>
 800e4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4cc:	ebaa 0903 	sub.w	r9, sl, r3
 800e4d0:	9b06      	ldr	r3, [sp, #24]
 800e4d2:	ebaa 0303 	sub.w	r3, sl, r3
 800e4d6:	4599      	cmp	r9, r3
 800e4d8:	bfa8      	it	ge
 800e4da:	4699      	movge	r9, r3
 800e4dc:	f1b9 0f00 	cmp.w	r9, #0
 800e4e0:	dc33      	bgt.n	800e54a <_printf_float+0x396>
 800e4e2:	f04f 0800 	mov.w	r8, #0
 800e4e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4ea:	f104 0b1a 	add.w	fp, r4, #26
 800e4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f0:	ebaa 0303 	sub.w	r3, sl, r3
 800e4f4:	eba3 0309 	sub.w	r3, r3, r9
 800e4f8:	4543      	cmp	r3, r8
 800e4fa:	f77f af79 	ble.w	800e3f0 <_printf_float+0x23c>
 800e4fe:	2301      	movs	r3, #1
 800e500:	465a      	mov	r2, fp
 800e502:	4631      	mov	r1, r6
 800e504:	4628      	mov	r0, r5
 800e506:	47b8      	blx	r7
 800e508:	3001      	adds	r0, #1
 800e50a:	f43f aeae 	beq.w	800e26a <_printf_float+0xb6>
 800e50e:	f108 0801 	add.w	r8, r8, #1
 800e512:	e7ec      	b.n	800e4ee <_printf_float+0x33a>
 800e514:	4642      	mov	r2, r8
 800e516:	4631      	mov	r1, r6
 800e518:	4628      	mov	r0, r5
 800e51a:	47b8      	blx	r7
 800e51c:	3001      	adds	r0, #1
 800e51e:	d1c2      	bne.n	800e4a6 <_printf_float+0x2f2>
 800e520:	e6a3      	b.n	800e26a <_printf_float+0xb6>
 800e522:	2301      	movs	r3, #1
 800e524:	4631      	mov	r1, r6
 800e526:	4628      	mov	r0, r5
 800e528:	9206      	str	r2, [sp, #24]
 800e52a:	47b8      	blx	r7
 800e52c:	3001      	adds	r0, #1
 800e52e:	f43f ae9c 	beq.w	800e26a <_printf_float+0xb6>
 800e532:	9a06      	ldr	r2, [sp, #24]
 800e534:	f10b 0b01 	add.w	fp, fp, #1
 800e538:	e7bb      	b.n	800e4b2 <_printf_float+0x2fe>
 800e53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e53e:	4631      	mov	r1, r6
 800e540:	4628      	mov	r0, r5
 800e542:	47b8      	blx	r7
 800e544:	3001      	adds	r0, #1
 800e546:	d1c0      	bne.n	800e4ca <_printf_float+0x316>
 800e548:	e68f      	b.n	800e26a <_printf_float+0xb6>
 800e54a:	9a06      	ldr	r2, [sp, #24]
 800e54c:	464b      	mov	r3, r9
 800e54e:	4442      	add	r2, r8
 800e550:	4631      	mov	r1, r6
 800e552:	4628      	mov	r0, r5
 800e554:	47b8      	blx	r7
 800e556:	3001      	adds	r0, #1
 800e558:	d1c3      	bne.n	800e4e2 <_printf_float+0x32e>
 800e55a:	e686      	b.n	800e26a <_printf_float+0xb6>
 800e55c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e560:	f1ba 0f01 	cmp.w	sl, #1
 800e564:	dc01      	bgt.n	800e56a <_printf_float+0x3b6>
 800e566:	07db      	lsls	r3, r3, #31
 800e568:	d536      	bpl.n	800e5d8 <_printf_float+0x424>
 800e56a:	2301      	movs	r3, #1
 800e56c:	4642      	mov	r2, r8
 800e56e:	4631      	mov	r1, r6
 800e570:	4628      	mov	r0, r5
 800e572:	47b8      	blx	r7
 800e574:	3001      	adds	r0, #1
 800e576:	f43f ae78 	beq.w	800e26a <_printf_float+0xb6>
 800e57a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e57e:	4631      	mov	r1, r6
 800e580:	4628      	mov	r0, r5
 800e582:	47b8      	blx	r7
 800e584:	3001      	adds	r0, #1
 800e586:	f43f ae70 	beq.w	800e26a <_printf_float+0xb6>
 800e58a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e58e:	2200      	movs	r2, #0
 800e590:	2300      	movs	r3, #0
 800e592:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e596:	f7f2 fa6f 	bl	8000a78 <__aeabi_dcmpeq>
 800e59a:	b9c0      	cbnz	r0, 800e5ce <_printf_float+0x41a>
 800e59c:	4653      	mov	r3, sl
 800e59e:	f108 0201 	add.w	r2, r8, #1
 800e5a2:	4631      	mov	r1, r6
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	47b8      	blx	r7
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d10c      	bne.n	800e5c6 <_printf_float+0x412>
 800e5ac:	e65d      	b.n	800e26a <_printf_float+0xb6>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	465a      	mov	r2, fp
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	47b8      	blx	r7
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	f43f ae56 	beq.w	800e26a <_printf_float+0xb6>
 800e5be:	f108 0801 	add.w	r8, r8, #1
 800e5c2:	45d0      	cmp	r8, sl
 800e5c4:	dbf3      	blt.n	800e5ae <_printf_float+0x3fa>
 800e5c6:	464b      	mov	r3, r9
 800e5c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e5cc:	e6df      	b.n	800e38e <_printf_float+0x1da>
 800e5ce:	f04f 0800 	mov.w	r8, #0
 800e5d2:	f104 0b1a 	add.w	fp, r4, #26
 800e5d6:	e7f4      	b.n	800e5c2 <_printf_float+0x40e>
 800e5d8:	2301      	movs	r3, #1
 800e5da:	4642      	mov	r2, r8
 800e5dc:	e7e1      	b.n	800e5a2 <_printf_float+0x3ee>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	464a      	mov	r2, r9
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	47b8      	blx	r7
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	f43f ae3e 	beq.w	800e26a <_printf_float+0xb6>
 800e5ee:	f108 0801 	add.w	r8, r8, #1
 800e5f2:	68e3      	ldr	r3, [r4, #12]
 800e5f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5f6:	1a5b      	subs	r3, r3, r1
 800e5f8:	4543      	cmp	r3, r8
 800e5fa:	dcf0      	bgt.n	800e5de <_printf_float+0x42a>
 800e5fc:	e6fc      	b.n	800e3f8 <_printf_float+0x244>
 800e5fe:	f04f 0800 	mov.w	r8, #0
 800e602:	f104 0919 	add.w	r9, r4, #25
 800e606:	e7f4      	b.n	800e5f2 <_printf_float+0x43e>

0800e608 <_printf_common>:
 800e608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e60c:	4616      	mov	r6, r2
 800e60e:	4698      	mov	r8, r3
 800e610:	688a      	ldr	r2, [r1, #8]
 800e612:	690b      	ldr	r3, [r1, #16]
 800e614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e618:	4293      	cmp	r3, r2
 800e61a:	bfb8      	it	lt
 800e61c:	4613      	movlt	r3, r2
 800e61e:	6033      	str	r3, [r6, #0]
 800e620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e624:	4607      	mov	r7, r0
 800e626:	460c      	mov	r4, r1
 800e628:	b10a      	cbz	r2, 800e62e <_printf_common+0x26>
 800e62a:	3301      	adds	r3, #1
 800e62c:	6033      	str	r3, [r6, #0]
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	0699      	lsls	r1, r3, #26
 800e632:	bf42      	ittt	mi
 800e634:	6833      	ldrmi	r3, [r6, #0]
 800e636:	3302      	addmi	r3, #2
 800e638:	6033      	strmi	r3, [r6, #0]
 800e63a:	6825      	ldr	r5, [r4, #0]
 800e63c:	f015 0506 	ands.w	r5, r5, #6
 800e640:	d106      	bne.n	800e650 <_printf_common+0x48>
 800e642:	f104 0a19 	add.w	sl, r4, #25
 800e646:	68e3      	ldr	r3, [r4, #12]
 800e648:	6832      	ldr	r2, [r6, #0]
 800e64a:	1a9b      	subs	r3, r3, r2
 800e64c:	42ab      	cmp	r3, r5
 800e64e:	dc26      	bgt.n	800e69e <_printf_common+0x96>
 800e650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e654:	6822      	ldr	r2, [r4, #0]
 800e656:	3b00      	subs	r3, #0
 800e658:	bf18      	it	ne
 800e65a:	2301      	movne	r3, #1
 800e65c:	0692      	lsls	r2, r2, #26
 800e65e:	d42b      	bmi.n	800e6b8 <_printf_common+0xb0>
 800e660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e664:	4641      	mov	r1, r8
 800e666:	4638      	mov	r0, r7
 800e668:	47c8      	blx	r9
 800e66a:	3001      	adds	r0, #1
 800e66c:	d01e      	beq.n	800e6ac <_printf_common+0xa4>
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	6922      	ldr	r2, [r4, #16]
 800e672:	f003 0306 	and.w	r3, r3, #6
 800e676:	2b04      	cmp	r3, #4
 800e678:	bf02      	ittt	eq
 800e67a:	68e5      	ldreq	r5, [r4, #12]
 800e67c:	6833      	ldreq	r3, [r6, #0]
 800e67e:	1aed      	subeq	r5, r5, r3
 800e680:	68a3      	ldr	r3, [r4, #8]
 800e682:	bf0c      	ite	eq
 800e684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e688:	2500      	movne	r5, #0
 800e68a:	4293      	cmp	r3, r2
 800e68c:	bfc4      	itt	gt
 800e68e:	1a9b      	subgt	r3, r3, r2
 800e690:	18ed      	addgt	r5, r5, r3
 800e692:	2600      	movs	r6, #0
 800e694:	341a      	adds	r4, #26
 800e696:	42b5      	cmp	r5, r6
 800e698:	d11a      	bne.n	800e6d0 <_printf_common+0xc8>
 800e69a:	2000      	movs	r0, #0
 800e69c:	e008      	b.n	800e6b0 <_printf_common+0xa8>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	4652      	mov	r2, sl
 800e6a2:	4641      	mov	r1, r8
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	47c8      	blx	r9
 800e6a8:	3001      	adds	r0, #1
 800e6aa:	d103      	bne.n	800e6b4 <_printf_common+0xac>
 800e6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b4:	3501      	adds	r5, #1
 800e6b6:	e7c6      	b.n	800e646 <_printf_common+0x3e>
 800e6b8:	18e1      	adds	r1, r4, r3
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	2030      	movs	r0, #48	@ 0x30
 800e6be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e6c2:	4422      	add	r2, r4
 800e6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e6c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e6cc:	3302      	adds	r3, #2
 800e6ce:	e7c7      	b.n	800e660 <_printf_common+0x58>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	4641      	mov	r1, r8
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	47c8      	blx	r9
 800e6da:	3001      	adds	r0, #1
 800e6dc:	d0e6      	beq.n	800e6ac <_printf_common+0xa4>
 800e6de:	3601      	adds	r6, #1
 800e6e0:	e7d9      	b.n	800e696 <_printf_common+0x8e>
	...

0800e6e4 <_printf_i>:
 800e6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e8:	7e0f      	ldrb	r7, [r1, #24]
 800e6ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e6ec:	2f78      	cmp	r7, #120	@ 0x78
 800e6ee:	4691      	mov	r9, r2
 800e6f0:	4680      	mov	r8, r0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	469a      	mov	sl, r3
 800e6f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6fa:	d807      	bhi.n	800e70c <_printf_i+0x28>
 800e6fc:	2f62      	cmp	r7, #98	@ 0x62
 800e6fe:	d80a      	bhi.n	800e716 <_printf_i+0x32>
 800e700:	2f00      	cmp	r7, #0
 800e702:	f000 80d2 	beq.w	800e8aa <_printf_i+0x1c6>
 800e706:	2f58      	cmp	r7, #88	@ 0x58
 800e708:	f000 80b9 	beq.w	800e87e <_printf_i+0x19a>
 800e70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e714:	e03a      	b.n	800e78c <_printf_i+0xa8>
 800e716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e71a:	2b15      	cmp	r3, #21
 800e71c:	d8f6      	bhi.n	800e70c <_printf_i+0x28>
 800e71e:	a101      	add	r1, pc, #4	@ (adr r1, 800e724 <_printf_i+0x40>)
 800e720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e724:	0800e77d 	.word	0x0800e77d
 800e728:	0800e791 	.word	0x0800e791
 800e72c:	0800e70d 	.word	0x0800e70d
 800e730:	0800e70d 	.word	0x0800e70d
 800e734:	0800e70d 	.word	0x0800e70d
 800e738:	0800e70d 	.word	0x0800e70d
 800e73c:	0800e791 	.word	0x0800e791
 800e740:	0800e70d 	.word	0x0800e70d
 800e744:	0800e70d 	.word	0x0800e70d
 800e748:	0800e70d 	.word	0x0800e70d
 800e74c:	0800e70d 	.word	0x0800e70d
 800e750:	0800e891 	.word	0x0800e891
 800e754:	0800e7bb 	.word	0x0800e7bb
 800e758:	0800e84b 	.word	0x0800e84b
 800e75c:	0800e70d 	.word	0x0800e70d
 800e760:	0800e70d 	.word	0x0800e70d
 800e764:	0800e8b3 	.word	0x0800e8b3
 800e768:	0800e70d 	.word	0x0800e70d
 800e76c:	0800e7bb 	.word	0x0800e7bb
 800e770:	0800e70d 	.word	0x0800e70d
 800e774:	0800e70d 	.word	0x0800e70d
 800e778:	0800e853 	.word	0x0800e853
 800e77c:	6833      	ldr	r3, [r6, #0]
 800e77e:	1d1a      	adds	r2, r3, #4
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	6032      	str	r2, [r6, #0]
 800e784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e78c:	2301      	movs	r3, #1
 800e78e:	e09d      	b.n	800e8cc <_printf_i+0x1e8>
 800e790:	6833      	ldr	r3, [r6, #0]
 800e792:	6820      	ldr	r0, [r4, #0]
 800e794:	1d19      	adds	r1, r3, #4
 800e796:	6031      	str	r1, [r6, #0]
 800e798:	0606      	lsls	r6, r0, #24
 800e79a:	d501      	bpl.n	800e7a0 <_printf_i+0xbc>
 800e79c:	681d      	ldr	r5, [r3, #0]
 800e79e:	e003      	b.n	800e7a8 <_printf_i+0xc4>
 800e7a0:	0645      	lsls	r5, r0, #25
 800e7a2:	d5fb      	bpl.n	800e79c <_printf_i+0xb8>
 800e7a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e7a8:	2d00      	cmp	r5, #0
 800e7aa:	da03      	bge.n	800e7b4 <_printf_i+0xd0>
 800e7ac:	232d      	movs	r3, #45	@ 0x2d
 800e7ae:	426d      	negs	r5, r5
 800e7b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7b4:	4859      	ldr	r0, [pc, #356]	@ (800e91c <_printf_i+0x238>)
 800e7b6:	230a      	movs	r3, #10
 800e7b8:	e011      	b.n	800e7de <_printf_i+0xfa>
 800e7ba:	6821      	ldr	r1, [r4, #0]
 800e7bc:	6833      	ldr	r3, [r6, #0]
 800e7be:	0608      	lsls	r0, r1, #24
 800e7c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e7c4:	d402      	bmi.n	800e7cc <_printf_i+0xe8>
 800e7c6:	0649      	lsls	r1, r1, #25
 800e7c8:	bf48      	it	mi
 800e7ca:	b2ad      	uxthmi	r5, r5
 800e7cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e7ce:	4853      	ldr	r0, [pc, #332]	@ (800e91c <_printf_i+0x238>)
 800e7d0:	6033      	str	r3, [r6, #0]
 800e7d2:	bf14      	ite	ne
 800e7d4:	230a      	movne	r3, #10
 800e7d6:	2308      	moveq	r3, #8
 800e7d8:	2100      	movs	r1, #0
 800e7da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e7de:	6866      	ldr	r6, [r4, #4]
 800e7e0:	60a6      	str	r6, [r4, #8]
 800e7e2:	2e00      	cmp	r6, #0
 800e7e4:	bfa2      	ittt	ge
 800e7e6:	6821      	ldrge	r1, [r4, #0]
 800e7e8:	f021 0104 	bicge.w	r1, r1, #4
 800e7ec:	6021      	strge	r1, [r4, #0]
 800e7ee:	b90d      	cbnz	r5, 800e7f4 <_printf_i+0x110>
 800e7f0:	2e00      	cmp	r6, #0
 800e7f2:	d04b      	beq.n	800e88c <_printf_i+0x1a8>
 800e7f4:	4616      	mov	r6, r2
 800e7f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7fa:	fb03 5711 	mls	r7, r3, r1, r5
 800e7fe:	5dc7      	ldrb	r7, [r0, r7]
 800e800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e804:	462f      	mov	r7, r5
 800e806:	42bb      	cmp	r3, r7
 800e808:	460d      	mov	r5, r1
 800e80a:	d9f4      	bls.n	800e7f6 <_printf_i+0x112>
 800e80c:	2b08      	cmp	r3, #8
 800e80e:	d10b      	bne.n	800e828 <_printf_i+0x144>
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	07df      	lsls	r7, r3, #31
 800e814:	d508      	bpl.n	800e828 <_printf_i+0x144>
 800e816:	6923      	ldr	r3, [r4, #16]
 800e818:	6861      	ldr	r1, [r4, #4]
 800e81a:	4299      	cmp	r1, r3
 800e81c:	bfde      	ittt	le
 800e81e:	2330      	movle	r3, #48	@ 0x30
 800e820:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e824:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e828:	1b92      	subs	r2, r2, r6
 800e82a:	6122      	str	r2, [r4, #16]
 800e82c:	f8cd a000 	str.w	sl, [sp]
 800e830:	464b      	mov	r3, r9
 800e832:	aa03      	add	r2, sp, #12
 800e834:	4621      	mov	r1, r4
 800e836:	4640      	mov	r0, r8
 800e838:	f7ff fee6 	bl	800e608 <_printf_common>
 800e83c:	3001      	adds	r0, #1
 800e83e:	d14a      	bne.n	800e8d6 <_printf_i+0x1f2>
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	b004      	add	sp, #16
 800e846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e84a:	6823      	ldr	r3, [r4, #0]
 800e84c:	f043 0320 	orr.w	r3, r3, #32
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	4833      	ldr	r0, [pc, #204]	@ (800e920 <_printf_i+0x23c>)
 800e854:	2778      	movs	r7, #120	@ 0x78
 800e856:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	6831      	ldr	r1, [r6, #0]
 800e85e:	061f      	lsls	r7, r3, #24
 800e860:	f851 5b04 	ldr.w	r5, [r1], #4
 800e864:	d402      	bmi.n	800e86c <_printf_i+0x188>
 800e866:	065f      	lsls	r7, r3, #25
 800e868:	bf48      	it	mi
 800e86a:	b2ad      	uxthmi	r5, r5
 800e86c:	6031      	str	r1, [r6, #0]
 800e86e:	07d9      	lsls	r1, r3, #31
 800e870:	bf44      	itt	mi
 800e872:	f043 0320 	orrmi.w	r3, r3, #32
 800e876:	6023      	strmi	r3, [r4, #0]
 800e878:	b11d      	cbz	r5, 800e882 <_printf_i+0x19e>
 800e87a:	2310      	movs	r3, #16
 800e87c:	e7ac      	b.n	800e7d8 <_printf_i+0xf4>
 800e87e:	4827      	ldr	r0, [pc, #156]	@ (800e91c <_printf_i+0x238>)
 800e880:	e7e9      	b.n	800e856 <_printf_i+0x172>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	f023 0320 	bic.w	r3, r3, #32
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	e7f6      	b.n	800e87a <_printf_i+0x196>
 800e88c:	4616      	mov	r6, r2
 800e88e:	e7bd      	b.n	800e80c <_printf_i+0x128>
 800e890:	6833      	ldr	r3, [r6, #0]
 800e892:	6825      	ldr	r5, [r4, #0]
 800e894:	6961      	ldr	r1, [r4, #20]
 800e896:	1d18      	adds	r0, r3, #4
 800e898:	6030      	str	r0, [r6, #0]
 800e89a:	062e      	lsls	r6, r5, #24
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	d501      	bpl.n	800e8a4 <_printf_i+0x1c0>
 800e8a0:	6019      	str	r1, [r3, #0]
 800e8a2:	e002      	b.n	800e8aa <_printf_i+0x1c6>
 800e8a4:	0668      	lsls	r0, r5, #25
 800e8a6:	d5fb      	bpl.n	800e8a0 <_printf_i+0x1bc>
 800e8a8:	8019      	strh	r1, [r3, #0]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	6123      	str	r3, [r4, #16]
 800e8ae:	4616      	mov	r6, r2
 800e8b0:	e7bc      	b.n	800e82c <_printf_i+0x148>
 800e8b2:	6833      	ldr	r3, [r6, #0]
 800e8b4:	1d1a      	adds	r2, r3, #4
 800e8b6:	6032      	str	r2, [r6, #0]
 800e8b8:	681e      	ldr	r6, [r3, #0]
 800e8ba:	6862      	ldr	r2, [r4, #4]
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f7f1 fc5e 	bl	8000180 <memchr>
 800e8c4:	b108      	cbz	r0, 800e8ca <_printf_i+0x1e6>
 800e8c6:	1b80      	subs	r0, r0, r6
 800e8c8:	6060      	str	r0, [r4, #4]
 800e8ca:	6863      	ldr	r3, [r4, #4]
 800e8cc:	6123      	str	r3, [r4, #16]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8d4:	e7aa      	b.n	800e82c <_printf_i+0x148>
 800e8d6:	6923      	ldr	r3, [r4, #16]
 800e8d8:	4632      	mov	r2, r6
 800e8da:	4649      	mov	r1, r9
 800e8dc:	4640      	mov	r0, r8
 800e8de:	47d0      	blx	sl
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d0ad      	beq.n	800e840 <_printf_i+0x15c>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	079b      	lsls	r3, r3, #30
 800e8e8:	d413      	bmi.n	800e912 <_printf_i+0x22e>
 800e8ea:	68e0      	ldr	r0, [r4, #12]
 800e8ec:	9b03      	ldr	r3, [sp, #12]
 800e8ee:	4298      	cmp	r0, r3
 800e8f0:	bfb8      	it	lt
 800e8f2:	4618      	movlt	r0, r3
 800e8f4:	e7a6      	b.n	800e844 <_printf_i+0x160>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	4649      	mov	r1, r9
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	47d0      	blx	sl
 800e900:	3001      	adds	r0, #1
 800e902:	d09d      	beq.n	800e840 <_printf_i+0x15c>
 800e904:	3501      	adds	r5, #1
 800e906:	68e3      	ldr	r3, [r4, #12]
 800e908:	9903      	ldr	r1, [sp, #12]
 800e90a:	1a5b      	subs	r3, r3, r1
 800e90c:	42ab      	cmp	r3, r5
 800e90e:	dcf2      	bgt.n	800e8f6 <_printf_i+0x212>
 800e910:	e7eb      	b.n	800e8ea <_printf_i+0x206>
 800e912:	2500      	movs	r5, #0
 800e914:	f104 0619 	add.w	r6, r4, #25
 800e918:	e7f5      	b.n	800e906 <_printf_i+0x222>
 800e91a:	bf00      	nop
 800e91c:	0801207a 	.word	0x0801207a
 800e920:	0801208b 	.word	0x0801208b

0800e924 <std>:
 800e924:	2300      	movs	r3, #0
 800e926:	b510      	push	{r4, lr}
 800e928:	4604      	mov	r4, r0
 800e92a:	e9c0 3300 	strd	r3, r3, [r0]
 800e92e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e932:	6083      	str	r3, [r0, #8]
 800e934:	8181      	strh	r1, [r0, #12]
 800e936:	6643      	str	r3, [r0, #100]	@ 0x64
 800e938:	81c2      	strh	r2, [r0, #14]
 800e93a:	6183      	str	r3, [r0, #24]
 800e93c:	4619      	mov	r1, r3
 800e93e:	2208      	movs	r2, #8
 800e940:	305c      	adds	r0, #92	@ 0x5c
 800e942:	f000 fa19 	bl	800ed78 <memset>
 800e946:	4b0d      	ldr	r3, [pc, #52]	@ (800e97c <std+0x58>)
 800e948:	6263      	str	r3, [r4, #36]	@ 0x24
 800e94a:	4b0d      	ldr	r3, [pc, #52]	@ (800e980 <std+0x5c>)
 800e94c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e94e:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <std+0x60>)
 800e950:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e952:	4b0d      	ldr	r3, [pc, #52]	@ (800e988 <std+0x64>)
 800e954:	6323      	str	r3, [r4, #48]	@ 0x30
 800e956:	4b0d      	ldr	r3, [pc, #52]	@ (800e98c <std+0x68>)
 800e958:	6224      	str	r4, [r4, #32]
 800e95a:	429c      	cmp	r4, r3
 800e95c:	d006      	beq.n	800e96c <std+0x48>
 800e95e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e962:	4294      	cmp	r4, r2
 800e964:	d002      	beq.n	800e96c <std+0x48>
 800e966:	33d0      	adds	r3, #208	@ 0xd0
 800e968:	429c      	cmp	r4, r3
 800e96a:	d105      	bne.n	800e978 <std+0x54>
 800e96c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e974:	f000 ba92 	b.w	800ee9c <__retarget_lock_init_recursive>
 800e978:	bd10      	pop	{r4, pc}
 800e97a:	bf00      	nop
 800e97c:	0800ebc9 	.word	0x0800ebc9
 800e980:	0800ebeb 	.word	0x0800ebeb
 800e984:	0800ec23 	.word	0x0800ec23
 800e988:	0800ec47 	.word	0x0800ec47
 800e98c:	20001758 	.word	0x20001758

0800e990 <stdio_exit_handler>:
 800e990:	4a02      	ldr	r2, [pc, #8]	@ (800e99c <stdio_exit_handler+0xc>)
 800e992:	4903      	ldr	r1, [pc, #12]	@ (800e9a0 <stdio_exit_handler+0x10>)
 800e994:	4803      	ldr	r0, [pc, #12]	@ (800e9a4 <stdio_exit_handler+0x14>)
 800e996:	f000 b869 	b.w	800ea6c <_fwalk_sglue>
 800e99a:	bf00      	nop
 800e99c:	20000030 	.word	0x20000030
 800e9a0:	08010a99 	.word	0x08010a99
 800e9a4:	20000040 	.word	0x20000040

0800e9a8 <cleanup_stdio>:
 800e9a8:	6841      	ldr	r1, [r0, #4]
 800e9aa:	4b0c      	ldr	r3, [pc, #48]	@ (800e9dc <cleanup_stdio+0x34>)
 800e9ac:	4299      	cmp	r1, r3
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	d001      	beq.n	800e9b8 <cleanup_stdio+0x10>
 800e9b4:	f002 f870 	bl	8010a98 <_fflush_r>
 800e9b8:	68a1      	ldr	r1, [r4, #8]
 800e9ba:	4b09      	ldr	r3, [pc, #36]	@ (800e9e0 <cleanup_stdio+0x38>)
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	d002      	beq.n	800e9c6 <cleanup_stdio+0x1e>
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f002 f869 	bl	8010a98 <_fflush_r>
 800e9c6:	68e1      	ldr	r1, [r4, #12]
 800e9c8:	4b06      	ldr	r3, [pc, #24]	@ (800e9e4 <cleanup_stdio+0x3c>)
 800e9ca:	4299      	cmp	r1, r3
 800e9cc:	d004      	beq.n	800e9d8 <cleanup_stdio+0x30>
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d4:	f002 b860 	b.w	8010a98 <_fflush_r>
 800e9d8:	bd10      	pop	{r4, pc}
 800e9da:	bf00      	nop
 800e9dc:	20001758 	.word	0x20001758
 800e9e0:	200017c0 	.word	0x200017c0
 800e9e4:	20001828 	.word	0x20001828

0800e9e8 <global_stdio_init.part.0>:
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	4b0b      	ldr	r3, [pc, #44]	@ (800ea18 <global_stdio_init.part.0+0x30>)
 800e9ec:	4c0b      	ldr	r4, [pc, #44]	@ (800ea1c <global_stdio_init.part.0+0x34>)
 800e9ee:	4a0c      	ldr	r2, [pc, #48]	@ (800ea20 <global_stdio_init.part.0+0x38>)
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	2104      	movs	r1, #4
 800e9f8:	f7ff ff94 	bl	800e924 <std>
 800e9fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ea00:	2201      	movs	r2, #1
 800ea02:	2109      	movs	r1, #9
 800ea04:	f7ff ff8e 	bl	800e924 <std>
 800ea08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea0c:	2202      	movs	r2, #2
 800ea0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea12:	2112      	movs	r1, #18
 800ea14:	f7ff bf86 	b.w	800e924 <std>
 800ea18:	20001890 	.word	0x20001890
 800ea1c:	20001758 	.word	0x20001758
 800ea20:	0800e991 	.word	0x0800e991

0800ea24 <__sfp_lock_acquire>:
 800ea24:	4801      	ldr	r0, [pc, #4]	@ (800ea2c <__sfp_lock_acquire+0x8>)
 800ea26:	f000 ba3a 	b.w	800ee9e <__retarget_lock_acquire_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20001899 	.word	0x20001899

0800ea30 <__sfp_lock_release>:
 800ea30:	4801      	ldr	r0, [pc, #4]	@ (800ea38 <__sfp_lock_release+0x8>)
 800ea32:	f000 ba35 	b.w	800eea0 <__retarget_lock_release_recursive>
 800ea36:	bf00      	nop
 800ea38:	20001899 	.word	0x20001899

0800ea3c <__sinit>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	4604      	mov	r4, r0
 800ea40:	f7ff fff0 	bl	800ea24 <__sfp_lock_acquire>
 800ea44:	6a23      	ldr	r3, [r4, #32]
 800ea46:	b11b      	cbz	r3, 800ea50 <__sinit+0x14>
 800ea48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea4c:	f7ff bff0 	b.w	800ea30 <__sfp_lock_release>
 800ea50:	4b04      	ldr	r3, [pc, #16]	@ (800ea64 <__sinit+0x28>)
 800ea52:	6223      	str	r3, [r4, #32]
 800ea54:	4b04      	ldr	r3, [pc, #16]	@ (800ea68 <__sinit+0x2c>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1f5      	bne.n	800ea48 <__sinit+0xc>
 800ea5c:	f7ff ffc4 	bl	800e9e8 <global_stdio_init.part.0>
 800ea60:	e7f2      	b.n	800ea48 <__sinit+0xc>
 800ea62:	bf00      	nop
 800ea64:	0800e9a9 	.word	0x0800e9a9
 800ea68:	20001890 	.word	0x20001890

0800ea6c <_fwalk_sglue>:
 800ea6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea70:	4607      	mov	r7, r0
 800ea72:	4688      	mov	r8, r1
 800ea74:	4614      	mov	r4, r2
 800ea76:	2600      	movs	r6, #0
 800ea78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ea80:	d505      	bpl.n	800ea8e <_fwalk_sglue+0x22>
 800ea82:	6824      	ldr	r4, [r4, #0]
 800ea84:	2c00      	cmp	r4, #0
 800ea86:	d1f7      	bne.n	800ea78 <_fwalk_sglue+0xc>
 800ea88:	4630      	mov	r0, r6
 800ea8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea8e:	89ab      	ldrh	r3, [r5, #12]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d907      	bls.n	800eaa4 <_fwalk_sglue+0x38>
 800ea94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	d003      	beq.n	800eaa4 <_fwalk_sglue+0x38>
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	47c0      	blx	r8
 800eaa2:	4306      	orrs	r6, r0
 800eaa4:	3568      	adds	r5, #104	@ 0x68
 800eaa6:	e7e9      	b.n	800ea7c <_fwalk_sglue+0x10>

0800eaa8 <iprintf>:
 800eaa8:	b40f      	push	{r0, r1, r2, r3}
 800eaaa:	b507      	push	{r0, r1, r2, lr}
 800eaac:	4906      	ldr	r1, [pc, #24]	@ (800eac8 <iprintf+0x20>)
 800eaae:	ab04      	add	r3, sp, #16
 800eab0:	6808      	ldr	r0, [r1, #0]
 800eab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab6:	6881      	ldr	r1, [r0, #8]
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	f001 fe51 	bl	8010760 <_vfiprintf_r>
 800eabe:	b003      	add	sp, #12
 800eac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eac4:	b004      	add	sp, #16
 800eac6:	4770      	bx	lr
 800eac8:	2000003c 	.word	0x2000003c

0800eacc <_puts_r>:
 800eacc:	6a03      	ldr	r3, [r0, #32]
 800eace:	b570      	push	{r4, r5, r6, lr}
 800ead0:	6884      	ldr	r4, [r0, #8]
 800ead2:	4605      	mov	r5, r0
 800ead4:	460e      	mov	r6, r1
 800ead6:	b90b      	cbnz	r3, 800eadc <_puts_r+0x10>
 800ead8:	f7ff ffb0 	bl	800ea3c <__sinit>
 800eadc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eade:	07db      	lsls	r3, r3, #31
 800eae0:	d405      	bmi.n	800eaee <_puts_r+0x22>
 800eae2:	89a3      	ldrh	r3, [r4, #12]
 800eae4:	0598      	lsls	r0, r3, #22
 800eae6:	d402      	bmi.n	800eaee <_puts_r+0x22>
 800eae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eaea:	f000 f9d8 	bl	800ee9e <__retarget_lock_acquire_recursive>
 800eaee:	89a3      	ldrh	r3, [r4, #12]
 800eaf0:	0719      	lsls	r1, r3, #28
 800eaf2:	d502      	bpl.n	800eafa <_puts_r+0x2e>
 800eaf4:	6923      	ldr	r3, [r4, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d135      	bne.n	800eb66 <_puts_r+0x9a>
 800eafa:	4621      	mov	r1, r4
 800eafc:	4628      	mov	r0, r5
 800eafe:	f000 f8e5 	bl	800eccc <__swsetup_r>
 800eb02:	b380      	cbz	r0, 800eb66 <_puts_r+0x9a>
 800eb04:	f04f 35ff 	mov.w	r5, #4294967295
 800eb08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb0a:	07da      	lsls	r2, r3, #31
 800eb0c:	d405      	bmi.n	800eb1a <_puts_r+0x4e>
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	059b      	lsls	r3, r3, #22
 800eb12:	d402      	bmi.n	800eb1a <_puts_r+0x4e>
 800eb14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb16:	f000 f9c3 	bl	800eea0 <__retarget_lock_release_recursive>
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	da04      	bge.n	800eb2c <_puts_r+0x60>
 800eb22:	69a2      	ldr	r2, [r4, #24]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	dc17      	bgt.n	800eb58 <_puts_r+0x8c>
 800eb28:	290a      	cmp	r1, #10
 800eb2a:	d015      	beq.n	800eb58 <_puts_r+0x8c>
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	1c5a      	adds	r2, r3, #1
 800eb30:	6022      	str	r2, [r4, #0]
 800eb32:	7019      	strb	r1, [r3, #0]
 800eb34:	68a3      	ldr	r3, [r4, #8]
 800eb36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	60a3      	str	r3, [r4, #8]
 800eb3e:	2900      	cmp	r1, #0
 800eb40:	d1ed      	bne.n	800eb1e <_puts_r+0x52>
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	da11      	bge.n	800eb6a <_puts_r+0x9e>
 800eb46:	4622      	mov	r2, r4
 800eb48:	210a      	movs	r1, #10
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	f000 f87f 	bl	800ec4e <__swbuf_r>
 800eb50:	3001      	adds	r0, #1
 800eb52:	d0d7      	beq.n	800eb04 <_puts_r+0x38>
 800eb54:	250a      	movs	r5, #10
 800eb56:	e7d7      	b.n	800eb08 <_puts_r+0x3c>
 800eb58:	4622      	mov	r2, r4
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f000 f877 	bl	800ec4e <__swbuf_r>
 800eb60:	3001      	adds	r0, #1
 800eb62:	d1e7      	bne.n	800eb34 <_puts_r+0x68>
 800eb64:	e7ce      	b.n	800eb04 <_puts_r+0x38>
 800eb66:	3e01      	subs	r6, #1
 800eb68:	e7e4      	b.n	800eb34 <_puts_r+0x68>
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	6022      	str	r2, [r4, #0]
 800eb70:	220a      	movs	r2, #10
 800eb72:	701a      	strb	r2, [r3, #0]
 800eb74:	e7ee      	b.n	800eb54 <_puts_r+0x88>
	...

0800eb78 <puts>:
 800eb78:	4b02      	ldr	r3, [pc, #8]	@ (800eb84 <puts+0xc>)
 800eb7a:	4601      	mov	r1, r0
 800eb7c:	6818      	ldr	r0, [r3, #0]
 800eb7e:	f7ff bfa5 	b.w	800eacc <_puts_r>
 800eb82:	bf00      	nop
 800eb84:	2000003c 	.word	0x2000003c

0800eb88 <siprintf>:
 800eb88:	b40e      	push	{r1, r2, r3}
 800eb8a:	b500      	push	{lr}
 800eb8c:	b09c      	sub	sp, #112	@ 0x70
 800eb8e:	ab1d      	add	r3, sp, #116	@ 0x74
 800eb90:	9002      	str	r0, [sp, #8]
 800eb92:	9006      	str	r0, [sp, #24]
 800eb94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb98:	4809      	ldr	r0, [pc, #36]	@ (800ebc0 <siprintf+0x38>)
 800eb9a:	9107      	str	r1, [sp, #28]
 800eb9c:	9104      	str	r1, [sp, #16]
 800eb9e:	4909      	ldr	r1, [pc, #36]	@ (800ebc4 <siprintf+0x3c>)
 800eba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba4:	9105      	str	r1, [sp, #20]
 800eba6:	6800      	ldr	r0, [r0, #0]
 800eba8:	9301      	str	r3, [sp, #4]
 800ebaa:	a902      	add	r1, sp, #8
 800ebac:	f001 fcb2 	bl	8010514 <_svfiprintf_r>
 800ebb0:	9b02      	ldr	r3, [sp, #8]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	b01c      	add	sp, #112	@ 0x70
 800ebb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebbc:	b003      	add	sp, #12
 800ebbe:	4770      	bx	lr
 800ebc0:	2000003c 	.word	0x2000003c
 800ebc4:	ffff0208 	.word	0xffff0208

0800ebc8 <__sread>:
 800ebc8:	b510      	push	{r4, lr}
 800ebca:	460c      	mov	r4, r1
 800ebcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd0:	f000 f916 	bl	800ee00 <_read_r>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	bfab      	itete	ge
 800ebd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ebda:	89a3      	ldrhlt	r3, [r4, #12]
 800ebdc:	181b      	addge	r3, r3, r0
 800ebde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ebe2:	bfac      	ite	ge
 800ebe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ebe6:	81a3      	strhlt	r3, [r4, #12]
 800ebe8:	bd10      	pop	{r4, pc}

0800ebea <__swrite>:
 800ebea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebee:	461f      	mov	r7, r3
 800ebf0:	898b      	ldrh	r3, [r1, #12]
 800ebf2:	05db      	lsls	r3, r3, #23
 800ebf4:	4605      	mov	r5, r0
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	4616      	mov	r6, r2
 800ebfa:	d505      	bpl.n	800ec08 <__swrite+0x1e>
 800ebfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec00:	2302      	movs	r3, #2
 800ec02:	2200      	movs	r2, #0
 800ec04:	f000 f8ea 	bl	800eddc <_lseek_r>
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec12:	81a3      	strh	r3, [r4, #12]
 800ec14:	4632      	mov	r2, r6
 800ec16:	463b      	mov	r3, r7
 800ec18:	4628      	mov	r0, r5
 800ec1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1e:	f000 b901 	b.w	800ee24 <_write_r>

0800ec22 <__sseek>:
 800ec22:	b510      	push	{r4, lr}
 800ec24:	460c      	mov	r4, r1
 800ec26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec2a:	f000 f8d7 	bl	800eddc <_lseek_r>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	89a3      	ldrh	r3, [r4, #12]
 800ec32:	bf15      	itete	ne
 800ec34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec3e:	81a3      	strheq	r3, [r4, #12]
 800ec40:	bf18      	it	ne
 800ec42:	81a3      	strhne	r3, [r4, #12]
 800ec44:	bd10      	pop	{r4, pc}

0800ec46 <__sclose>:
 800ec46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec4a:	f000 b8b7 	b.w	800edbc <_close_r>

0800ec4e <__swbuf_r>:
 800ec4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec50:	460e      	mov	r6, r1
 800ec52:	4614      	mov	r4, r2
 800ec54:	4605      	mov	r5, r0
 800ec56:	b118      	cbz	r0, 800ec60 <__swbuf_r+0x12>
 800ec58:	6a03      	ldr	r3, [r0, #32]
 800ec5a:	b90b      	cbnz	r3, 800ec60 <__swbuf_r+0x12>
 800ec5c:	f7ff feee 	bl	800ea3c <__sinit>
 800ec60:	69a3      	ldr	r3, [r4, #24]
 800ec62:	60a3      	str	r3, [r4, #8]
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	071a      	lsls	r2, r3, #28
 800ec68:	d501      	bpl.n	800ec6e <__swbuf_r+0x20>
 800ec6a:	6923      	ldr	r3, [r4, #16]
 800ec6c:	b943      	cbnz	r3, 800ec80 <__swbuf_r+0x32>
 800ec6e:	4621      	mov	r1, r4
 800ec70:	4628      	mov	r0, r5
 800ec72:	f000 f82b 	bl	800eccc <__swsetup_r>
 800ec76:	b118      	cbz	r0, 800ec80 <__swbuf_r+0x32>
 800ec78:	f04f 37ff 	mov.w	r7, #4294967295
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec80:	6823      	ldr	r3, [r4, #0]
 800ec82:	6922      	ldr	r2, [r4, #16]
 800ec84:	1a98      	subs	r0, r3, r2
 800ec86:	6963      	ldr	r3, [r4, #20]
 800ec88:	b2f6      	uxtb	r6, r6
 800ec8a:	4283      	cmp	r3, r0
 800ec8c:	4637      	mov	r7, r6
 800ec8e:	dc05      	bgt.n	800ec9c <__swbuf_r+0x4e>
 800ec90:	4621      	mov	r1, r4
 800ec92:	4628      	mov	r0, r5
 800ec94:	f001 ff00 	bl	8010a98 <_fflush_r>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d1ed      	bne.n	800ec78 <__swbuf_r+0x2a>
 800ec9c:	68a3      	ldr	r3, [r4, #8]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	60a3      	str	r3, [r4, #8]
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	6022      	str	r2, [r4, #0]
 800eca8:	701e      	strb	r6, [r3, #0]
 800ecaa:	6962      	ldr	r2, [r4, #20]
 800ecac:	1c43      	adds	r3, r0, #1
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d004      	beq.n	800ecbc <__swbuf_r+0x6e>
 800ecb2:	89a3      	ldrh	r3, [r4, #12]
 800ecb4:	07db      	lsls	r3, r3, #31
 800ecb6:	d5e1      	bpl.n	800ec7c <__swbuf_r+0x2e>
 800ecb8:	2e0a      	cmp	r6, #10
 800ecba:	d1df      	bne.n	800ec7c <__swbuf_r+0x2e>
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f001 feea 	bl	8010a98 <_fflush_r>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d0d9      	beq.n	800ec7c <__swbuf_r+0x2e>
 800ecc8:	e7d6      	b.n	800ec78 <__swbuf_r+0x2a>
	...

0800eccc <__swsetup_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4b29      	ldr	r3, [pc, #164]	@ (800ed74 <__swsetup_r+0xa8>)
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	460c      	mov	r4, r1
 800ecd6:	b118      	cbz	r0, 800ece0 <__swsetup_r+0x14>
 800ecd8:	6a03      	ldr	r3, [r0, #32]
 800ecda:	b90b      	cbnz	r3, 800ece0 <__swsetup_r+0x14>
 800ecdc:	f7ff feae 	bl	800ea3c <__sinit>
 800ece0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ece4:	0719      	lsls	r1, r3, #28
 800ece6:	d422      	bmi.n	800ed2e <__swsetup_r+0x62>
 800ece8:	06da      	lsls	r2, r3, #27
 800ecea:	d407      	bmi.n	800ecfc <__swsetup_r+0x30>
 800ecec:	2209      	movs	r2, #9
 800ecee:	602a      	str	r2, [r5, #0]
 800ecf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecf4:	81a3      	strh	r3, [r4, #12]
 800ecf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfa:	e033      	b.n	800ed64 <__swsetup_r+0x98>
 800ecfc:	0758      	lsls	r0, r3, #29
 800ecfe:	d512      	bpl.n	800ed26 <__swsetup_r+0x5a>
 800ed00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed02:	b141      	cbz	r1, 800ed16 <__swsetup_r+0x4a>
 800ed04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	d002      	beq.n	800ed12 <__swsetup_r+0x46>
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f000 ff23 	bl	800fb58 <_free_r>
 800ed12:	2300      	movs	r3, #0
 800ed14:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ed1c:	81a3      	strh	r3, [r4, #12]
 800ed1e:	2300      	movs	r3, #0
 800ed20:	6063      	str	r3, [r4, #4]
 800ed22:	6923      	ldr	r3, [r4, #16]
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	89a3      	ldrh	r3, [r4, #12]
 800ed28:	f043 0308 	orr.w	r3, r3, #8
 800ed2c:	81a3      	strh	r3, [r4, #12]
 800ed2e:	6923      	ldr	r3, [r4, #16]
 800ed30:	b94b      	cbnz	r3, 800ed46 <__swsetup_r+0x7a>
 800ed32:	89a3      	ldrh	r3, [r4, #12]
 800ed34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ed38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed3c:	d003      	beq.n	800ed46 <__swsetup_r+0x7a>
 800ed3e:	4621      	mov	r1, r4
 800ed40:	4628      	mov	r0, r5
 800ed42:	f001 fef7 	bl	8010b34 <__smakebuf_r>
 800ed46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed4a:	f013 0201 	ands.w	r2, r3, #1
 800ed4e:	d00a      	beq.n	800ed66 <__swsetup_r+0x9a>
 800ed50:	2200      	movs	r2, #0
 800ed52:	60a2      	str	r2, [r4, #8]
 800ed54:	6962      	ldr	r2, [r4, #20]
 800ed56:	4252      	negs	r2, r2
 800ed58:	61a2      	str	r2, [r4, #24]
 800ed5a:	6922      	ldr	r2, [r4, #16]
 800ed5c:	b942      	cbnz	r2, 800ed70 <__swsetup_r+0xa4>
 800ed5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed62:	d1c5      	bne.n	800ecf0 <__swsetup_r+0x24>
 800ed64:	bd38      	pop	{r3, r4, r5, pc}
 800ed66:	0799      	lsls	r1, r3, #30
 800ed68:	bf58      	it	pl
 800ed6a:	6962      	ldrpl	r2, [r4, #20]
 800ed6c:	60a2      	str	r2, [r4, #8]
 800ed6e:	e7f4      	b.n	800ed5a <__swsetup_r+0x8e>
 800ed70:	2000      	movs	r0, #0
 800ed72:	e7f7      	b.n	800ed64 <__swsetup_r+0x98>
 800ed74:	2000003c 	.word	0x2000003c

0800ed78 <memset>:
 800ed78:	4402      	add	r2, r0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d100      	bne.n	800ed82 <memset+0xa>
 800ed80:	4770      	bx	lr
 800ed82:	f803 1b01 	strb.w	r1, [r3], #1
 800ed86:	e7f9      	b.n	800ed7c <memset+0x4>

0800ed88 <strrchr>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800ed8e:	4603      	mov	r3, r0
 800ed90:	d10e      	bne.n	800edb0 <strrchr+0x28>
 800ed92:	4621      	mov	r1, r4
 800ed94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed98:	f001 bf22 	b.w	8010be0 <strchr>
 800ed9c:	1c43      	adds	r3, r0, #1
 800ed9e:	4605      	mov	r5, r0
 800eda0:	4621      	mov	r1, r4
 800eda2:	4618      	mov	r0, r3
 800eda4:	f001 ff1c 	bl	8010be0 <strchr>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d1f7      	bne.n	800ed9c <strrchr+0x14>
 800edac:	4628      	mov	r0, r5
 800edae:	bd38      	pop	{r3, r4, r5, pc}
 800edb0:	2500      	movs	r5, #0
 800edb2:	e7f5      	b.n	800eda0 <strrchr+0x18>

0800edb4 <_localeconv_r>:
 800edb4:	4800      	ldr	r0, [pc, #0]	@ (800edb8 <_localeconv_r+0x4>)
 800edb6:	4770      	bx	lr
 800edb8:	2000017c 	.word	0x2000017c

0800edbc <_close_r>:
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	4d06      	ldr	r5, [pc, #24]	@ (800edd8 <_close_r+0x1c>)
 800edc0:	2300      	movs	r3, #0
 800edc2:	4604      	mov	r4, r0
 800edc4:	4608      	mov	r0, r1
 800edc6:	602b      	str	r3, [r5, #0]
 800edc8:	f7f4 fc82 	bl	80036d0 <_close>
 800edcc:	1c43      	adds	r3, r0, #1
 800edce:	d102      	bne.n	800edd6 <_close_r+0x1a>
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	b103      	cbz	r3, 800edd6 <_close_r+0x1a>
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	bd38      	pop	{r3, r4, r5, pc}
 800edd8:	20001894 	.word	0x20001894

0800eddc <_lseek_r>:
 800eddc:	b538      	push	{r3, r4, r5, lr}
 800edde:	4d07      	ldr	r5, [pc, #28]	@ (800edfc <_lseek_r+0x20>)
 800ede0:	4604      	mov	r4, r0
 800ede2:	4608      	mov	r0, r1
 800ede4:	4611      	mov	r1, r2
 800ede6:	2200      	movs	r2, #0
 800ede8:	602a      	str	r2, [r5, #0]
 800edea:	461a      	mov	r2, r3
 800edec:	f7f4 fc97 	bl	800371e <_lseek>
 800edf0:	1c43      	adds	r3, r0, #1
 800edf2:	d102      	bne.n	800edfa <_lseek_r+0x1e>
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	b103      	cbz	r3, 800edfa <_lseek_r+0x1e>
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	bd38      	pop	{r3, r4, r5, pc}
 800edfc:	20001894 	.word	0x20001894

0800ee00 <_read_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4d07      	ldr	r5, [pc, #28]	@ (800ee20 <_read_r+0x20>)
 800ee04:	4604      	mov	r4, r0
 800ee06:	4608      	mov	r0, r1
 800ee08:	4611      	mov	r1, r2
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	602a      	str	r2, [r5, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	f7f4 fc41 	bl	8003696 <_read>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d102      	bne.n	800ee1e <_read_r+0x1e>
 800ee18:	682b      	ldr	r3, [r5, #0]
 800ee1a:	b103      	cbz	r3, 800ee1e <_read_r+0x1e>
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
 800ee20:	20001894 	.word	0x20001894

0800ee24 <_write_r>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4d07      	ldr	r5, [pc, #28]	@ (800ee44 <_write_r+0x20>)
 800ee28:	4604      	mov	r4, r0
 800ee2a:	4608      	mov	r0, r1
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	2200      	movs	r2, #0
 800ee30:	602a      	str	r2, [r5, #0]
 800ee32:	461a      	mov	r2, r3
 800ee34:	f7fc fe3e 	bl	800bab4 <_write>
 800ee38:	1c43      	adds	r3, r0, #1
 800ee3a:	d102      	bne.n	800ee42 <_write_r+0x1e>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	b103      	cbz	r3, 800ee42 <_write_r+0x1e>
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	20001894 	.word	0x20001894

0800ee48 <__errno>:
 800ee48:	4b01      	ldr	r3, [pc, #4]	@ (800ee50 <__errno+0x8>)
 800ee4a:	6818      	ldr	r0, [r3, #0]
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	2000003c 	.word	0x2000003c

0800ee54 <__libc_init_array>:
 800ee54:	b570      	push	{r4, r5, r6, lr}
 800ee56:	4d0d      	ldr	r5, [pc, #52]	@ (800ee8c <__libc_init_array+0x38>)
 800ee58:	4c0d      	ldr	r4, [pc, #52]	@ (800ee90 <__libc_init_array+0x3c>)
 800ee5a:	1b64      	subs	r4, r4, r5
 800ee5c:	10a4      	asrs	r4, r4, #2
 800ee5e:	2600      	movs	r6, #0
 800ee60:	42a6      	cmp	r6, r4
 800ee62:	d109      	bne.n	800ee78 <__libc_init_array+0x24>
 800ee64:	4d0b      	ldr	r5, [pc, #44]	@ (800ee94 <__libc_init_array+0x40>)
 800ee66:	4c0c      	ldr	r4, [pc, #48]	@ (800ee98 <__libc_init_array+0x44>)
 800ee68:	f002 f804 	bl	8010e74 <_init>
 800ee6c:	1b64      	subs	r4, r4, r5
 800ee6e:	10a4      	asrs	r4, r4, #2
 800ee70:	2600      	movs	r6, #0
 800ee72:	42a6      	cmp	r6, r4
 800ee74:	d105      	bne.n	800ee82 <__libc_init_array+0x2e>
 800ee76:	bd70      	pop	{r4, r5, r6, pc}
 800ee78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee7c:	4798      	blx	r3
 800ee7e:	3601      	adds	r6, #1
 800ee80:	e7ee      	b.n	800ee60 <__libc_init_array+0xc>
 800ee82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee86:	4798      	blx	r3
 800ee88:	3601      	adds	r6, #1
 800ee8a:	e7f2      	b.n	800ee72 <__libc_init_array+0x1e>
 800ee8c:	080123e0 	.word	0x080123e0
 800ee90:	080123e0 	.word	0x080123e0
 800ee94:	080123e0 	.word	0x080123e0
 800ee98:	080123e4 	.word	0x080123e4

0800ee9c <__retarget_lock_init_recursive>:
 800ee9c:	4770      	bx	lr

0800ee9e <__retarget_lock_acquire_recursive>:
 800ee9e:	4770      	bx	lr

0800eea0 <__retarget_lock_release_recursive>:
 800eea0:	4770      	bx	lr

0800eea2 <memcpy>:
 800eea2:	440a      	add	r2, r1
 800eea4:	4291      	cmp	r1, r2
 800eea6:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeaa:	d100      	bne.n	800eeae <memcpy+0xc>
 800eeac:	4770      	bx	lr
 800eeae:	b510      	push	{r4, lr}
 800eeb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeb8:	4291      	cmp	r1, r2
 800eeba:	d1f9      	bne.n	800eeb0 <memcpy+0xe>
 800eebc:	bd10      	pop	{r4, pc}

0800eebe <quorem>:
 800eebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec2:	6903      	ldr	r3, [r0, #16]
 800eec4:	690c      	ldr	r4, [r1, #16]
 800eec6:	42a3      	cmp	r3, r4
 800eec8:	4607      	mov	r7, r0
 800eeca:	db7e      	blt.n	800efca <quorem+0x10c>
 800eecc:	3c01      	subs	r4, #1
 800eece:	f101 0814 	add.w	r8, r1, #20
 800eed2:	00a3      	lsls	r3, r4, #2
 800eed4:	f100 0514 	add.w	r5, r0, #20
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eede:	9301      	str	r3, [sp, #4]
 800eee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eee8:	3301      	adds	r3, #1
 800eeea:	429a      	cmp	r2, r3
 800eeec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eef0:	fbb2 f6f3 	udiv	r6, r2, r3
 800eef4:	d32e      	bcc.n	800ef54 <quorem+0x96>
 800eef6:	f04f 0a00 	mov.w	sl, #0
 800eefa:	46c4      	mov	ip, r8
 800eefc:	46ae      	mov	lr, r5
 800eefe:	46d3      	mov	fp, sl
 800ef00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef04:	b298      	uxth	r0, r3
 800ef06:	fb06 a000 	mla	r0, r6, r0, sl
 800ef0a:	0c02      	lsrs	r2, r0, #16
 800ef0c:	0c1b      	lsrs	r3, r3, #16
 800ef0e:	fb06 2303 	mla	r3, r6, r3, r2
 800ef12:	f8de 2000 	ldr.w	r2, [lr]
 800ef16:	b280      	uxth	r0, r0
 800ef18:	b292      	uxth	r2, r2
 800ef1a:	1a12      	subs	r2, r2, r0
 800ef1c:	445a      	add	r2, fp
 800ef1e:	f8de 0000 	ldr.w	r0, [lr]
 800ef22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ef2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ef30:	b292      	uxth	r2, r2
 800ef32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ef36:	45e1      	cmp	r9, ip
 800ef38:	f84e 2b04 	str.w	r2, [lr], #4
 800ef3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ef40:	d2de      	bcs.n	800ef00 <quorem+0x42>
 800ef42:	9b00      	ldr	r3, [sp, #0]
 800ef44:	58eb      	ldr	r3, [r5, r3]
 800ef46:	b92b      	cbnz	r3, 800ef54 <quorem+0x96>
 800ef48:	9b01      	ldr	r3, [sp, #4]
 800ef4a:	3b04      	subs	r3, #4
 800ef4c:	429d      	cmp	r5, r3
 800ef4e:	461a      	mov	r2, r3
 800ef50:	d32f      	bcc.n	800efb2 <quorem+0xf4>
 800ef52:	613c      	str	r4, [r7, #16]
 800ef54:	4638      	mov	r0, r7
 800ef56:	f001 f979 	bl	801024c <__mcmp>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	db25      	blt.n	800efaa <quorem+0xec>
 800ef5e:	4629      	mov	r1, r5
 800ef60:	2000      	movs	r0, #0
 800ef62:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef66:	f8d1 c000 	ldr.w	ip, [r1]
 800ef6a:	fa1f fe82 	uxth.w	lr, r2
 800ef6e:	fa1f f38c 	uxth.w	r3, ip
 800ef72:	eba3 030e 	sub.w	r3, r3, lr
 800ef76:	4403      	add	r3, r0
 800ef78:	0c12      	lsrs	r2, r2, #16
 800ef7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef88:	45c1      	cmp	r9, r8
 800ef8a:	f841 3b04 	str.w	r3, [r1], #4
 800ef8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef92:	d2e6      	bcs.n	800ef62 <quorem+0xa4>
 800ef94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef9c:	b922      	cbnz	r2, 800efa8 <quorem+0xea>
 800ef9e:	3b04      	subs	r3, #4
 800efa0:	429d      	cmp	r5, r3
 800efa2:	461a      	mov	r2, r3
 800efa4:	d30b      	bcc.n	800efbe <quorem+0x100>
 800efa6:	613c      	str	r4, [r7, #16]
 800efa8:	3601      	adds	r6, #1
 800efaa:	4630      	mov	r0, r6
 800efac:	b003      	add	sp, #12
 800efae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb2:	6812      	ldr	r2, [r2, #0]
 800efb4:	3b04      	subs	r3, #4
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d1cb      	bne.n	800ef52 <quorem+0x94>
 800efba:	3c01      	subs	r4, #1
 800efbc:	e7c6      	b.n	800ef4c <quorem+0x8e>
 800efbe:	6812      	ldr	r2, [r2, #0]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	2a00      	cmp	r2, #0
 800efc4:	d1ef      	bne.n	800efa6 <quorem+0xe8>
 800efc6:	3c01      	subs	r4, #1
 800efc8:	e7ea      	b.n	800efa0 <quorem+0xe2>
 800efca:	2000      	movs	r0, #0
 800efcc:	e7ee      	b.n	800efac <quorem+0xee>
	...

0800efd0 <_dtoa_r>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	69c7      	ldr	r7, [r0, #28]
 800efd6:	b099      	sub	sp, #100	@ 0x64
 800efd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800efdc:	ec55 4b10 	vmov	r4, r5, d0
 800efe0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800efe2:	9109      	str	r1, [sp, #36]	@ 0x24
 800efe4:	4683      	mov	fp, r0
 800efe6:	920e      	str	r2, [sp, #56]	@ 0x38
 800efe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efea:	b97f      	cbnz	r7, 800f00c <_dtoa_r+0x3c>
 800efec:	2010      	movs	r0, #16
 800efee:	f000 fdfd 	bl	800fbec <malloc>
 800eff2:	4602      	mov	r2, r0
 800eff4:	f8cb 001c 	str.w	r0, [fp, #28]
 800eff8:	b920      	cbnz	r0, 800f004 <_dtoa_r+0x34>
 800effa:	4ba7      	ldr	r3, [pc, #668]	@ (800f298 <_dtoa_r+0x2c8>)
 800effc:	21ef      	movs	r1, #239	@ 0xef
 800effe:	48a7      	ldr	r0, [pc, #668]	@ (800f29c <_dtoa_r+0x2cc>)
 800f000:	f001 fe2e 	bl	8010c60 <__assert_func>
 800f004:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f008:	6007      	str	r7, [r0, #0]
 800f00a:	60c7      	str	r7, [r0, #12]
 800f00c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f010:	6819      	ldr	r1, [r3, #0]
 800f012:	b159      	cbz	r1, 800f02c <_dtoa_r+0x5c>
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	604a      	str	r2, [r1, #4]
 800f018:	2301      	movs	r3, #1
 800f01a:	4093      	lsls	r3, r2
 800f01c:	608b      	str	r3, [r1, #8]
 800f01e:	4658      	mov	r0, fp
 800f020:	f000 feda 	bl	800fdd8 <_Bfree>
 800f024:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f028:	2200      	movs	r2, #0
 800f02a:	601a      	str	r2, [r3, #0]
 800f02c:	1e2b      	subs	r3, r5, #0
 800f02e:	bfb9      	ittee	lt
 800f030:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f034:	9303      	strlt	r3, [sp, #12]
 800f036:	2300      	movge	r3, #0
 800f038:	6033      	strge	r3, [r6, #0]
 800f03a:	9f03      	ldr	r7, [sp, #12]
 800f03c:	4b98      	ldr	r3, [pc, #608]	@ (800f2a0 <_dtoa_r+0x2d0>)
 800f03e:	bfbc      	itt	lt
 800f040:	2201      	movlt	r2, #1
 800f042:	6032      	strlt	r2, [r6, #0]
 800f044:	43bb      	bics	r3, r7
 800f046:	d112      	bne.n	800f06e <_dtoa_r+0x9e>
 800f048:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f04a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f054:	4323      	orrs	r3, r4
 800f056:	f000 854d 	beq.w	800faf4 <_dtoa_r+0xb24>
 800f05a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f05c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f2b4 <_dtoa_r+0x2e4>
 800f060:	2b00      	cmp	r3, #0
 800f062:	f000 854f 	beq.w	800fb04 <_dtoa_r+0xb34>
 800f066:	f10a 0303 	add.w	r3, sl, #3
 800f06a:	f000 bd49 	b.w	800fb00 <_dtoa_r+0xb30>
 800f06e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f072:	2200      	movs	r2, #0
 800f074:	ec51 0b17 	vmov	r0, r1, d7
 800f078:	2300      	movs	r3, #0
 800f07a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f07e:	f7f1 fcfb 	bl	8000a78 <__aeabi_dcmpeq>
 800f082:	4680      	mov	r8, r0
 800f084:	b158      	cbz	r0, 800f09e <_dtoa_r+0xce>
 800f086:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f088:	2301      	movs	r3, #1
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f08e:	b113      	cbz	r3, 800f096 <_dtoa_r+0xc6>
 800f090:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f092:	4b84      	ldr	r3, [pc, #528]	@ (800f2a4 <_dtoa_r+0x2d4>)
 800f094:	6013      	str	r3, [r2, #0]
 800f096:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f2b8 <_dtoa_r+0x2e8>
 800f09a:	f000 bd33 	b.w	800fb04 <_dtoa_r+0xb34>
 800f09e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f0a2:	aa16      	add	r2, sp, #88	@ 0x58
 800f0a4:	a917      	add	r1, sp, #92	@ 0x5c
 800f0a6:	4658      	mov	r0, fp
 800f0a8:	f001 f980 	bl	80103ac <__d2b>
 800f0ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f0b0:	4681      	mov	r9, r0
 800f0b2:	2e00      	cmp	r6, #0
 800f0b4:	d077      	beq.n	800f1a6 <_dtoa_r+0x1d6>
 800f0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f0bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f0c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f0cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	4b74      	ldr	r3, [pc, #464]	@ (800f2a8 <_dtoa_r+0x2d8>)
 800f0d6:	f7f1 f8af 	bl	8000238 <__aeabi_dsub>
 800f0da:	a369      	add	r3, pc, #420	@ (adr r3, 800f280 <_dtoa_r+0x2b0>)
 800f0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e0:	f7f1 fa62 	bl	80005a8 <__aeabi_dmul>
 800f0e4:	a368      	add	r3, pc, #416	@ (adr r3, 800f288 <_dtoa_r+0x2b8>)
 800f0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ea:	f7f1 f8a7 	bl	800023c <__adddf3>
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	460d      	mov	r5, r1
 800f0f4:	f7f1 f9ee 	bl	80004d4 <__aeabi_i2d>
 800f0f8:	a365      	add	r3, pc, #404	@ (adr r3, 800f290 <_dtoa_r+0x2c0>)
 800f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fe:	f7f1 fa53 	bl	80005a8 <__aeabi_dmul>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4620      	mov	r0, r4
 800f108:	4629      	mov	r1, r5
 800f10a:	f7f1 f897 	bl	800023c <__adddf3>
 800f10e:	4604      	mov	r4, r0
 800f110:	460d      	mov	r5, r1
 800f112:	f7f1 fcf9 	bl	8000b08 <__aeabi_d2iz>
 800f116:	2200      	movs	r2, #0
 800f118:	4607      	mov	r7, r0
 800f11a:	2300      	movs	r3, #0
 800f11c:	4620      	mov	r0, r4
 800f11e:	4629      	mov	r1, r5
 800f120:	f7f1 fcb4 	bl	8000a8c <__aeabi_dcmplt>
 800f124:	b140      	cbz	r0, 800f138 <_dtoa_r+0x168>
 800f126:	4638      	mov	r0, r7
 800f128:	f7f1 f9d4 	bl	80004d4 <__aeabi_i2d>
 800f12c:	4622      	mov	r2, r4
 800f12e:	462b      	mov	r3, r5
 800f130:	f7f1 fca2 	bl	8000a78 <__aeabi_dcmpeq>
 800f134:	b900      	cbnz	r0, 800f138 <_dtoa_r+0x168>
 800f136:	3f01      	subs	r7, #1
 800f138:	2f16      	cmp	r7, #22
 800f13a:	d851      	bhi.n	800f1e0 <_dtoa_r+0x210>
 800f13c:	4b5b      	ldr	r3, [pc, #364]	@ (800f2ac <_dtoa_r+0x2dc>)
 800f13e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f14a:	f7f1 fc9f 	bl	8000a8c <__aeabi_dcmplt>
 800f14e:	2800      	cmp	r0, #0
 800f150:	d048      	beq.n	800f1e4 <_dtoa_r+0x214>
 800f152:	3f01      	subs	r7, #1
 800f154:	2300      	movs	r3, #0
 800f156:	9312      	str	r3, [sp, #72]	@ 0x48
 800f158:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f15a:	1b9b      	subs	r3, r3, r6
 800f15c:	1e5a      	subs	r2, r3, #1
 800f15e:	bf44      	itt	mi
 800f160:	f1c3 0801 	rsbmi	r8, r3, #1
 800f164:	2300      	movmi	r3, #0
 800f166:	9208      	str	r2, [sp, #32]
 800f168:	bf54      	ite	pl
 800f16a:	f04f 0800 	movpl.w	r8, #0
 800f16e:	9308      	strmi	r3, [sp, #32]
 800f170:	2f00      	cmp	r7, #0
 800f172:	db39      	blt.n	800f1e8 <_dtoa_r+0x218>
 800f174:	9b08      	ldr	r3, [sp, #32]
 800f176:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f178:	443b      	add	r3, r7
 800f17a:	9308      	str	r3, [sp, #32]
 800f17c:	2300      	movs	r3, #0
 800f17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f182:	2b09      	cmp	r3, #9
 800f184:	d864      	bhi.n	800f250 <_dtoa_r+0x280>
 800f186:	2b05      	cmp	r3, #5
 800f188:	bfc4      	itt	gt
 800f18a:	3b04      	subgt	r3, #4
 800f18c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f190:	f1a3 0302 	sub.w	r3, r3, #2
 800f194:	bfcc      	ite	gt
 800f196:	2400      	movgt	r4, #0
 800f198:	2401      	movle	r4, #1
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	d863      	bhi.n	800f266 <_dtoa_r+0x296>
 800f19e:	e8df f003 	tbb	[pc, r3]
 800f1a2:	372a      	.short	0x372a
 800f1a4:	5535      	.short	0x5535
 800f1a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f1aa:	441e      	add	r6, r3
 800f1ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f1b0:	2b20      	cmp	r3, #32
 800f1b2:	bfc1      	itttt	gt
 800f1b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f1b8:	409f      	lslgt	r7, r3
 800f1ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f1be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f1c2:	bfd6      	itet	le
 800f1c4:	f1c3 0320 	rsble	r3, r3, #32
 800f1c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800f1cc:	fa04 f003 	lslle.w	r0, r4, r3
 800f1d0:	f7f1 f970 	bl	80004b4 <__aeabi_ui2d>
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f1da:	3e01      	subs	r6, #1
 800f1dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800f1de:	e777      	b.n	800f0d0 <_dtoa_r+0x100>
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	e7b8      	b.n	800f156 <_dtoa_r+0x186>
 800f1e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f1e6:	e7b7      	b.n	800f158 <_dtoa_r+0x188>
 800f1e8:	427b      	negs	r3, r7
 800f1ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	eba8 0807 	sub.w	r8, r8, r7
 800f1f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1f4:	e7c4      	b.n	800f180 <_dtoa_r+0x1b0>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	dc35      	bgt.n	800f26c <_dtoa_r+0x29c>
 800f200:	2301      	movs	r3, #1
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	9307      	str	r3, [sp, #28]
 800f206:	461a      	mov	r2, r3
 800f208:	920e      	str	r2, [sp, #56]	@ 0x38
 800f20a:	e00b      	b.n	800f224 <_dtoa_r+0x254>
 800f20c:	2301      	movs	r3, #1
 800f20e:	e7f3      	b.n	800f1f8 <_dtoa_r+0x228>
 800f210:	2300      	movs	r3, #0
 800f212:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f216:	18fb      	adds	r3, r7, r3
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	3301      	adds	r3, #1
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	9307      	str	r3, [sp, #28]
 800f220:	bfb8      	it	lt
 800f222:	2301      	movlt	r3, #1
 800f224:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f228:	2100      	movs	r1, #0
 800f22a:	2204      	movs	r2, #4
 800f22c:	f102 0514 	add.w	r5, r2, #20
 800f230:	429d      	cmp	r5, r3
 800f232:	d91f      	bls.n	800f274 <_dtoa_r+0x2a4>
 800f234:	6041      	str	r1, [r0, #4]
 800f236:	4658      	mov	r0, fp
 800f238:	f000 fd8e 	bl	800fd58 <_Balloc>
 800f23c:	4682      	mov	sl, r0
 800f23e:	2800      	cmp	r0, #0
 800f240:	d13c      	bne.n	800f2bc <_dtoa_r+0x2ec>
 800f242:	4b1b      	ldr	r3, [pc, #108]	@ (800f2b0 <_dtoa_r+0x2e0>)
 800f244:	4602      	mov	r2, r0
 800f246:	f240 11af 	movw	r1, #431	@ 0x1af
 800f24a:	e6d8      	b.n	800effe <_dtoa_r+0x2e>
 800f24c:	2301      	movs	r3, #1
 800f24e:	e7e0      	b.n	800f212 <_dtoa_r+0x242>
 800f250:	2401      	movs	r4, #1
 800f252:	2300      	movs	r3, #0
 800f254:	9309      	str	r3, [sp, #36]	@ 0x24
 800f256:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f258:	f04f 33ff 	mov.w	r3, #4294967295
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	9307      	str	r3, [sp, #28]
 800f260:	2200      	movs	r2, #0
 800f262:	2312      	movs	r3, #18
 800f264:	e7d0      	b.n	800f208 <_dtoa_r+0x238>
 800f266:	2301      	movs	r3, #1
 800f268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f26a:	e7f5      	b.n	800f258 <_dtoa_r+0x288>
 800f26c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	9307      	str	r3, [sp, #28]
 800f272:	e7d7      	b.n	800f224 <_dtoa_r+0x254>
 800f274:	3101      	adds	r1, #1
 800f276:	0052      	lsls	r2, r2, #1
 800f278:	e7d8      	b.n	800f22c <_dtoa_r+0x25c>
 800f27a:	bf00      	nop
 800f27c:	f3af 8000 	nop.w
 800f280:	636f4361 	.word	0x636f4361
 800f284:	3fd287a7 	.word	0x3fd287a7
 800f288:	8b60c8b3 	.word	0x8b60c8b3
 800f28c:	3fc68a28 	.word	0x3fc68a28
 800f290:	509f79fb 	.word	0x509f79fb
 800f294:	3fd34413 	.word	0x3fd34413
 800f298:	080120a9 	.word	0x080120a9
 800f29c:	080120c0 	.word	0x080120c0
 800f2a0:	7ff00000 	.word	0x7ff00000
 800f2a4:	08012079 	.word	0x08012079
 800f2a8:	3ff80000 	.word	0x3ff80000
 800f2ac:	080121b8 	.word	0x080121b8
 800f2b0:	08012118 	.word	0x08012118
 800f2b4:	080120a5 	.word	0x080120a5
 800f2b8:	08012078 	.word	0x08012078
 800f2bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f2c0:	6018      	str	r0, [r3, #0]
 800f2c2:	9b07      	ldr	r3, [sp, #28]
 800f2c4:	2b0e      	cmp	r3, #14
 800f2c6:	f200 80a4 	bhi.w	800f412 <_dtoa_r+0x442>
 800f2ca:	2c00      	cmp	r4, #0
 800f2cc:	f000 80a1 	beq.w	800f412 <_dtoa_r+0x442>
 800f2d0:	2f00      	cmp	r7, #0
 800f2d2:	dd33      	ble.n	800f33c <_dtoa_r+0x36c>
 800f2d4:	4bad      	ldr	r3, [pc, #692]	@ (800f58c <_dtoa_r+0x5bc>)
 800f2d6:	f007 020f 	and.w	r2, r7, #15
 800f2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2de:	ed93 7b00 	vldr	d7, [r3]
 800f2e2:	05f8      	lsls	r0, r7, #23
 800f2e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f2e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f2ec:	d516      	bpl.n	800f31c <_dtoa_r+0x34c>
 800f2ee:	4ba8      	ldr	r3, [pc, #672]	@ (800f590 <_dtoa_r+0x5c0>)
 800f2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2f8:	f7f1 fa80 	bl	80007fc <__aeabi_ddiv>
 800f2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f300:	f004 040f 	and.w	r4, r4, #15
 800f304:	2603      	movs	r6, #3
 800f306:	4da2      	ldr	r5, [pc, #648]	@ (800f590 <_dtoa_r+0x5c0>)
 800f308:	b954      	cbnz	r4, 800f320 <_dtoa_r+0x350>
 800f30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f312:	f7f1 fa73 	bl	80007fc <__aeabi_ddiv>
 800f316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f31a:	e028      	b.n	800f36e <_dtoa_r+0x39e>
 800f31c:	2602      	movs	r6, #2
 800f31e:	e7f2      	b.n	800f306 <_dtoa_r+0x336>
 800f320:	07e1      	lsls	r1, r4, #31
 800f322:	d508      	bpl.n	800f336 <_dtoa_r+0x366>
 800f324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f32c:	f7f1 f93c 	bl	80005a8 <__aeabi_dmul>
 800f330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f334:	3601      	adds	r6, #1
 800f336:	1064      	asrs	r4, r4, #1
 800f338:	3508      	adds	r5, #8
 800f33a:	e7e5      	b.n	800f308 <_dtoa_r+0x338>
 800f33c:	f000 80d2 	beq.w	800f4e4 <_dtoa_r+0x514>
 800f340:	427c      	negs	r4, r7
 800f342:	4b92      	ldr	r3, [pc, #584]	@ (800f58c <_dtoa_r+0x5bc>)
 800f344:	4d92      	ldr	r5, [pc, #584]	@ (800f590 <_dtoa_r+0x5c0>)
 800f346:	f004 020f 	and.w	r2, r4, #15
 800f34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f356:	f7f1 f927 	bl	80005a8 <__aeabi_dmul>
 800f35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f35e:	1124      	asrs	r4, r4, #4
 800f360:	2300      	movs	r3, #0
 800f362:	2602      	movs	r6, #2
 800f364:	2c00      	cmp	r4, #0
 800f366:	f040 80b2 	bne.w	800f4ce <_dtoa_r+0x4fe>
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1d3      	bne.n	800f316 <_dtoa_r+0x346>
 800f36e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f370:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 80b7 	beq.w	800f4e8 <_dtoa_r+0x518>
 800f37a:	4b86      	ldr	r3, [pc, #536]	@ (800f594 <_dtoa_r+0x5c4>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	4620      	mov	r0, r4
 800f380:	4629      	mov	r1, r5
 800f382:	f7f1 fb83 	bl	8000a8c <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	f000 80ae 	beq.w	800f4e8 <_dtoa_r+0x518>
 800f38c:	9b07      	ldr	r3, [sp, #28]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 80aa 	beq.w	800f4e8 <_dtoa_r+0x518>
 800f394:	9b00      	ldr	r3, [sp, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	dd37      	ble.n	800f40a <_dtoa_r+0x43a>
 800f39a:	1e7b      	subs	r3, r7, #1
 800f39c:	9304      	str	r3, [sp, #16]
 800f39e:	4620      	mov	r0, r4
 800f3a0:	4b7d      	ldr	r3, [pc, #500]	@ (800f598 <_dtoa_r+0x5c8>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	f7f1 f8ff 	bl	80005a8 <__aeabi_dmul>
 800f3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ae:	9c00      	ldr	r4, [sp, #0]
 800f3b0:	3601      	adds	r6, #1
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f7f1 f88e 	bl	80004d4 <__aeabi_i2d>
 800f3b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3bc:	f7f1 f8f4 	bl	80005a8 <__aeabi_dmul>
 800f3c0:	4b76      	ldr	r3, [pc, #472]	@ (800f59c <_dtoa_r+0x5cc>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f7f0 ff3a 	bl	800023c <__adddf3>
 800f3c8:	4605      	mov	r5, r0
 800f3ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	f040 808d 	bne.w	800f4ee <_dtoa_r+0x51e>
 800f3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3d8:	4b71      	ldr	r3, [pc, #452]	@ (800f5a0 <_dtoa_r+0x5d0>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f7f0 ff2c 	bl	8000238 <__aeabi_dsub>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	4633      	mov	r3, r6
 800f3ec:	f7f1 fb6c 	bl	8000ac8 <__aeabi_dcmpgt>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	f040 828b 	bne.w	800f90c <_dtoa_r+0x93c>
 800f3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3fa:	462a      	mov	r2, r5
 800f3fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f400:	f7f1 fb44 	bl	8000a8c <__aeabi_dcmplt>
 800f404:	2800      	cmp	r0, #0
 800f406:	f040 8128 	bne.w	800f65a <_dtoa_r+0x68a>
 800f40a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f40e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f412:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f414:	2b00      	cmp	r3, #0
 800f416:	f2c0 815a 	blt.w	800f6ce <_dtoa_r+0x6fe>
 800f41a:	2f0e      	cmp	r7, #14
 800f41c:	f300 8157 	bgt.w	800f6ce <_dtoa_r+0x6fe>
 800f420:	4b5a      	ldr	r3, [pc, #360]	@ (800f58c <_dtoa_r+0x5bc>)
 800f422:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f426:	ed93 7b00 	vldr	d7, [r3]
 800f42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	ed8d 7b00 	vstr	d7, [sp]
 800f432:	da03      	bge.n	800f43c <_dtoa_r+0x46c>
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	2b00      	cmp	r3, #0
 800f438:	f340 8101 	ble.w	800f63e <_dtoa_r+0x66e>
 800f43c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f440:	4656      	mov	r6, sl
 800f442:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f446:	4620      	mov	r0, r4
 800f448:	4629      	mov	r1, r5
 800f44a:	f7f1 f9d7 	bl	80007fc <__aeabi_ddiv>
 800f44e:	f7f1 fb5b 	bl	8000b08 <__aeabi_d2iz>
 800f452:	4680      	mov	r8, r0
 800f454:	f7f1 f83e 	bl	80004d4 <__aeabi_i2d>
 800f458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f45c:	f7f1 f8a4 	bl	80005a8 <__aeabi_dmul>
 800f460:	4602      	mov	r2, r0
 800f462:	460b      	mov	r3, r1
 800f464:	4620      	mov	r0, r4
 800f466:	4629      	mov	r1, r5
 800f468:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f46c:	f7f0 fee4 	bl	8000238 <__aeabi_dsub>
 800f470:	f806 4b01 	strb.w	r4, [r6], #1
 800f474:	9d07      	ldr	r5, [sp, #28]
 800f476:	eba6 040a 	sub.w	r4, r6, sl
 800f47a:	42a5      	cmp	r5, r4
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	f040 8117 	bne.w	800f6b2 <_dtoa_r+0x6e2>
 800f484:	f7f0 feda 	bl	800023c <__adddf3>
 800f488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f48c:	4604      	mov	r4, r0
 800f48e:	460d      	mov	r5, r1
 800f490:	f7f1 fb1a 	bl	8000ac8 <__aeabi_dcmpgt>
 800f494:	2800      	cmp	r0, #0
 800f496:	f040 80f9 	bne.w	800f68c <_dtoa_r+0x6bc>
 800f49a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f49e:	4620      	mov	r0, r4
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	f7f1 fae9 	bl	8000a78 <__aeabi_dcmpeq>
 800f4a6:	b118      	cbz	r0, 800f4b0 <_dtoa_r+0x4e0>
 800f4a8:	f018 0f01 	tst.w	r8, #1
 800f4ac:	f040 80ee 	bne.w	800f68c <_dtoa_r+0x6bc>
 800f4b0:	4649      	mov	r1, r9
 800f4b2:	4658      	mov	r0, fp
 800f4b4:	f000 fc90 	bl	800fdd8 <_Bfree>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	7033      	strb	r3, [r6, #0]
 800f4bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4be:	3701      	adds	r7, #1
 800f4c0:	601f      	str	r7, [r3, #0]
 800f4c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f000 831d 	beq.w	800fb04 <_dtoa_r+0xb34>
 800f4ca:	601e      	str	r6, [r3, #0]
 800f4cc:	e31a      	b.n	800fb04 <_dtoa_r+0xb34>
 800f4ce:	07e2      	lsls	r2, r4, #31
 800f4d0:	d505      	bpl.n	800f4de <_dtoa_r+0x50e>
 800f4d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4d6:	f7f1 f867 	bl	80005a8 <__aeabi_dmul>
 800f4da:	3601      	adds	r6, #1
 800f4dc:	2301      	movs	r3, #1
 800f4de:	1064      	asrs	r4, r4, #1
 800f4e0:	3508      	adds	r5, #8
 800f4e2:	e73f      	b.n	800f364 <_dtoa_r+0x394>
 800f4e4:	2602      	movs	r6, #2
 800f4e6:	e742      	b.n	800f36e <_dtoa_r+0x39e>
 800f4e8:	9c07      	ldr	r4, [sp, #28]
 800f4ea:	9704      	str	r7, [sp, #16]
 800f4ec:	e761      	b.n	800f3b2 <_dtoa_r+0x3e2>
 800f4ee:	4b27      	ldr	r3, [pc, #156]	@ (800f58c <_dtoa_r+0x5bc>)
 800f4f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f4f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4fa:	4454      	add	r4, sl
 800f4fc:	2900      	cmp	r1, #0
 800f4fe:	d053      	beq.n	800f5a8 <_dtoa_r+0x5d8>
 800f500:	4928      	ldr	r1, [pc, #160]	@ (800f5a4 <_dtoa_r+0x5d4>)
 800f502:	2000      	movs	r0, #0
 800f504:	f7f1 f97a 	bl	80007fc <__aeabi_ddiv>
 800f508:	4633      	mov	r3, r6
 800f50a:	462a      	mov	r2, r5
 800f50c:	f7f0 fe94 	bl	8000238 <__aeabi_dsub>
 800f510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f514:	4656      	mov	r6, sl
 800f516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f51a:	f7f1 faf5 	bl	8000b08 <__aeabi_d2iz>
 800f51e:	4605      	mov	r5, r0
 800f520:	f7f0 ffd8 	bl	80004d4 <__aeabi_i2d>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f52c:	f7f0 fe84 	bl	8000238 <__aeabi_dsub>
 800f530:	3530      	adds	r5, #48	@ 0x30
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f53a:	f806 5b01 	strb.w	r5, [r6], #1
 800f53e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f542:	f7f1 faa3 	bl	8000a8c <__aeabi_dcmplt>
 800f546:	2800      	cmp	r0, #0
 800f548:	d171      	bne.n	800f62e <_dtoa_r+0x65e>
 800f54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f54e:	4911      	ldr	r1, [pc, #68]	@ (800f594 <_dtoa_r+0x5c4>)
 800f550:	2000      	movs	r0, #0
 800f552:	f7f0 fe71 	bl	8000238 <__aeabi_dsub>
 800f556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f55a:	f7f1 fa97 	bl	8000a8c <__aeabi_dcmplt>
 800f55e:	2800      	cmp	r0, #0
 800f560:	f040 8095 	bne.w	800f68e <_dtoa_r+0x6be>
 800f564:	42a6      	cmp	r6, r4
 800f566:	f43f af50 	beq.w	800f40a <_dtoa_r+0x43a>
 800f56a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f56e:	4b0a      	ldr	r3, [pc, #40]	@ (800f598 <_dtoa_r+0x5c8>)
 800f570:	2200      	movs	r2, #0
 800f572:	f7f1 f819 	bl	80005a8 <__aeabi_dmul>
 800f576:	4b08      	ldr	r3, [pc, #32]	@ (800f598 <_dtoa_r+0x5c8>)
 800f578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f57c:	2200      	movs	r2, #0
 800f57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f582:	f7f1 f811 	bl	80005a8 <__aeabi_dmul>
 800f586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f58a:	e7c4      	b.n	800f516 <_dtoa_r+0x546>
 800f58c:	080121b8 	.word	0x080121b8
 800f590:	08012190 	.word	0x08012190
 800f594:	3ff00000 	.word	0x3ff00000
 800f598:	40240000 	.word	0x40240000
 800f59c:	401c0000 	.word	0x401c0000
 800f5a0:	40140000 	.word	0x40140000
 800f5a4:	3fe00000 	.word	0x3fe00000
 800f5a8:	4631      	mov	r1, r6
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	f7f0 fffc 	bl	80005a8 <__aeabi_dmul>
 800f5b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800f5b6:	4656      	mov	r6, sl
 800f5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5bc:	f7f1 faa4 	bl	8000b08 <__aeabi_d2iz>
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	f7f0 ff87 	bl	80004d4 <__aeabi_i2d>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ce:	f7f0 fe33 	bl	8000238 <__aeabi_dsub>
 800f5d2:	3530      	adds	r5, #48	@ 0x30
 800f5d4:	f806 5b01 	strb.w	r5, [r6], #1
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	42a6      	cmp	r6, r4
 800f5de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5e2:	f04f 0200 	mov.w	r2, #0
 800f5e6:	d124      	bne.n	800f632 <_dtoa_r+0x662>
 800f5e8:	4bac      	ldr	r3, [pc, #688]	@ (800f89c <_dtoa_r+0x8cc>)
 800f5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f5ee:	f7f0 fe25 	bl	800023c <__adddf3>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5fa:	f7f1 fa65 	bl	8000ac8 <__aeabi_dcmpgt>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d145      	bne.n	800f68e <_dtoa_r+0x6be>
 800f602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f606:	49a5      	ldr	r1, [pc, #660]	@ (800f89c <_dtoa_r+0x8cc>)
 800f608:	2000      	movs	r0, #0
 800f60a:	f7f0 fe15 	bl	8000238 <__aeabi_dsub>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f616:	f7f1 fa39 	bl	8000a8c <__aeabi_dcmplt>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	f43f aef5 	beq.w	800f40a <_dtoa_r+0x43a>
 800f620:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f622:	1e73      	subs	r3, r6, #1
 800f624:	9315      	str	r3, [sp, #84]	@ 0x54
 800f626:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f62a:	2b30      	cmp	r3, #48	@ 0x30
 800f62c:	d0f8      	beq.n	800f620 <_dtoa_r+0x650>
 800f62e:	9f04      	ldr	r7, [sp, #16]
 800f630:	e73e      	b.n	800f4b0 <_dtoa_r+0x4e0>
 800f632:	4b9b      	ldr	r3, [pc, #620]	@ (800f8a0 <_dtoa_r+0x8d0>)
 800f634:	f7f0 ffb8 	bl	80005a8 <__aeabi_dmul>
 800f638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f63c:	e7bc      	b.n	800f5b8 <_dtoa_r+0x5e8>
 800f63e:	d10c      	bne.n	800f65a <_dtoa_r+0x68a>
 800f640:	4b98      	ldr	r3, [pc, #608]	@ (800f8a4 <_dtoa_r+0x8d4>)
 800f642:	2200      	movs	r2, #0
 800f644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f648:	f7f0 ffae 	bl	80005a8 <__aeabi_dmul>
 800f64c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f650:	f7f1 fa30 	bl	8000ab4 <__aeabi_dcmpge>
 800f654:	2800      	cmp	r0, #0
 800f656:	f000 8157 	beq.w	800f908 <_dtoa_r+0x938>
 800f65a:	2400      	movs	r4, #0
 800f65c:	4625      	mov	r5, r4
 800f65e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f660:	43db      	mvns	r3, r3
 800f662:	9304      	str	r3, [sp, #16]
 800f664:	4656      	mov	r6, sl
 800f666:	2700      	movs	r7, #0
 800f668:	4621      	mov	r1, r4
 800f66a:	4658      	mov	r0, fp
 800f66c:	f000 fbb4 	bl	800fdd8 <_Bfree>
 800f670:	2d00      	cmp	r5, #0
 800f672:	d0dc      	beq.n	800f62e <_dtoa_r+0x65e>
 800f674:	b12f      	cbz	r7, 800f682 <_dtoa_r+0x6b2>
 800f676:	42af      	cmp	r7, r5
 800f678:	d003      	beq.n	800f682 <_dtoa_r+0x6b2>
 800f67a:	4639      	mov	r1, r7
 800f67c:	4658      	mov	r0, fp
 800f67e:	f000 fbab 	bl	800fdd8 <_Bfree>
 800f682:	4629      	mov	r1, r5
 800f684:	4658      	mov	r0, fp
 800f686:	f000 fba7 	bl	800fdd8 <_Bfree>
 800f68a:	e7d0      	b.n	800f62e <_dtoa_r+0x65e>
 800f68c:	9704      	str	r7, [sp, #16]
 800f68e:	4633      	mov	r3, r6
 800f690:	461e      	mov	r6, r3
 800f692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f696:	2a39      	cmp	r2, #57	@ 0x39
 800f698:	d107      	bne.n	800f6aa <_dtoa_r+0x6da>
 800f69a:	459a      	cmp	sl, r3
 800f69c:	d1f8      	bne.n	800f690 <_dtoa_r+0x6c0>
 800f69e:	9a04      	ldr	r2, [sp, #16]
 800f6a0:	3201      	adds	r2, #1
 800f6a2:	9204      	str	r2, [sp, #16]
 800f6a4:	2230      	movs	r2, #48	@ 0x30
 800f6a6:	f88a 2000 	strb.w	r2, [sl]
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	3201      	adds	r2, #1
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	e7bd      	b.n	800f62e <_dtoa_r+0x65e>
 800f6b2:	4b7b      	ldr	r3, [pc, #492]	@ (800f8a0 <_dtoa_r+0x8d0>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f7f0 ff77 	bl	80005a8 <__aeabi_dmul>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4604      	mov	r4, r0
 800f6c0:	460d      	mov	r5, r1
 800f6c2:	f7f1 f9d9 	bl	8000a78 <__aeabi_dcmpeq>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	f43f aebb 	beq.w	800f442 <_dtoa_r+0x472>
 800f6cc:	e6f0      	b.n	800f4b0 <_dtoa_r+0x4e0>
 800f6ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f6d0:	2a00      	cmp	r2, #0
 800f6d2:	f000 80db 	beq.w	800f88c <_dtoa_r+0x8bc>
 800f6d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6d8:	2a01      	cmp	r2, #1
 800f6da:	f300 80bf 	bgt.w	800f85c <_dtoa_r+0x88c>
 800f6de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f6e0:	2a00      	cmp	r2, #0
 800f6e2:	f000 80b7 	beq.w	800f854 <_dtoa_r+0x884>
 800f6e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f6ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f6ec:	4646      	mov	r6, r8
 800f6ee:	9a08      	ldr	r2, [sp, #32]
 800f6f0:	2101      	movs	r1, #1
 800f6f2:	441a      	add	r2, r3
 800f6f4:	4658      	mov	r0, fp
 800f6f6:	4498      	add	r8, r3
 800f6f8:	9208      	str	r2, [sp, #32]
 800f6fa:	f000 fc21 	bl	800ff40 <__i2b>
 800f6fe:	4605      	mov	r5, r0
 800f700:	b15e      	cbz	r6, 800f71a <_dtoa_r+0x74a>
 800f702:	9b08      	ldr	r3, [sp, #32]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd08      	ble.n	800f71a <_dtoa_r+0x74a>
 800f708:	42b3      	cmp	r3, r6
 800f70a:	9a08      	ldr	r2, [sp, #32]
 800f70c:	bfa8      	it	ge
 800f70e:	4633      	movge	r3, r6
 800f710:	eba8 0803 	sub.w	r8, r8, r3
 800f714:	1af6      	subs	r6, r6, r3
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	9308      	str	r3, [sp, #32]
 800f71a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f71c:	b1f3      	cbz	r3, 800f75c <_dtoa_r+0x78c>
 800f71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80b7 	beq.w	800f894 <_dtoa_r+0x8c4>
 800f726:	b18c      	cbz	r4, 800f74c <_dtoa_r+0x77c>
 800f728:	4629      	mov	r1, r5
 800f72a:	4622      	mov	r2, r4
 800f72c:	4658      	mov	r0, fp
 800f72e:	f000 fcc7 	bl	80100c0 <__pow5mult>
 800f732:	464a      	mov	r2, r9
 800f734:	4601      	mov	r1, r0
 800f736:	4605      	mov	r5, r0
 800f738:	4658      	mov	r0, fp
 800f73a:	f000 fc17 	bl	800ff6c <__multiply>
 800f73e:	4649      	mov	r1, r9
 800f740:	9004      	str	r0, [sp, #16]
 800f742:	4658      	mov	r0, fp
 800f744:	f000 fb48 	bl	800fdd8 <_Bfree>
 800f748:	9b04      	ldr	r3, [sp, #16]
 800f74a:	4699      	mov	r9, r3
 800f74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f74e:	1b1a      	subs	r2, r3, r4
 800f750:	d004      	beq.n	800f75c <_dtoa_r+0x78c>
 800f752:	4649      	mov	r1, r9
 800f754:	4658      	mov	r0, fp
 800f756:	f000 fcb3 	bl	80100c0 <__pow5mult>
 800f75a:	4681      	mov	r9, r0
 800f75c:	2101      	movs	r1, #1
 800f75e:	4658      	mov	r0, fp
 800f760:	f000 fbee 	bl	800ff40 <__i2b>
 800f764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f766:	4604      	mov	r4, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 81cf 	beq.w	800fb0c <_dtoa_r+0xb3c>
 800f76e:	461a      	mov	r2, r3
 800f770:	4601      	mov	r1, r0
 800f772:	4658      	mov	r0, fp
 800f774:	f000 fca4 	bl	80100c0 <__pow5mult>
 800f778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	4604      	mov	r4, r0
 800f77e:	f300 8095 	bgt.w	800f8ac <_dtoa_r+0x8dc>
 800f782:	9b02      	ldr	r3, [sp, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f040 8087 	bne.w	800f898 <_dtoa_r+0x8c8>
 800f78a:	9b03      	ldr	r3, [sp, #12]
 800f78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f790:	2b00      	cmp	r3, #0
 800f792:	f040 8089 	bne.w	800f8a8 <_dtoa_r+0x8d8>
 800f796:	9b03      	ldr	r3, [sp, #12]
 800f798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f79c:	0d1b      	lsrs	r3, r3, #20
 800f79e:	051b      	lsls	r3, r3, #20
 800f7a0:	b12b      	cbz	r3, 800f7ae <_dtoa_r+0x7de>
 800f7a2:	9b08      	ldr	r3, [sp, #32]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	9308      	str	r3, [sp, #32]
 800f7a8:	f108 0801 	add.w	r8, r8, #1
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	f000 81b0 	beq.w	800fb18 <_dtoa_r+0xb48>
 800f7b8:	6923      	ldr	r3, [r4, #16]
 800f7ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f7be:	6918      	ldr	r0, [r3, #16]
 800f7c0:	f000 fb72 	bl	800fea8 <__hi0bits>
 800f7c4:	f1c0 0020 	rsb	r0, r0, #32
 800f7c8:	9b08      	ldr	r3, [sp, #32]
 800f7ca:	4418      	add	r0, r3
 800f7cc:	f010 001f 	ands.w	r0, r0, #31
 800f7d0:	d077      	beq.n	800f8c2 <_dtoa_r+0x8f2>
 800f7d2:	f1c0 0320 	rsb	r3, r0, #32
 800f7d6:	2b04      	cmp	r3, #4
 800f7d8:	dd6b      	ble.n	800f8b2 <_dtoa_r+0x8e2>
 800f7da:	9b08      	ldr	r3, [sp, #32]
 800f7dc:	f1c0 001c 	rsb	r0, r0, #28
 800f7e0:	4403      	add	r3, r0
 800f7e2:	4480      	add	r8, r0
 800f7e4:	4406      	add	r6, r0
 800f7e6:	9308      	str	r3, [sp, #32]
 800f7e8:	f1b8 0f00 	cmp.w	r8, #0
 800f7ec:	dd05      	ble.n	800f7fa <_dtoa_r+0x82a>
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	4642      	mov	r2, r8
 800f7f2:	4658      	mov	r0, fp
 800f7f4:	f000 fcbe 	bl	8010174 <__lshift>
 800f7f8:	4681      	mov	r9, r0
 800f7fa:	9b08      	ldr	r3, [sp, #32]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dd05      	ble.n	800f80c <_dtoa_r+0x83c>
 800f800:	4621      	mov	r1, r4
 800f802:	461a      	mov	r2, r3
 800f804:	4658      	mov	r0, fp
 800f806:	f000 fcb5 	bl	8010174 <__lshift>
 800f80a:	4604      	mov	r4, r0
 800f80c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d059      	beq.n	800f8c6 <_dtoa_r+0x8f6>
 800f812:	4621      	mov	r1, r4
 800f814:	4648      	mov	r0, r9
 800f816:	f000 fd19 	bl	801024c <__mcmp>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	da53      	bge.n	800f8c6 <_dtoa_r+0x8f6>
 800f81e:	1e7b      	subs	r3, r7, #1
 800f820:	9304      	str	r3, [sp, #16]
 800f822:	4649      	mov	r1, r9
 800f824:	2300      	movs	r3, #0
 800f826:	220a      	movs	r2, #10
 800f828:	4658      	mov	r0, fp
 800f82a:	f000 faf7 	bl	800fe1c <__multadd>
 800f82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f830:	4681      	mov	r9, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	f000 8172 	beq.w	800fb1c <_dtoa_r+0xb4c>
 800f838:	2300      	movs	r3, #0
 800f83a:	4629      	mov	r1, r5
 800f83c:	220a      	movs	r2, #10
 800f83e:	4658      	mov	r0, fp
 800f840:	f000 faec 	bl	800fe1c <__multadd>
 800f844:	9b00      	ldr	r3, [sp, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	4605      	mov	r5, r0
 800f84a:	dc67      	bgt.n	800f91c <_dtoa_r+0x94c>
 800f84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f84e:	2b02      	cmp	r3, #2
 800f850:	dc41      	bgt.n	800f8d6 <_dtoa_r+0x906>
 800f852:	e063      	b.n	800f91c <_dtoa_r+0x94c>
 800f854:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f856:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f85a:	e746      	b.n	800f6ea <_dtoa_r+0x71a>
 800f85c:	9b07      	ldr	r3, [sp, #28]
 800f85e:	1e5c      	subs	r4, r3, #1
 800f860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f862:	42a3      	cmp	r3, r4
 800f864:	bfbf      	itttt	lt
 800f866:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f868:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f86a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f86c:	1ae3      	sublt	r3, r4, r3
 800f86e:	bfb4      	ite	lt
 800f870:	18d2      	addlt	r2, r2, r3
 800f872:	1b1c      	subge	r4, r3, r4
 800f874:	9b07      	ldr	r3, [sp, #28]
 800f876:	bfbc      	itt	lt
 800f878:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f87a:	2400      	movlt	r4, #0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	bfb5      	itete	lt
 800f880:	eba8 0603 	sublt.w	r6, r8, r3
 800f884:	9b07      	ldrge	r3, [sp, #28]
 800f886:	2300      	movlt	r3, #0
 800f888:	4646      	movge	r6, r8
 800f88a:	e730      	b.n	800f6ee <_dtoa_r+0x71e>
 800f88c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f88e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f890:	4646      	mov	r6, r8
 800f892:	e735      	b.n	800f700 <_dtoa_r+0x730>
 800f894:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f896:	e75c      	b.n	800f752 <_dtoa_r+0x782>
 800f898:	2300      	movs	r3, #0
 800f89a:	e788      	b.n	800f7ae <_dtoa_r+0x7de>
 800f89c:	3fe00000 	.word	0x3fe00000
 800f8a0:	40240000 	.word	0x40240000
 800f8a4:	40140000 	.word	0x40140000
 800f8a8:	9b02      	ldr	r3, [sp, #8]
 800f8aa:	e780      	b.n	800f7ae <_dtoa_r+0x7de>
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8b0:	e782      	b.n	800f7b8 <_dtoa_r+0x7e8>
 800f8b2:	d099      	beq.n	800f7e8 <_dtoa_r+0x818>
 800f8b4:	9a08      	ldr	r2, [sp, #32]
 800f8b6:	331c      	adds	r3, #28
 800f8b8:	441a      	add	r2, r3
 800f8ba:	4498      	add	r8, r3
 800f8bc:	441e      	add	r6, r3
 800f8be:	9208      	str	r2, [sp, #32]
 800f8c0:	e792      	b.n	800f7e8 <_dtoa_r+0x818>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	e7f6      	b.n	800f8b4 <_dtoa_r+0x8e4>
 800f8c6:	9b07      	ldr	r3, [sp, #28]
 800f8c8:	9704      	str	r7, [sp, #16]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dc20      	bgt.n	800f910 <_dtoa_r+0x940>
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	dd1e      	ble.n	800f914 <_dtoa_r+0x944>
 800f8d6:	9b00      	ldr	r3, [sp, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f47f aec0 	bne.w	800f65e <_dtoa_r+0x68e>
 800f8de:	4621      	mov	r1, r4
 800f8e0:	2205      	movs	r2, #5
 800f8e2:	4658      	mov	r0, fp
 800f8e4:	f000 fa9a 	bl	800fe1c <__multadd>
 800f8e8:	4601      	mov	r1, r0
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	4648      	mov	r0, r9
 800f8ee:	f000 fcad 	bl	801024c <__mcmp>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f77f aeb3 	ble.w	800f65e <_dtoa_r+0x68e>
 800f8f8:	4656      	mov	r6, sl
 800f8fa:	2331      	movs	r3, #49	@ 0x31
 800f8fc:	f806 3b01 	strb.w	r3, [r6], #1
 800f900:	9b04      	ldr	r3, [sp, #16]
 800f902:	3301      	adds	r3, #1
 800f904:	9304      	str	r3, [sp, #16]
 800f906:	e6ae      	b.n	800f666 <_dtoa_r+0x696>
 800f908:	9c07      	ldr	r4, [sp, #28]
 800f90a:	9704      	str	r7, [sp, #16]
 800f90c:	4625      	mov	r5, r4
 800f90e:	e7f3      	b.n	800f8f8 <_dtoa_r+0x928>
 800f910:	9b07      	ldr	r3, [sp, #28]
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f916:	2b00      	cmp	r3, #0
 800f918:	f000 8104 	beq.w	800fb24 <_dtoa_r+0xb54>
 800f91c:	2e00      	cmp	r6, #0
 800f91e:	dd05      	ble.n	800f92c <_dtoa_r+0x95c>
 800f920:	4629      	mov	r1, r5
 800f922:	4632      	mov	r2, r6
 800f924:	4658      	mov	r0, fp
 800f926:	f000 fc25 	bl	8010174 <__lshift>
 800f92a:	4605      	mov	r5, r0
 800f92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d05a      	beq.n	800f9e8 <_dtoa_r+0xa18>
 800f932:	6869      	ldr	r1, [r5, #4]
 800f934:	4658      	mov	r0, fp
 800f936:	f000 fa0f 	bl	800fd58 <_Balloc>
 800f93a:	4606      	mov	r6, r0
 800f93c:	b928      	cbnz	r0, 800f94a <_dtoa_r+0x97a>
 800f93e:	4b84      	ldr	r3, [pc, #528]	@ (800fb50 <_dtoa_r+0xb80>)
 800f940:	4602      	mov	r2, r0
 800f942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f946:	f7ff bb5a 	b.w	800effe <_dtoa_r+0x2e>
 800f94a:	692a      	ldr	r2, [r5, #16]
 800f94c:	3202      	adds	r2, #2
 800f94e:	0092      	lsls	r2, r2, #2
 800f950:	f105 010c 	add.w	r1, r5, #12
 800f954:	300c      	adds	r0, #12
 800f956:	f7ff faa4 	bl	800eea2 <memcpy>
 800f95a:	2201      	movs	r2, #1
 800f95c:	4631      	mov	r1, r6
 800f95e:	4658      	mov	r0, fp
 800f960:	f000 fc08 	bl	8010174 <__lshift>
 800f964:	f10a 0301 	add.w	r3, sl, #1
 800f968:	9307      	str	r3, [sp, #28]
 800f96a:	9b00      	ldr	r3, [sp, #0]
 800f96c:	4453      	add	r3, sl
 800f96e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f970:	9b02      	ldr	r3, [sp, #8]
 800f972:	f003 0301 	and.w	r3, r3, #1
 800f976:	462f      	mov	r7, r5
 800f978:	930a      	str	r3, [sp, #40]	@ 0x28
 800f97a:	4605      	mov	r5, r0
 800f97c:	9b07      	ldr	r3, [sp, #28]
 800f97e:	4621      	mov	r1, r4
 800f980:	3b01      	subs	r3, #1
 800f982:	4648      	mov	r0, r9
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	f7ff fa9a 	bl	800eebe <quorem>
 800f98a:	4639      	mov	r1, r7
 800f98c:	9002      	str	r0, [sp, #8]
 800f98e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f992:	4648      	mov	r0, r9
 800f994:	f000 fc5a 	bl	801024c <__mcmp>
 800f998:	462a      	mov	r2, r5
 800f99a:	9008      	str	r0, [sp, #32]
 800f99c:	4621      	mov	r1, r4
 800f99e:	4658      	mov	r0, fp
 800f9a0:	f000 fc70 	bl	8010284 <__mdiff>
 800f9a4:	68c2      	ldr	r2, [r0, #12]
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	bb02      	cbnz	r2, 800f9ec <_dtoa_r+0xa1c>
 800f9aa:	4601      	mov	r1, r0
 800f9ac:	4648      	mov	r0, r9
 800f9ae:	f000 fc4d 	bl	801024c <__mcmp>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	4658      	mov	r0, fp
 800f9b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9ba:	f000 fa0d 	bl	800fdd8 <_Bfree>
 800f9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9c2:	9e07      	ldr	r6, [sp, #28]
 800f9c4:	ea43 0102 	orr.w	r1, r3, r2
 800f9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9ca:	4319      	orrs	r1, r3
 800f9cc:	d110      	bne.n	800f9f0 <_dtoa_r+0xa20>
 800f9ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9d2:	d029      	beq.n	800fa28 <_dtoa_r+0xa58>
 800f9d4:	9b08      	ldr	r3, [sp, #32]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	dd02      	ble.n	800f9e0 <_dtoa_r+0xa10>
 800f9da:	9b02      	ldr	r3, [sp, #8]
 800f9dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f9e0:	9b00      	ldr	r3, [sp, #0]
 800f9e2:	f883 8000 	strb.w	r8, [r3]
 800f9e6:	e63f      	b.n	800f668 <_dtoa_r+0x698>
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	e7bb      	b.n	800f964 <_dtoa_r+0x994>
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	e7e1      	b.n	800f9b4 <_dtoa_r+0x9e4>
 800f9f0:	9b08      	ldr	r3, [sp, #32]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	db04      	blt.n	800fa00 <_dtoa_r+0xa30>
 800f9f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9f8:	430b      	orrs	r3, r1
 800f9fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f9fc:	430b      	orrs	r3, r1
 800f9fe:	d120      	bne.n	800fa42 <_dtoa_r+0xa72>
 800fa00:	2a00      	cmp	r2, #0
 800fa02:	dded      	ble.n	800f9e0 <_dtoa_r+0xa10>
 800fa04:	4649      	mov	r1, r9
 800fa06:	2201      	movs	r2, #1
 800fa08:	4658      	mov	r0, fp
 800fa0a:	f000 fbb3 	bl	8010174 <__lshift>
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4681      	mov	r9, r0
 800fa12:	f000 fc1b 	bl	801024c <__mcmp>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	dc03      	bgt.n	800fa22 <_dtoa_r+0xa52>
 800fa1a:	d1e1      	bne.n	800f9e0 <_dtoa_r+0xa10>
 800fa1c:	f018 0f01 	tst.w	r8, #1
 800fa20:	d0de      	beq.n	800f9e0 <_dtoa_r+0xa10>
 800fa22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa26:	d1d8      	bne.n	800f9da <_dtoa_r+0xa0a>
 800fa28:	9a00      	ldr	r2, [sp, #0]
 800fa2a:	2339      	movs	r3, #57	@ 0x39
 800fa2c:	7013      	strb	r3, [r2, #0]
 800fa2e:	4633      	mov	r3, r6
 800fa30:	461e      	mov	r6, r3
 800fa32:	3b01      	subs	r3, #1
 800fa34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fa38:	2a39      	cmp	r2, #57	@ 0x39
 800fa3a:	d052      	beq.n	800fae2 <_dtoa_r+0xb12>
 800fa3c:	3201      	adds	r2, #1
 800fa3e:	701a      	strb	r2, [r3, #0]
 800fa40:	e612      	b.n	800f668 <_dtoa_r+0x698>
 800fa42:	2a00      	cmp	r2, #0
 800fa44:	dd07      	ble.n	800fa56 <_dtoa_r+0xa86>
 800fa46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa4a:	d0ed      	beq.n	800fa28 <_dtoa_r+0xa58>
 800fa4c:	9a00      	ldr	r2, [sp, #0]
 800fa4e:	f108 0301 	add.w	r3, r8, #1
 800fa52:	7013      	strb	r3, [r2, #0]
 800fa54:	e608      	b.n	800f668 <_dtoa_r+0x698>
 800fa56:	9b07      	ldr	r3, [sp, #28]
 800fa58:	9a07      	ldr	r2, [sp, #28]
 800fa5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fa5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d028      	beq.n	800fab6 <_dtoa_r+0xae6>
 800fa64:	4649      	mov	r1, r9
 800fa66:	2300      	movs	r3, #0
 800fa68:	220a      	movs	r2, #10
 800fa6a:	4658      	mov	r0, fp
 800fa6c:	f000 f9d6 	bl	800fe1c <__multadd>
 800fa70:	42af      	cmp	r7, r5
 800fa72:	4681      	mov	r9, r0
 800fa74:	f04f 0300 	mov.w	r3, #0
 800fa78:	f04f 020a 	mov.w	r2, #10
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	4658      	mov	r0, fp
 800fa80:	d107      	bne.n	800fa92 <_dtoa_r+0xac2>
 800fa82:	f000 f9cb 	bl	800fe1c <__multadd>
 800fa86:	4607      	mov	r7, r0
 800fa88:	4605      	mov	r5, r0
 800fa8a:	9b07      	ldr	r3, [sp, #28]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	9307      	str	r3, [sp, #28]
 800fa90:	e774      	b.n	800f97c <_dtoa_r+0x9ac>
 800fa92:	f000 f9c3 	bl	800fe1c <__multadd>
 800fa96:	4629      	mov	r1, r5
 800fa98:	4607      	mov	r7, r0
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	220a      	movs	r2, #10
 800fa9e:	4658      	mov	r0, fp
 800faa0:	f000 f9bc 	bl	800fe1c <__multadd>
 800faa4:	4605      	mov	r5, r0
 800faa6:	e7f0      	b.n	800fa8a <_dtoa_r+0xaba>
 800faa8:	9b00      	ldr	r3, [sp, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfcc      	ite	gt
 800faae:	461e      	movgt	r6, r3
 800fab0:	2601      	movle	r6, #1
 800fab2:	4456      	add	r6, sl
 800fab4:	2700      	movs	r7, #0
 800fab6:	4649      	mov	r1, r9
 800fab8:	2201      	movs	r2, #1
 800faba:	4658      	mov	r0, fp
 800fabc:	f000 fb5a 	bl	8010174 <__lshift>
 800fac0:	4621      	mov	r1, r4
 800fac2:	4681      	mov	r9, r0
 800fac4:	f000 fbc2 	bl	801024c <__mcmp>
 800fac8:	2800      	cmp	r0, #0
 800faca:	dcb0      	bgt.n	800fa2e <_dtoa_r+0xa5e>
 800facc:	d102      	bne.n	800fad4 <_dtoa_r+0xb04>
 800face:	f018 0f01 	tst.w	r8, #1
 800fad2:	d1ac      	bne.n	800fa2e <_dtoa_r+0xa5e>
 800fad4:	4633      	mov	r3, r6
 800fad6:	461e      	mov	r6, r3
 800fad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fadc:	2a30      	cmp	r2, #48	@ 0x30
 800fade:	d0fa      	beq.n	800fad6 <_dtoa_r+0xb06>
 800fae0:	e5c2      	b.n	800f668 <_dtoa_r+0x698>
 800fae2:	459a      	cmp	sl, r3
 800fae4:	d1a4      	bne.n	800fa30 <_dtoa_r+0xa60>
 800fae6:	9b04      	ldr	r3, [sp, #16]
 800fae8:	3301      	adds	r3, #1
 800faea:	9304      	str	r3, [sp, #16]
 800faec:	2331      	movs	r3, #49	@ 0x31
 800faee:	f88a 3000 	strb.w	r3, [sl]
 800faf2:	e5b9      	b.n	800f668 <_dtoa_r+0x698>
 800faf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800faf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fb54 <_dtoa_r+0xb84>
 800fafa:	b11b      	cbz	r3, 800fb04 <_dtoa_r+0xb34>
 800fafc:	f10a 0308 	add.w	r3, sl, #8
 800fb00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb02:	6013      	str	r3, [r2, #0]
 800fb04:	4650      	mov	r0, sl
 800fb06:	b019      	add	sp, #100	@ 0x64
 800fb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	f77f ae37 	ble.w	800f782 <_dtoa_r+0x7b2>
 800fb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb16:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb18:	2001      	movs	r0, #1
 800fb1a:	e655      	b.n	800f7c8 <_dtoa_r+0x7f8>
 800fb1c:	9b00      	ldr	r3, [sp, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f77f aed6 	ble.w	800f8d0 <_dtoa_r+0x900>
 800fb24:	4656      	mov	r6, sl
 800fb26:	4621      	mov	r1, r4
 800fb28:	4648      	mov	r0, r9
 800fb2a:	f7ff f9c8 	bl	800eebe <quorem>
 800fb2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fb32:	f806 8b01 	strb.w	r8, [r6], #1
 800fb36:	9b00      	ldr	r3, [sp, #0]
 800fb38:	eba6 020a 	sub.w	r2, r6, sl
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	ddb3      	ble.n	800faa8 <_dtoa_r+0xad8>
 800fb40:	4649      	mov	r1, r9
 800fb42:	2300      	movs	r3, #0
 800fb44:	220a      	movs	r2, #10
 800fb46:	4658      	mov	r0, fp
 800fb48:	f000 f968 	bl	800fe1c <__multadd>
 800fb4c:	4681      	mov	r9, r0
 800fb4e:	e7ea      	b.n	800fb26 <_dtoa_r+0xb56>
 800fb50:	08012118 	.word	0x08012118
 800fb54:	0801209c 	.word	0x0801209c

0800fb58 <_free_r>:
 800fb58:	b538      	push	{r3, r4, r5, lr}
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	2900      	cmp	r1, #0
 800fb5e:	d041      	beq.n	800fbe4 <_free_r+0x8c>
 800fb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb64:	1f0c      	subs	r4, r1, #4
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	bfb8      	it	lt
 800fb6a:	18e4      	addlt	r4, r4, r3
 800fb6c:	f000 f8e8 	bl	800fd40 <__malloc_lock>
 800fb70:	4a1d      	ldr	r2, [pc, #116]	@ (800fbe8 <_free_r+0x90>)
 800fb72:	6813      	ldr	r3, [r2, #0]
 800fb74:	b933      	cbnz	r3, 800fb84 <_free_r+0x2c>
 800fb76:	6063      	str	r3, [r4, #4]
 800fb78:	6014      	str	r4, [r2, #0]
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb80:	f000 b8e4 	b.w	800fd4c <__malloc_unlock>
 800fb84:	42a3      	cmp	r3, r4
 800fb86:	d908      	bls.n	800fb9a <_free_r+0x42>
 800fb88:	6820      	ldr	r0, [r4, #0]
 800fb8a:	1821      	adds	r1, r4, r0
 800fb8c:	428b      	cmp	r3, r1
 800fb8e:	bf01      	itttt	eq
 800fb90:	6819      	ldreq	r1, [r3, #0]
 800fb92:	685b      	ldreq	r3, [r3, #4]
 800fb94:	1809      	addeq	r1, r1, r0
 800fb96:	6021      	streq	r1, [r4, #0]
 800fb98:	e7ed      	b.n	800fb76 <_free_r+0x1e>
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	b10b      	cbz	r3, 800fba4 <_free_r+0x4c>
 800fba0:	42a3      	cmp	r3, r4
 800fba2:	d9fa      	bls.n	800fb9a <_free_r+0x42>
 800fba4:	6811      	ldr	r1, [r2, #0]
 800fba6:	1850      	adds	r0, r2, r1
 800fba8:	42a0      	cmp	r0, r4
 800fbaa:	d10b      	bne.n	800fbc4 <_free_r+0x6c>
 800fbac:	6820      	ldr	r0, [r4, #0]
 800fbae:	4401      	add	r1, r0
 800fbb0:	1850      	adds	r0, r2, r1
 800fbb2:	4283      	cmp	r3, r0
 800fbb4:	6011      	str	r1, [r2, #0]
 800fbb6:	d1e0      	bne.n	800fb7a <_free_r+0x22>
 800fbb8:	6818      	ldr	r0, [r3, #0]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	6053      	str	r3, [r2, #4]
 800fbbe:	4408      	add	r0, r1
 800fbc0:	6010      	str	r0, [r2, #0]
 800fbc2:	e7da      	b.n	800fb7a <_free_r+0x22>
 800fbc4:	d902      	bls.n	800fbcc <_free_r+0x74>
 800fbc6:	230c      	movs	r3, #12
 800fbc8:	602b      	str	r3, [r5, #0]
 800fbca:	e7d6      	b.n	800fb7a <_free_r+0x22>
 800fbcc:	6820      	ldr	r0, [r4, #0]
 800fbce:	1821      	adds	r1, r4, r0
 800fbd0:	428b      	cmp	r3, r1
 800fbd2:	bf04      	itt	eq
 800fbd4:	6819      	ldreq	r1, [r3, #0]
 800fbd6:	685b      	ldreq	r3, [r3, #4]
 800fbd8:	6063      	str	r3, [r4, #4]
 800fbda:	bf04      	itt	eq
 800fbdc:	1809      	addeq	r1, r1, r0
 800fbde:	6021      	streq	r1, [r4, #0]
 800fbe0:	6054      	str	r4, [r2, #4]
 800fbe2:	e7ca      	b.n	800fb7a <_free_r+0x22>
 800fbe4:	bd38      	pop	{r3, r4, r5, pc}
 800fbe6:	bf00      	nop
 800fbe8:	200018a0 	.word	0x200018a0

0800fbec <malloc>:
 800fbec:	4b02      	ldr	r3, [pc, #8]	@ (800fbf8 <malloc+0xc>)
 800fbee:	4601      	mov	r1, r0
 800fbf0:	6818      	ldr	r0, [r3, #0]
 800fbf2:	f000 b825 	b.w	800fc40 <_malloc_r>
 800fbf6:	bf00      	nop
 800fbf8:	2000003c 	.word	0x2000003c

0800fbfc <sbrk_aligned>:
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	4e0f      	ldr	r6, [pc, #60]	@ (800fc3c <sbrk_aligned+0x40>)
 800fc00:	460c      	mov	r4, r1
 800fc02:	6831      	ldr	r1, [r6, #0]
 800fc04:	4605      	mov	r5, r0
 800fc06:	b911      	cbnz	r1, 800fc0e <sbrk_aligned+0x12>
 800fc08:	f001 f81a 	bl	8010c40 <_sbrk_r>
 800fc0c:	6030      	str	r0, [r6, #0]
 800fc0e:	4621      	mov	r1, r4
 800fc10:	4628      	mov	r0, r5
 800fc12:	f001 f815 	bl	8010c40 <_sbrk_r>
 800fc16:	1c43      	adds	r3, r0, #1
 800fc18:	d103      	bne.n	800fc22 <sbrk_aligned+0x26>
 800fc1a:	f04f 34ff 	mov.w	r4, #4294967295
 800fc1e:	4620      	mov	r0, r4
 800fc20:	bd70      	pop	{r4, r5, r6, pc}
 800fc22:	1cc4      	adds	r4, r0, #3
 800fc24:	f024 0403 	bic.w	r4, r4, #3
 800fc28:	42a0      	cmp	r0, r4
 800fc2a:	d0f8      	beq.n	800fc1e <sbrk_aligned+0x22>
 800fc2c:	1a21      	subs	r1, r4, r0
 800fc2e:	4628      	mov	r0, r5
 800fc30:	f001 f806 	bl	8010c40 <_sbrk_r>
 800fc34:	3001      	adds	r0, #1
 800fc36:	d1f2      	bne.n	800fc1e <sbrk_aligned+0x22>
 800fc38:	e7ef      	b.n	800fc1a <sbrk_aligned+0x1e>
 800fc3a:	bf00      	nop
 800fc3c:	2000189c 	.word	0x2000189c

0800fc40 <_malloc_r>:
 800fc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc44:	1ccd      	adds	r5, r1, #3
 800fc46:	f025 0503 	bic.w	r5, r5, #3
 800fc4a:	3508      	adds	r5, #8
 800fc4c:	2d0c      	cmp	r5, #12
 800fc4e:	bf38      	it	cc
 800fc50:	250c      	movcc	r5, #12
 800fc52:	2d00      	cmp	r5, #0
 800fc54:	4606      	mov	r6, r0
 800fc56:	db01      	blt.n	800fc5c <_malloc_r+0x1c>
 800fc58:	42a9      	cmp	r1, r5
 800fc5a:	d904      	bls.n	800fc66 <_malloc_r+0x26>
 800fc5c:	230c      	movs	r3, #12
 800fc5e:	6033      	str	r3, [r6, #0]
 800fc60:	2000      	movs	r0, #0
 800fc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd3c <_malloc_r+0xfc>
 800fc6a:	f000 f869 	bl	800fd40 <__malloc_lock>
 800fc6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fc72:	461c      	mov	r4, r3
 800fc74:	bb44      	cbnz	r4, 800fcc8 <_malloc_r+0x88>
 800fc76:	4629      	mov	r1, r5
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f7ff ffbf 	bl	800fbfc <sbrk_aligned>
 800fc7e:	1c43      	adds	r3, r0, #1
 800fc80:	4604      	mov	r4, r0
 800fc82:	d158      	bne.n	800fd36 <_malloc_r+0xf6>
 800fc84:	f8d8 4000 	ldr.w	r4, [r8]
 800fc88:	4627      	mov	r7, r4
 800fc8a:	2f00      	cmp	r7, #0
 800fc8c:	d143      	bne.n	800fd16 <_malloc_r+0xd6>
 800fc8e:	2c00      	cmp	r4, #0
 800fc90:	d04b      	beq.n	800fd2a <_malloc_r+0xea>
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	4639      	mov	r1, r7
 800fc96:	4630      	mov	r0, r6
 800fc98:	eb04 0903 	add.w	r9, r4, r3
 800fc9c:	f000 ffd0 	bl	8010c40 <_sbrk_r>
 800fca0:	4581      	cmp	r9, r0
 800fca2:	d142      	bne.n	800fd2a <_malloc_r+0xea>
 800fca4:	6821      	ldr	r1, [r4, #0]
 800fca6:	1a6d      	subs	r5, r5, r1
 800fca8:	4629      	mov	r1, r5
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f7ff ffa6 	bl	800fbfc <sbrk_aligned>
 800fcb0:	3001      	adds	r0, #1
 800fcb2:	d03a      	beq.n	800fd2a <_malloc_r+0xea>
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	442b      	add	r3, r5
 800fcb8:	6023      	str	r3, [r4, #0]
 800fcba:	f8d8 3000 	ldr.w	r3, [r8]
 800fcbe:	685a      	ldr	r2, [r3, #4]
 800fcc0:	bb62      	cbnz	r2, 800fd1c <_malloc_r+0xdc>
 800fcc2:	f8c8 7000 	str.w	r7, [r8]
 800fcc6:	e00f      	b.n	800fce8 <_malloc_r+0xa8>
 800fcc8:	6822      	ldr	r2, [r4, #0]
 800fcca:	1b52      	subs	r2, r2, r5
 800fccc:	d420      	bmi.n	800fd10 <_malloc_r+0xd0>
 800fcce:	2a0b      	cmp	r2, #11
 800fcd0:	d917      	bls.n	800fd02 <_malloc_r+0xc2>
 800fcd2:	1961      	adds	r1, r4, r5
 800fcd4:	42a3      	cmp	r3, r4
 800fcd6:	6025      	str	r5, [r4, #0]
 800fcd8:	bf18      	it	ne
 800fcda:	6059      	strne	r1, [r3, #4]
 800fcdc:	6863      	ldr	r3, [r4, #4]
 800fcde:	bf08      	it	eq
 800fce0:	f8c8 1000 	streq.w	r1, [r8]
 800fce4:	5162      	str	r2, [r4, r5]
 800fce6:	604b      	str	r3, [r1, #4]
 800fce8:	4630      	mov	r0, r6
 800fcea:	f000 f82f 	bl	800fd4c <__malloc_unlock>
 800fcee:	f104 000b 	add.w	r0, r4, #11
 800fcf2:	1d23      	adds	r3, r4, #4
 800fcf4:	f020 0007 	bic.w	r0, r0, #7
 800fcf8:	1ac2      	subs	r2, r0, r3
 800fcfa:	bf1c      	itt	ne
 800fcfc:	1a1b      	subne	r3, r3, r0
 800fcfe:	50a3      	strne	r3, [r4, r2]
 800fd00:	e7af      	b.n	800fc62 <_malloc_r+0x22>
 800fd02:	6862      	ldr	r2, [r4, #4]
 800fd04:	42a3      	cmp	r3, r4
 800fd06:	bf0c      	ite	eq
 800fd08:	f8c8 2000 	streq.w	r2, [r8]
 800fd0c:	605a      	strne	r2, [r3, #4]
 800fd0e:	e7eb      	b.n	800fce8 <_malloc_r+0xa8>
 800fd10:	4623      	mov	r3, r4
 800fd12:	6864      	ldr	r4, [r4, #4]
 800fd14:	e7ae      	b.n	800fc74 <_malloc_r+0x34>
 800fd16:	463c      	mov	r4, r7
 800fd18:	687f      	ldr	r7, [r7, #4]
 800fd1a:	e7b6      	b.n	800fc8a <_malloc_r+0x4a>
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	42a3      	cmp	r3, r4
 800fd22:	d1fb      	bne.n	800fd1c <_malloc_r+0xdc>
 800fd24:	2300      	movs	r3, #0
 800fd26:	6053      	str	r3, [r2, #4]
 800fd28:	e7de      	b.n	800fce8 <_malloc_r+0xa8>
 800fd2a:	230c      	movs	r3, #12
 800fd2c:	6033      	str	r3, [r6, #0]
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f000 f80c 	bl	800fd4c <__malloc_unlock>
 800fd34:	e794      	b.n	800fc60 <_malloc_r+0x20>
 800fd36:	6005      	str	r5, [r0, #0]
 800fd38:	e7d6      	b.n	800fce8 <_malloc_r+0xa8>
 800fd3a:	bf00      	nop
 800fd3c:	200018a0 	.word	0x200018a0

0800fd40 <__malloc_lock>:
 800fd40:	4801      	ldr	r0, [pc, #4]	@ (800fd48 <__malloc_lock+0x8>)
 800fd42:	f7ff b8ac 	b.w	800ee9e <__retarget_lock_acquire_recursive>
 800fd46:	bf00      	nop
 800fd48:	20001898 	.word	0x20001898

0800fd4c <__malloc_unlock>:
 800fd4c:	4801      	ldr	r0, [pc, #4]	@ (800fd54 <__malloc_unlock+0x8>)
 800fd4e:	f7ff b8a7 	b.w	800eea0 <__retarget_lock_release_recursive>
 800fd52:	bf00      	nop
 800fd54:	20001898 	.word	0x20001898

0800fd58 <_Balloc>:
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	69c6      	ldr	r6, [r0, #28]
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	460d      	mov	r5, r1
 800fd60:	b976      	cbnz	r6, 800fd80 <_Balloc+0x28>
 800fd62:	2010      	movs	r0, #16
 800fd64:	f7ff ff42 	bl	800fbec <malloc>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	61e0      	str	r0, [r4, #28]
 800fd6c:	b920      	cbnz	r0, 800fd78 <_Balloc+0x20>
 800fd6e:	4b18      	ldr	r3, [pc, #96]	@ (800fdd0 <_Balloc+0x78>)
 800fd70:	4818      	ldr	r0, [pc, #96]	@ (800fdd4 <_Balloc+0x7c>)
 800fd72:	216b      	movs	r1, #107	@ 0x6b
 800fd74:	f000 ff74 	bl	8010c60 <__assert_func>
 800fd78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd7c:	6006      	str	r6, [r0, #0]
 800fd7e:	60c6      	str	r6, [r0, #12]
 800fd80:	69e6      	ldr	r6, [r4, #28]
 800fd82:	68f3      	ldr	r3, [r6, #12]
 800fd84:	b183      	cbz	r3, 800fda8 <_Balloc+0x50>
 800fd86:	69e3      	ldr	r3, [r4, #28]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd8e:	b9b8      	cbnz	r0, 800fdc0 <_Balloc+0x68>
 800fd90:	2101      	movs	r1, #1
 800fd92:	fa01 f605 	lsl.w	r6, r1, r5
 800fd96:	1d72      	adds	r2, r6, #5
 800fd98:	0092      	lsls	r2, r2, #2
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 ff7e 	bl	8010c9c <_calloc_r>
 800fda0:	b160      	cbz	r0, 800fdbc <_Balloc+0x64>
 800fda2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fda6:	e00e      	b.n	800fdc6 <_Balloc+0x6e>
 800fda8:	2221      	movs	r2, #33	@ 0x21
 800fdaa:	2104      	movs	r1, #4
 800fdac:	4620      	mov	r0, r4
 800fdae:	f000 ff75 	bl	8010c9c <_calloc_r>
 800fdb2:	69e3      	ldr	r3, [r4, #28]
 800fdb4:	60f0      	str	r0, [r6, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1e4      	bne.n	800fd86 <_Balloc+0x2e>
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	bd70      	pop	{r4, r5, r6, pc}
 800fdc0:	6802      	ldr	r2, [r0, #0]
 800fdc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fdcc:	e7f7      	b.n	800fdbe <_Balloc+0x66>
 800fdce:	bf00      	nop
 800fdd0:	080120a9 	.word	0x080120a9
 800fdd4:	08012129 	.word	0x08012129

0800fdd8 <_Bfree>:
 800fdd8:	b570      	push	{r4, r5, r6, lr}
 800fdda:	69c6      	ldr	r6, [r0, #28]
 800fddc:	4605      	mov	r5, r0
 800fdde:	460c      	mov	r4, r1
 800fde0:	b976      	cbnz	r6, 800fe00 <_Bfree+0x28>
 800fde2:	2010      	movs	r0, #16
 800fde4:	f7ff ff02 	bl	800fbec <malloc>
 800fde8:	4602      	mov	r2, r0
 800fdea:	61e8      	str	r0, [r5, #28]
 800fdec:	b920      	cbnz	r0, 800fdf8 <_Bfree+0x20>
 800fdee:	4b09      	ldr	r3, [pc, #36]	@ (800fe14 <_Bfree+0x3c>)
 800fdf0:	4809      	ldr	r0, [pc, #36]	@ (800fe18 <_Bfree+0x40>)
 800fdf2:	218f      	movs	r1, #143	@ 0x8f
 800fdf4:	f000 ff34 	bl	8010c60 <__assert_func>
 800fdf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdfc:	6006      	str	r6, [r0, #0]
 800fdfe:	60c6      	str	r6, [r0, #12]
 800fe00:	b13c      	cbz	r4, 800fe12 <_Bfree+0x3a>
 800fe02:	69eb      	ldr	r3, [r5, #28]
 800fe04:	6862      	ldr	r2, [r4, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe0c:	6021      	str	r1, [r4, #0]
 800fe0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	080120a9 	.word	0x080120a9
 800fe18:	08012129 	.word	0x08012129

0800fe1c <__multadd>:
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	690d      	ldr	r5, [r1, #16]
 800fe22:	4607      	mov	r7, r0
 800fe24:	460c      	mov	r4, r1
 800fe26:	461e      	mov	r6, r3
 800fe28:	f101 0c14 	add.w	ip, r1, #20
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	f8dc 3000 	ldr.w	r3, [ip]
 800fe32:	b299      	uxth	r1, r3
 800fe34:	fb02 6101 	mla	r1, r2, r1, r6
 800fe38:	0c1e      	lsrs	r6, r3, #16
 800fe3a:	0c0b      	lsrs	r3, r1, #16
 800fe3c:	fb02 3306 	mla	r3, r2, r6, r3
 800fe40:	b289      	uxth	r1, r1
 800fe42:	3001      	adds	r0, #1
 800fe44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe48:	4285      	cmp	r5, r0
 800fe4a:	f84c 1b04 	str.w	r1, [ip], #4
 800fe4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe52:	dcec      	bgt.n	800fe2e <__multadd+0x12>
 800fe54:	b30e      	cbz	r6, 800fe9a <__multadd+0x7e>
 800fe56:	68a3      	ldr	r3, [r4, #8]
 800fe58:	42ab      	cmp	r3, r5
 800fe5a:	dc19      	bgt.n	800fe90 <__multadd+0x74>
 800fe5c:	6861      	ldr	r1, [r4, #4]
 800fe5e:	4638      	mov	r0, r7
 800fe60:	3101      	adds	r1, #1
 800fe62:	f7ff ff79 	bl	800fd58 <_Balloc>
 800fe66:	4680      	mov	r8, r0
 800fe68:	b928      	cbnz	r0, 800fe76 <__multadd+0x5a>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	4b0c      	ldr	r3, [pc, #48]	@ (800fea0 <__multadd+0x84>)
 800fe6e:	480d      	ldr	r0, [pc, #52]	@ (800fea4 <__multadd+0x88>)
 800fe70:	21ba      	movs	r1, #186	@ 0xba
 800fe72:	f000 fef5 	bl	8010c60 <__assert_func>
 800fe76:	6922      	ldr	r2, [r4, #16]
 800fe78:	3202      	adds	r2, #2
 800fe7a:	f104 010c 	add.w	r1, r4, #12
 800fe7e:	0092      	lsls	r2, r2, #2
 800fe80:	300c      	adds	r0, #12
 800fe82:	f7ff f80e 	bl	800eea2 <memcpy>
 800fe86:	4621      	mov	r1, r4
 800fe88:	4638      	mov	r0, r7
 800fe8a:	f7ff ffa5 	bl	800fdd8 <_Bfree>
 800fe8e:	4644      	mov	r4, r8
 800fe90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe94:	3501      	adds	r5, #1
 800fe96:	615e      	str	r6, [r3, #20]
 800fe98:	6125      	str	r5, [r4, #16]
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea0:	08012118 	.word	0x08012118
 800fea4:	08012129 	.word	0x08012129

0800fea8 <__hi0bits>:
 800fea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800feac:	4603      	mov	r3, r0
 800feae:	bf36      	itet	cc
 800feb0:	0403      	lslcc	r3, r0, #16
 800feb2:	2000      	movcs	r0, #0
 800feb4:	2010      	movcc	r0, #16
 800feb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800feba:	bf3c      	itt	cc
 800febc:	021b      	lslcc	r3, r3, #8
 800febe:	3008      	addcc	r0, #8
 800fec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fec4:	bf3c      	itt	cc
 800fec6:	011b      	lslcc	r3, r3, #4
 800fec8:	3004      	addcc	r0, #4
 800feca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fece:	bf3c      	itt	cc
 800fed0:	009b      	lslcc	r3, r3, #2
 800fed2:	3002      	addcc	r0, #2
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	db05      	blt.n	800fee4 <__hi0bits+0x3c>
 800fed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fedc:	f100 0001 	add.w	r0, r0, #1
 800fee0:	bf08      	it	eq
 800fee2:	2020      	moveq	r0, #32
 800fee4:	4770      	bx	lr

0800fee6 <__lo0bits>:
 800fee6:	6803      	ldr	r3, [r0, #0]
 800fee8:	4602      	mov	r2, r0
 800feea:	f013 0007 	ands.w	r0, r3, #7
 800feee:	d00b      	beq.n	800ff08 <__lo0bits+0x22>
 800fef0:	07d9      	lsls	r1, r3, #31
 800fef2:	d421      	bmi.n	800ff38 <__lo0bits+0x52>
 800fef4:	0798      	lsls	r0, r3, #30
 800fef6:	bf49      	itett	mi
 800fef8:	085b      	lsrmi	r3, r3, #1
 800fefa:	089b      	lsrpl	r3, r3, #2
 800fefc:	2001      	movmi	r0, #1
 800fefe:	6013      	strmi	r3, [r2, #0]
 800ff00:	bf5c      	itt	pl
 800ff02:	6013      	strpl	r3, [r2, #0]
 800ff04:	2002      	movpl	r0, #2
 800ff06:	4770      	bx	lr
 800ff08:	b299      	uxth	r1, r3
 800ff0a:	b909      	cbnz	r1, 800ff10 <__lo0bits+0x2a>
 800ff0c:	0c1b      	lsrs	r3, r3, #16
 800ff0e:	2010      	movs	r0, #16
 800ff10:	b2d9      	uxtb	r1, r3
 800ff12:	b909      	cbnz	r1, 800ff18 <__lo0bits+0x32>
 800ff14:	3008      	adds	r0, #8
 800ff16:	0a1b      	lsrs	r3, r3, #8
 800ff18:	0719      	lsls	r1, r3, #28
 800ff1a:	bf04      	itt	eq
 800ff1c:	091b      	lsreq	r3, r3, #4
 800ff1e:	3004      	addeq	r0, #4
 800ff20:	0799      	lsls	r1, r3, #30
 800ff22:	bf04      	itt	eq
 800ff24:	089b      	lsreq	r3, r3, #2
 800ff26:	3002      	addeq	r0, #2
 800ff28:	07d9      	lsls	r1, r3, #31
 800ff2a:	d403      	bmi.n	800ff34 <__lo0bits+0x4e>
 800ff2c:	085b      	lsrs	r3, r3, #1
 800ff2e:	f100 0001 	add.w	r0, r0, #1
 800ff32:	d003      	beq.n	800ff3c <__lo0bits+0x56>
 800ff34:	6013      	str	r3, [r2, #0]
 800ff36:	4770      	bx	lr
 800ff38:	2000      	movs	r0, #0
 800ff3a:	4770      	bx	lr
 800ff3c:	2020      	movs	r0, #32
 800ff3e:	4770      	bx	lr

0800ff40 <__i2b>:
 800ff40:	b510      	push	{r4, lr}
 800ff42:	460c      	mov	r4, r1
 800ff44:	2101      	movs	r1, #1
 800ff46:	f7ff ff07 	bl	800fd58 <_Balloc>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	b928      	cbnz	r0, 800ff5a <__i2b+0x1a>
 800ff4e:	4b05      	ldr	r3, [pc, #20]	@ (800ff64 <__i2b+0x24>)
 800ff50:	4805      	ldr	r0, [pc, #20]	@ (800ff68 <__i2b+0x28>)
 800ff52:	f240 1145 	movw	r1, #325	@ 0x145
 800ff56:	f000 fe83 	bl	8010c60 <__assert_func>
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	6144      	str	r4, [r0, #20]
 800ff5e:	6103      	str	r3, [r0, #16]
 800ff60:	bd10      	pop	{r4, pc}
 800ff62:	bf00      	nop
 800ff64:	08012118 	.word	0x08012118
 800ff68:	08012129 	.word	0x08012129

0800ff6c <__multiply>:
 800ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff70:	4614      	mov	r4, r2
 800ff72:	690a      	ldr	r2, [r1, #16]
 800ff74:	6923      	ldr	r3, [r4, #16]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	bfa8      	it	ge
 800ff7a:	4623      	movge	r3, r4
 800ff7c:	460f      	mov	r7, r1
 800ff7e:	bfa4      	itt	ge
 800ff80:	460c      	movge	r4, r1
 800ff82:	461f      	movge	r7, r3
 800ff84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff8c:	68a3      	ldr	r3, [r4, #8]
 800ff8e:	6861      	ldr	r1, [r4, #4]
 800ff90:	eb0a 0609 	add.w	r6, sl, r9
 800ff94:	42b3      	cmp	r3, r6
 800ff96:	b085      	sub	sp, #20
 800ff98:	bfb8      	it	lt
 800ff9a:	3101      	addlt	r1, #1
 800ff9c:	f7ff fedc 	bl	800fd58 <_Balloc>
 800ffa0:	b930      	cbnz	r0, 800ffb0 <__multiply+0x44>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	4b44      	ldr	r3, [pc, #272]	@ (80100b8 <__multiply+0x14c>)
 800ffa6:	4845      	ldr	r0, [pc, #276]	@ (80100bc <__multiply+0x150>)
 800ffa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ffac:	f000 fe58 	bl	8010c60 <__assert_func>
 800ffb0:	f100 0514 	add.w	r5, r0, #20
 800ffb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ffb8:	462b      	mov	r3, r5
 800ffba:	2200      	movs	r2, #0
 800ffbc:	4543      	cmp	r3, r8
 800ffbe:	d321      	bcc.n	8010004 <__multiply+0x98>
 800ffc0:	f107 0114 	add.w	r1, r7, #20
 800ffc4:	f104 0214 	add.w	r2, r4, #20
 800ffc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ffcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ffd0:	9302      	str	r3, [sp, #8]
 800ffd2:	1b13      	subs	r3, r2, r4
 800ffd4:	3b15      	subs	r3, #21
 800ffd6:	f023 0303 	bic.w	r3, r3, #3
 800ffda:	3304      	adds	r3, #4
 800ffdc:	f104 0715 	add.w	r7, r4, #21
 800ffe0:	42ba      	cmp	r2, r7
 800ffe2:	bf38      	it	cc
 800ffe4:	2304      	movcc	r3, #4
 800ffe6:	9301      	str	r3, [sp, #4]
 800ffe8:	9b02      	ldr	r3, [sp, #8]
 800ffea:	9103      	str	r1, [sp, #12]
 800ffec:	428b      	cmp	r3, r1
 800ffee:	d80c      	bhi.n	801000a <__multiply+0x9e>
 800fff0:	2e00      	cmp	r6, #0
 800fff2:	dd03      	ble.n	800fffc <__multiply+0x90>
 800fff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d05b      	beq.n	80100b4 <__multiply+0x148>
 800fffc:	6106      	str	r6, [r0, #16]
 800fffe:	b005      	add	sp, #20
 8010000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010004:	f843 2b04 	str.w	r2, [r3], #4
 8010008:	e7d8      	b.n	800ffbc <__multiply+0x50>
 801000a:	f8b1 a000 	ldrh.w	sl, [r1]
 801000e:	f1ba 0f00 	cmp.w	sl, #0
 8010012:	d024      	beq.n	801005e <__multiply+0xf2>
 8010014:	f104 0e14 	add.w	lr, r4, #20
 8010018:	46a9      	mov	r9, r5
 801001a:	f04f 0c00 	mov.w	ip, #0
 801001e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010022:	f8d9 3000 	ldr.w	r3, [r9]
 8010026:	fa1f fb87 	uxth.w	fp, r7
 801002a:	b29b      	uxth	r3, r3
 801002c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010030:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010034:	f8d9 7000 	ldr.w	r7, [r9]
 8010038:	4463      	add	r3, ip
 801003a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801003e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010046:	b29b      	uxth	r3, r3
 8010048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801004c:	4572      	cmp	r2, lr
 801004e:	f849 3b04 	str.w	r3, [r9], #4
 8010052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010056:	d8e2      	bhi.n	801001e <__multiply+0xb2>
 8010058:	9b01      	ldr	r3, [sp, #4]
 801005a:	f845 c003 	str.w	ip, [r5, r3]
 801005e:	9b03      	ldr	r3, [sp, #12]
 8010060:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010064:	3104      	adds	r1, #4
 8010066:	f1b9 0f00 	cmp.w	r9, #0
 801006a:	d021      	beq.n	80100b0 <__multiply+0x144>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	f104 0c14 	add.w	ip, r4, #20
 8010072:	46ae      	mov	lr, r5
 8010074:	f04f 0a00 	mov.w	sl, #0
 8010078:	f8bc b000 	ldrh.w	fp, [ip]
 801007c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010080:	fb09 770b 	mla	r7, r9, fp, r7
 8010084:	4457      	add	r7, sl
 8010086:	b29b      	uxth	r3, r3
 8010088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801008c:	f84e 3b04 	str.w	r3, [lr], #4
 8010090:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010098:	f8be 3000 	ldrh.w	r3, [lr]
 801009c:	fb09 330a 	mla	r3, r9, sl, r3
 80100a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80100a4:	4562      	cmp	r2, ip
 80100a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100aa:	d8e5      	bhi.n	8010078 <__multiply+0x10c>
 80100ac:	9f01      	ldr	r7, [sp, #4]
 80100ae:	51eb      	str	r3, [r5, r7]
 80100b0:	3504      	adds	r5, #4
 80100b2:	e799      	b.n	800ffe8 <__multiply+0x7c>
 80100b4:	3e01      	subs	r6, #1
 80100b6:	e79b      	b.n	800fff0 <__multiply+0x84>
 80100b8:	08012118 	.word	0x08012118
 80100bc:	08012129 	.word	0x08012129

080100c0 <__pow5mult>:
 80100c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100c4:	4615      	mov	r5, r2
 80100c6:	f012 0203 	ands.w	r2, r2, #3
 80100ca:	4607      	mov	r7, r0
 80100cc:	460e      	mov	r6, r1
 80100ce:	d007      	beq.n	80100e0 <__pow5mult+0x20>
 80100d0:	4c25      	ldr	r4, [pc, #148]	@ (8010168 <__pow5mult+0xa8>)
 80100d2:	3a01      	subs	r2, #1
 80100d4:	2300      	movs	r3, #0
 80100d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100da:	f7ff fe9f 	bl	800fe1c <__multadd>
 80100de:	4606      	mov	r6, r0
 80100e0:	10ad      	asrs	r5, r5, #2
 80100e2:	d03d      	beq.n	8010160 <__pow5mult+0xa0>
 80100e4:	69fc      	ldr	r4, [r7, #28]
 80100e6:	b97c      	cbnz	r4, 8010108 <__pow5mult+0x48>
 80100e8:	2010      	movs	r0, #16
 80100ea:	f7ff fd7f 	bl	800fbec <malloc>
 80100ee:	4602      	mov	r2, r0
 80100f0:	61f8      	str	r0, [r7, #28]
 80100f2:	b928      	cbnz	r0, 8010100 <__pow5mult+0x40>
 80100f4:	4b1d      	ldr	r3, [pc, #116]	@ (801016c <__pow5mult+0xac>)
 80100f6:	481e      	ldr	r0, [pc, #120]	@ (8010170 <__pow5mult+0xb0>)
 80100f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80100fc:	f000 fdb0 	bl	8010c60 <__assert_func>
 8010100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010104:	6004      	str	r4, [r0, #0]
 8010106:	60c4      	str	r4, [r0, #12]
 8010108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801010c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010110:	b94c      	cbnz	r4, 8010126 <__pow5mult+0x66>
 8010112:	f240 2171 	movw	r1, #625	@ 0x271
 8010116:	4638      	mov	r0, r7
 8010118:	f7ff ff12 	bl	800ff40 <__i2b>
 801011c:	2300      	movs	r3, #0
 801011e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010122:	4604      	mov	r4, r0
 8010124:	6003      	str	r3, [r0, #0]
 8010126:	f04f 0900 	mov.w	r9, #0
 801012a:	07eb      	lsls	r3, r5, #31
 801012c:	d50a      	bpl.n	8010144 <__pow5mult+0x84>
 801012e:	4631      	mov	r1, r6
 8010130:	4622      	mov	r2, r4
 8010132:	4638      	mov	r0, r7
 8010134:	f7ff ff1a 	bl	800ff6c <__multiply>
 8010138:	4631      	mov	r1, r6
 801013a:	4680      	mov	r8, r0
 801013c:	4638      	mov	r0, r7
 801013e:	f7ff fe4b 	bl	800fdd8 <_Bfree>
 8010142:	4646      	mov	r6, r8
 8010144:	106d      	asrs	r5, r5, #1
 8010146:	d00b      	beq.n	8010160 <__pow5mult+0xa0>
 8010148:	6820      	ldr	r0, [r4, #0]
 801014a:	b938      	cbnz	r0, 801015c <__pow5mult+0x9c>
 801014c:	4622      	mov	r2, r4
 801014e:	4621      	mov	r1, r4
 8010150:	4638      	mov	r0, r7
 8010152:	f7ff ff0b 	bl	800ff6c <__multiply>
 8010156:	6020      	str	r0, [r4, #0]
 8010158:	f8c0 9000 	str.w	r9, [r0]
 801015c:	4604      	mov	r4, r0
 801015e:	e7e4      	b.n	801012a <__pow5mult+0x6a>
 8010160:	4630      	mov	r0, r6
 8010162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010166:	bf00      	nop
 8010168:	08012184 	.word	0x08012184
 801016c:	080120a9 	.word	0x080120a9
 8010170:	08012129 	.word	0x08012129

08010174 <__lshift>:
 8010174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010178:	460c      	mov	r4, r1
 801017a:	6849      	ldr	r1, [r1, #4]
 801017c:	6923      	ldr	r3, [r4, #16]
 801017e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010182:	68a3      	ldr	r3, [r4, #8]
 8010184:	4607      	mov	r7, r0
 8010186:	4691      	mov	r9, r2
 8010188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801018c:	f108 0601 	add.w	r6, r8, #1
 8010190:	42b3      	cmp	r3, r6
 8010192:	db0b      	blt.n	80101ac <__lshift+0x38>
 8010194:	4638      	mov	r0, r7
 8010196:	f7ff fddf 	bl	800fd58 <_Balloc>
 801019a:	4605      	mov	r5, r0
 801019c:	b948      	cbnz	r0, 80101b2 <__lshift+0x3e>
 801019e:	4602      	mov	r2, r0
 80101a0:	4b28      	ldr	r3, [pc, #160]	@ (8010244 <__lshift+0xd0>)
 80101a2:	4829      	ldr	r0, [pc, #164]	@ (8010248 <__lshift+0xd4>)
 80101a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80101a8:	f000 fd5a 	bl	8010c60 <__assert_func>
 80101ac:	3101      	adds	r1, #1
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	e7ee      	b.n	8010190 <__lshift+0x1c>
 80101b2:	2300      	movs	r3, #0
 80101b4:	f100 0114 	add.w	r1, r0, #20
 80101b8:	f100 0210 	add.w	r2, r0, #16
 80101bc:	4618      	mov	r0, r3
 80101be:	4553      	cmp	r3, sl
 80101c0:	db33      	blt.n	801022a <__lshift+0xb6>
 80101c2:	6920      	ldr	r0, [r4, #16]
 80101c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101c8:	f104 0314 	add.w	r3, r4, #20
 80101cc:	f019 091f 	ands.w	r9, r9, #31
 80101d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101d8:	d02b      	beq.n	8010232 <__lshift+0xbe>
 80101da:	f1c9 0e20 	rsb	lr, r9, #32
 80101de:	468a      	mov	sl, r1
 80101e0:	2200      	movs	r2, #0
 80101e2:	6818      	ldr	r0, [r3, #0]
 80101e4:	fa00 f009 	lsl.w	r0, r0, r9
 80101e8:	4310      	orrs	r0, r2
 80101ea:	f84a 0b04 	str.w	r0, [sl], #4
 80101ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80101f2:	459c      	cmp	ip, r3
 80101f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80101f8:	d8f3      	bhi.n	80101e2 <__lshift+0x6e>
 80101fa:	ebac 0304 	sub.w	r3, ip, r4
 80101fe:	3b15      	subs	r3, #21
 8010200:	f023 0303 	bic.w	r3, r3, #3
 8010204:	3304      	adds	r3, #4
 8010206:	f104 0015 	add.w	r0, r4, #21
 801020a:	4584      	cmp	ip, r0
 801020c:	bf38      	it	cc
 801020e:	2304      	movcc	r3, #4
 8010210:	50ca      	str	r2, [r1, r3]
 8010212:	b10a      	cbz	r2, 8010218 <__lshift+0xa4>
 8010214:	f108 0602 	add.w	r6, r8, #2
 8010218:	3e01      	subs	r6, #1
 801021a:	4638      	mov	r0, r7
 801021c:	612e      	str	r6, [r5, #16]
 801021e:	4621      	mov	r1, r4
 8010220:	f7ff fdda 	bl	800fdd8 <_Bfree>
 8010224:	4628      	mov	r0, r5
 8010226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801022a:	f842 0f04 	str.w	r0, [r2, #4]!
 801022e:	3301      	adds	r3, #1
 8010230:	e7c5      	b.n	80101be <__lshift+0x4a>
 8010232:	3904      	subs	r1, #4
 8010234:	f853 2b04 	ldr.w	r2, [r3], #4
 8010238:	f841 2f04 	str.w	r2, [r1, #4]!
 801023c:	459c      	cmp	ip, r3
 801023e:	d8f9      	bhi.n	8010234 <__lshift+0xc0>
 8010240:	e7ea      	b.n	8010218 <__lshift+0xa4>
 8010242:	bf00      	nop
 8010244:	08012118 	.word	0x08012118
 8010248:	08012129 	.word	0x08012129

0801024c <__mcmp>:
 801024c:	690a      	ldr	r2, [r1, #16]
 801024e:	4603      	mov	r3, r0
 8010250:	6900      	ldr	r0, [r0, #16]
 8010252:	1a80      	subs	r0, r0, r2
 8010254:	b530      	push	{r4, r5, lr}
 8010256:	d10e      	bne.n	8010276 <__mcmp+0x2a>
 8010258:	3314      	adds	r3, #20
 801025a:	3114      	adds	r1, #20
 801025c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801026c:	4295      	cmp	r5, r2
 801026e:	d003      	beq.n	8010278 <__mcmp+0x2c>
 8010270:	d205      	bcs.n	801027e <__mcmp+0x32>
 8010272:	f04f 30ff 	mov.w	r0, #4294967295
 8010276:	bd30      	pop	{r4, r5, pc}
 8010278:	42a3      	cmp	r3, r4
 801027a:	d3f3      	bcc.n	8010264 <__mcmp+0x18>
 801027c:	e7fb      	b.n	8010276 <__mcmp+0x2a>
 801027e:	2001      	movs	r0, #1
 8010280:	e7f9      	b.n	8010276 <__mcmp+0x2a>
	...

08010284 <__mdiff>:
 8010284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010288:	4689      	mov	r9, r1
 801028a:	4606      	mov	r6, r0
 801028c:	4611      	mov	r1, r2
 801028e:	4648      	mov	r0, r9
 8010290:	4614      	mov	r4, r2
 8010292:	f7ff ffdb 	bl	801024c <__mcmp>
 8010296:	1e05      	subs	r5, r0, #0
 8010298:	d112      	bne.n	80102c0 <__mdiff+0x3c>
 801029a:	4629      	mov	r1, r5
 801029c:	4630      	mov	r0, r6
 801029e:	f7ff fd5b 	bl	800fd58 <_Balloc>
 80102a2:	4602      	mov	r2, r0
 80102a4:	b928      	cbnz	r0, 80102b2 <__mdiff+0x2e>
 80102a6:	4b3f      	ldr	r3, [pc, #252]	@ (80103a4 <__mdiff+0x120>)
 80102a8:	f240 2137 	movw	r1, #567	@ 0x237
 80102ac:	483e      	ldr	r0, [pc, #248]	@ (80103a8 <__mdiff+0x124>)
 80102ae:	f000 fcd7 	bl	8010c60 <__assert_func>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102b8:	4610      	mov	r0, r2
 80102ba:	b003      	add	sp, #12
 80102bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c0:	bfbc      	itt	lt
 80102c2:	464b      	movlt	r3, r9
 80102c4:	46a1      	movlt	r9, r4
 80102c6:	4630      	mov	r0, r6
 80102c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80102cc:	bfba      	itte	lt
 80102ce:	461c      	movlt	r4, r3
 80102d0:	2501      	movlt	r5, #1
 80102d2:	2500      	movge	r5, #0
 80102d4:	f7ff fd40 	bl	800fd58 <_Balloc>
 80102d8:	4602      	mov	r2, r0
 80102da:	b918      	cbnz	r0, 80102e4 <__mdiff+0x60>
 80102dc:	4b31      	ldr	r3, [pc, #196]	@ (80103a4 <__mdiff+0x120>)
 80102de:	f240 2145 	movw	r1, #581	@ 0x245
 80102e2:	e7e3      	b.n	80102ac <__mdiff+0x28>
 80102e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80102e8:	6926      	ldr	r6, [r4, #16]
 80102ea:	60c5      	str	r5, [r0, #12]
 80102ec:	f109 0310 	add.w	r3, r9, #16
 80102f0:	f109 0514 	add.w	r5, r9, #20
 80102f4:	f104 0e14 	add.w	lr, r4, #20
 80102f8:	f100 0b14 	add.w	fp, r0, #20
 80102fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010300:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010304:	9301      	str	r3, [sp, #4]
 8010306:	46d9      	mov	r9, fp
 8010308:	f04f 0c00 	mov.w	ip, #0
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010312:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010316:	9301      	str	r3, [sp, #4]
 8010318:	fa1f f38a 	uxth.w	r3, sl
 801031c:	4619      	mov	r1, r3
 801031e:	b283      	uxth	r3, r0
 8010320:	1acb      	subs	r3, r1, r3
 8010322:	0c00      	lsrs	r0, r0, #16
 8010324:	4463      	add	r3, ip
 8010326:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801032a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801032e:	b29b      	uxth	r3, r3
 8010330:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010334:	4576      	cmp	r6, lr
 8010336:	f849 3b04 	str.w	r3, [r9], #4
 801033a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801033e:	d8e5      	bhi.n	801030c <__mdiff+0x88>
 8010340:	1b33      	subs	r3, r6, r4
 8010342:	3b15      	subs	r3, #21
 8010344:	f023 0303 	bic.w	r3, r3, #3
 8010348:	3415      	adds	r4, #21
 801034a:	3304      	adds	r3, #4
 801034c:	42a6      	cmp	r6, r4
 801034e:	bf38      	it	cc
 8010350:	2304      	movcc	r3, #4
 8010352:	441d      	add	r5, r3
 8010354:	445b      	add	r3, fp
 8010356:	461e      	mov	r6, r3
 8010358:	462c      	mov	r4, r5
 801035a:	4544      	cmp	r4, r8
 801035c:	d30e      	bcc.n	801037c <__mdiff+0xf8>
 801035e:	f108 0103 	add.w	r1, r8, #3
 8010362:	1b49      	subs	r1, r1, r5
 8010364:	f021 0103 	bic.w	r1, r1, #3
 8010368:	3d03      	subs	r5, #3
 801036a:	45a8      	cmp	r8, r5
 801036c:	bf38      	it	cc
 801036e:	2100      	movcc	r1, #0
 8010370:	440b      	add	r3, r1
 8010372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010376:	b191      	cbz	r1, 801039e <__mdiff+0x11a>
 8010378:	6117      	str	r7, [r2, #16]
 801037a:	e79d      	b.n	80102b8 <__mdiff+0x34>
 801037c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010380:	46e6      	mov	lr, ip
 8010382:	0c08      	lsrs	r0, r1, #16
 8010384:	fa1c fc81 	uxtah	ip, ip, r1
 8010388:	4471      	add	r1, lr
 801038a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801038e:	b289      	uxth	r1, r1
 8010390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010394:	f846 1b04 	str.w	r1, [r6], #4
 8010398:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801039c:	e7dd      	b.n	801035a <__mdiff+0xd6>
 801039e:	3f01      	subs	r7, #1
 80103a0:	e7e7      	b.n	8010372 <__mdiff+0xee>
 80103a2:	bf00      	nop
 80103a4:	08012118 	.word	0x08012118
 80103a8:	08012129 	.word	0x08012129

080103ac <__d2b>:
 80103ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103b0:	460f      	mov	r7, r1
 80103b2:	2101      	movs	r1, #1
 80103b4:	ec59 8b10 	vmov	r8, r9, d0
 80103b8:	4616      	mov	r6, r2
 80103ba:	f7ff fccd 	bl	800fd58 <_Balloc>
 80103be:	4604      	mov	r4, r0
 80103c0:	b930      	cbnz	r0, 80103d0 <__d2b+0x24>
 80103c2:	4602      	mov	r2, r0
 80103c4:	4b23      	ldr	r3, [pc, #140]	@ (8010454 <__d2b+0xa8>)
 80103c6:	4824      	ldr	r0, [pc, #144]	@ (8010458 <__d2b+0xac>)
 80103c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80103cc:	f000 fc48 	bl	8010c60 <__assert_func>
 80103d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80103d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103d8:	b10d      	cbz	r5, 80103de <__d2b+0x32>
 80103da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80103de:	9301      	str	r3, [sp, #4]
 80103e0:	f1b8 0300 	subs.w	r3, r8, #0
 80103e4:	d023      	beq.n	801042e <__d2b+0x82>
 80103e6:	4668      	mov	r0, sp
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	f7ff fd7c 	bl	800fee6 <__lo0bits>
 80103ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80103f2:	b1d0      	cbz	r0, 801042a <__d2b+0x7e>
 80103f4:	f1c0 0320 	rsb	r3, r0, #32
 80103f8:	fa02 f303 	lsl.w	r3, r2, r3
 80103fc:	430b      	orrs	r3, r1
 80103fe:	40c2      	lsrs	r2, r0
 8010400:	6163      	str	r3, [r4, #20]
 8010402:	9201      	str	r2, [sp, #4]
 8010404:	9b01      	ldr	r3, [sp, #4]
 8010406:	61a3      	str	r3, [r4, #24]
 8010408:	2b00      	cmp	r3, #0
 801040a:	bf0c      	ite	eq
 801040c:	2201      	moveq	r2, #1
 801040e:	2202      	movne	r2, #2
 8010410:	6122      	str	r2, [r4, #16]
 8010412:	b1a5      	cbz	r5, 801043e <__d2b+0x92>
 8010414:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010418:	4405      	add	r5, r0
 801041a:	603d      	str	r5, [r7, #0]
 801041c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010420:	6030      	str	r0, [r6, #0]
 8010422:	4620      	mov	r0, r4
 8010424:	b003      	add	sp, #12
 8010426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801042a:	6161      	str	r1, [r4, #20]
 801042c:	e7ea      	b.n	8010404 <__d2b+0x58>
 801042e:	a801      	add	r0, sp, #4
 8010430:	f7ff fd59 	bl	800fee6 <__lo0bits>
 8010434:	9b01      	ldr	r3, [sp, #4]
 8010436:	6163      	str	r3, [r4, #20]
 8010438:	3020      	adds	r0, #32
 801043a:	2201      	movs	r2, #1
 801043c:	e7e8      	b.n	8010410 <__d2b+0x64>
 801043e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010442:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010446:	6038      	str	r0, [r7, #0]
 8010448:	6918      	ldr	r0, [r3, #16]
 801044a:	f7ff fd2d 	bl	800fea8 <__hi0bits>
 801044e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010452:	e7e5      	b.n	8010420 <__d2b+0x74>
 8010454:	08012118 	.word	0x08012118
 8010458:	08012129 	.word	0x08012129

0801045c <__ssputs_r>:
 801045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010460:	688e      	ldr	r6, [r1, #8]
 8010462:	461f      	mov	r7, r3
 8010464:	42be      	cmp	r6, r7
 8010466:	680b      	ldr	r3, [r1, #0]
 8010468:	4682      	mov	sl, r0
 801046a:	460c      	mov	r4, r1
 801046c:	4690      	mov	r8, r2
 801046e:	d82d      	bhi.n	80104cc <__ssputs_r+0x70>
 8010470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010478:	d026      	beq.n	80104c8 <__ssputs_r+0x6c>
 801047a:	6965      	ldr	r5, [r4, #20]
 801047c:	6909      	ldr	r1, [r1, #16]
 801047e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010482:	eba3 0901 	sub.w	r9, r3, r1
 8010486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801048a:	1c7b      	adds	r3, r7, #1
 801048c:	444b      	add	r3, r9
 801048e:	106d      	asrs	r5, r5, #1
 8010490:	429d      	cmp	r5, r3
 8010492:	bf38      	it	cc
 8010494:	461d      	movcc	r5, r3
 8010496:	0553      	lsls	r3, r2, #21
 8010498:	d527      	bpl.n	80104ea <__ssputs_r+0x8e>
 801049a:	4629      	mov	r1, r5
 801049c:	f7ff fbd0 	bl	800fc40 <_malloc_r>
 80104a0:	4606      	mov	r6, r0
 80104a2:	b360      	cbz	r0, 80104fe <__ssputs_r+0xa2>
 80104a4:	6921      	ldr	r1, [r4, #16]
 80104a6:	464a      	mov	r2, r9
 80104a8:	f7fe fcfb 	bl	800eea2 <memcpy>
 80104ac:	89a3      	ldrh	r3, [r4, #12]
 80104ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104b6:	81a3      	strh	r3, [r4, #12]
 80104b8:	6126      	str	r6, [r4, #16]
 80104ba:	6165      	str	r5, [r4, #20]
 80104bc:	444e      	add	r6, r9
 80104be:	eba5 0509 	sub.w	r5, r5, r9
 80104c2:	6026      	str	r6, [r4, #0]
 80104c4:	60a5      	str	r5, [r4, #8]
 80104c6:	463e      	mov	r6, r7
 80104c8:	42be      	cmp	r6, r7
 80104ca:	d900      	bls.n	80104ce <__ssputs_r+0x72>
 80104cc:	463e      	mov	r6, r7
 80104ce:	6820      	ldr	r0, [r4, #0]
 80104d0:	4632      	mov	r2, r6
 80104d2:	4641      	mov	r1, r8
 80104d4:	f000 fb6a 	bl	8010bac <memmove>
 80104d8:	68a3      	ldr	r3, [r4, #8]
 80104da:	1b9b      	subs	r3, r3, r6
 80104dc:	60a3      	str	r3, [r4, #8]
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	4433      	add	r3, r6
 80104e2:	6023      	str	r3, [r4, #0]
 80104e4:	2000      	movs	r0, #0
 80104e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ea:	462a      	mov	r2, r5
 80104ec:	f000 fbfc 	bl	8010ce8 <_realloc_r>
 80104f0:	4606      	mov	r6, r0
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d1e0      	bne.n	80104b8 <__ssputs_r+0x5c>
 80104f6:	6921      	ldr	r1, [r4, #16]
 80104f8:	4650      	mov	r0, sl
 80104fa:	f7ff fb2d 	bl	800fb58 <_free_r>
 80104fe:	230c      	movs	r3, #12
 8010500:	f8ca 3000 	str.w	r3, [sl]
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801050a:	81a3      	strh	r3, [r4, #12]
 801050c:	f04f 30ff 	mov.w	r0, #4294967295
 8010510:	e7e9      	b.n	80104e6 <__ssputs_r+0x8a>
	...

08010514 <_svfiprintf_r>:
 8010514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010518:	4698      	mov	r8, r3
 801051a:	898b      	ldrh	r3, [r1, #12]
 801051c:	061b      	lsls	r3, r3, #24
 801051e:	b09d      	sub	sp, #116	@ 0x74
 8010520:	4607      	mov	r7, r0
 8010522:	460d      	mov	r5, r1
 8010524:	4614      	mov	r4, r2
 8010526:	d510      	bpl.n	801054a <_svfiprintf_r+0x36>
 8010528:	690b      	ldr	r3, [r1, #16]
 801052a:	b973      	cbnz	r3, 801054a <_svfiprintf_r+0x36>
 801052c:	2140      	movs	r1, #64	@ 0x40
 801052e:	f7ff fb87 	bl	800fc40 <_malloc_r>
 8010532:	6028      	str	r0, [r5, #0]
 8010534:	6128      	str	r0, [r5, #16]
 8010536:	b930      	cbnz	r0, 8010546 <_svfiprintf_r+0x32>
 8010538:	230c      	movs	r3, #12
 801053a:	603b      	str	r3, [r7, #0]
 801053c:	f04f 30ff 	mov.w	r0, #4294967295
 8010540:	b01d      	add	sp, #116	@ 0x74
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	2340      	movs	r3, #64	@ 0x40
 8010548:	616b      	str	r3, [r5, #20]
 801054a:	2300      	movs	r3, #0
 801054c:	9309      	str	r3, [sp, #36]	@ 0x24
 801054e:	2320      	movs	r3, #32
 8010550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010554:	f8cd 800c 	str.w	r8, [sp, #12]
 8010558:	2330      	movs	r3, #48	@ 0x30
 801055a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80106f8 <_svfiprintf_r+0x1e4>
 801055e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010562:	f04f 0901 	mov.w	r9, #1
 8010566:	4623      	mov	r3, r4
 8010568:	469a      	mov	sl, r3
 801056a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801056e:	b10a      	cbz	r2, 8010574 <_svfiprintf_r+0x60>
 8010570:	2a25      	cmp	r2, #37	@ 0x25
 8010572:	d1f9      	bne.n	8010568 <_svfiprintf_r+0x54>
 8010574:	ebba 0b04 	subs.w	fp, sl, r4
 8010578:	d00b      	beq.n	8010592 <_svfiprintf_r+0x7e>
 801057a:	465b      	mov	r3, fp
 801057c:	4622      	mov	r2, r4
 801057e:	4629      	mov	r1, r5
 8010580:	4638      	mov	r0, r7
 8010582:	f7ff ff6b 	bl	801045c <__ssputs_r>
 8010586:	3001      	adds	r0, #1
 8010588:	f000 80a7 	beq.w	80106da <_svfiprintf_r+0x1c6>
 801058c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801058e:	445a      	add	r2, fp
 8010590:	9209      	str	r2, [sp, #36]	@ 0x24
 8010592:	f89a 3000 	ldrb.w	r3, [sl]
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 809f 	beq.w	80106da <_svfiprintf_r+0x1c6>
 801059c:	2300      	movs	r3, #0
 801059e:	f04f 32ff 	mov.w	r2, #4294967295
 80105a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a6:	f10a 0a01 	add.w	sl, sl, #1
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	9307      	str	r3, [sp, #28]
 80105ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80105b4:	4654      	mov	r4, sl
 80105b6:	2205      	movs	r2, #5
 80105b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105bc:	484e      	ldr	r0, [pc, #312]	@ (80106f8 <_svfiprintf_r+0x1e4>)
 80105be:	f7ef fddf 	bl	8000180 <memchr>
 80105c2:	9a04      	ldr	r2, [sp, #16]
 80105c4:	b9d8      	cbnz	r0, 80105fe <_svfiprintf_r+0xea>
 80105c6:	06d0      	lsls	r0, r2, #27
 80105c8:	bf44      	itt	mi
 80105ca:	2320      	movmi	r3, #32
 80105cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105d0:	0711      	lsls	r1, r2, #28
 80105d2:	bf44      	itt	mi
 80105d4:	232b      	movmi	r3, #43	@ 0x2b
 80105d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105da:	f89a 3000 	ldrb.w	r3, [sl]
 80105de:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e0:	d015      	beq.n	801060e <_svfiprintf_r+0xfa>
 80105e2:	9a07      	ldr	r2, [sp, #28]
 80105e4:	4654      	mov	r4, sl
 80105e6:	2000      	movs	r0, #0
 80105e8:	f04f 0c0a 	mov.w	ip, #10
 80105ec:	4621      	mov	r1, r4
 80105ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f2:	3b30      	subs	r3, #48	@ 0x30
 80105f4:	2b09      	cmp	r3, #9
 80105f6:	d94b      	bls.n	8010690 <_svfiprintf_r+0x17c>
 80105f8:	b1b0      	cbz	r0, 8010628 <_svfiprintf_r+0x114>
 80105fa:	9207      	str	r2, [sp, #28]
 80105fc:	e014      	b.n	8010628 <_svfiprintf_r+0x114>
 80105fe:	eba0 0308 	sub.w	r3, r0, r8
 8010602:	fa09 f303 	lsl.w	r3, r9, r3
 8010606:	4313      	orrs	r3, r2
 8010608:	9304      	str	r3, [sp, #16]
 801060a:	46a2      	mov	sl, r4
 801060c:	e7d2      	b.n	80105b4 <_svfiprintf_r+0xa0>
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	1d19      	adds	r1, r3, #4
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	9103      	str	r1, [sp, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	bfbb      	ittet	lt
 801061a:	425b      	neglt	r3, r3
 801061c:	f042 0202 	orrlt.w	r2, r2, #2
 8010620:	9307      	strge	r3, [sp, #28]
 8010622:	9307      	strlt	r3, [sp, #28]
 8010624:	bfb8      	it	lt
 8010626:	9204      	strlt	r2, [sp, #16]
 8010628:	7823      	ldrb	r3, [r4, #0]
 801062a:	2b2e      	cmp	r3, #46	@ 0x2e
 801062c:	d10a      	bne.n	8010644 <_svfiprintf_r+0x130>
 801062e:	7863      	ldrb	r3, [r4, #1]
 8010630:	2b2a      	cmp	r3, #42	@ 0x2a
 8010632:	d132      	bne.n	801069a <_svfiprintf_r+0x186>
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	1d1a      	adds	r2, r3, #4
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	9203      	str	r2, [sp, #12]
 801063c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010640:	3402      	adds	r4, #2
 8010642:	9305      	str	r3, [sp, #20]
 8010644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010708 <_svfiprintf_r+0x1f4>
 8010648:	7821      	ldrb	r1, [r4, #0]
 801064a:	2203      	movs	r2, #3
 801064c:	4650      	mov	r0, sl
 801064e:	f7ef fd97 	bl	8000180 <memchr>
 8010652:	b138      	cbz	r0, 8010664 <_svfiprintf_r+0x150>
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	eba0 000a 	sub.w	r0, r0, sl
 801065a:	2240      	movs	r2, #64	@ 0x40
 801065c:	4082      	lsls	r2, r0
 801065e:	4313      	orrs	r3, r2
 8010660:	3401      	adds	r4, #1
 8010662:	9304      	str	r3, [sp, #16]
 8010664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010668:	4824      	ldr	r0, [pc, #144]	@ (80106fc <_svfiprintf_r+0x1e8>)
 801066a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801066e:	2206      	movs	r2, #6
 8010670:	f7ef fd86 	bl	8000180 <memchr>
 8010674:	2800      	cmp	r0, #0
 8010676:	d036      	beq.n	80106e6 <_svfiprintf_r+0x1d2>
 8010678:	4b21      	ldr	r3, [pc, #132]	@ (8010700 <_svfiprintf_r+0x1ec>)
 801067a:	bb1b      	cbnz	r3, 80106c4 <_svfiprintf_r+0x1b0>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	3307      	adds	r3, #7
 8010680:	f023 0307 	bic.w	r3, r3, #7
 8010684:	3308      	adds	r3, #8
 8010686:	9303      	str	r3, [sp, #12]
 8010688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801068a:	4433      	add	r3, r6
 801068c:	9309      	str	r3, [sp, #36]	@ 0x24
 801068e:	e76a      	b.n	8010566 <_svfiprintf_r+0x52>
 8010690:	fb0c 3202 	mla	r2, ip, r2, r3
 8010694:	460c      	mov	r4, r1
 8010696:	2001      	movs	r0, #1
 8010698:	e7a8      	b.n	80105ec <_svfiprintf_r+0xd8>
 801069a:	2300      	movs	r3, #0
 801069c:	3401      	adds	r4, #1
 801069e:	9305      	str	r3, [sp, #20]
 80106a0:	4619      	mov	r1, r3
 80106a2:	f04f 0c0a 	mov.w	ip, #10
 80106a6:	4620      	mov	r0, r4
 80106a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106ac:	3a30      	subs	r2, #48	@ 0x30
 80106ae:	2a09      	cmp	r2, #9
 80106b0:	d903      	bls.n	80106ba <_svfiprintf_r+0x1a6>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0c6      	beq.n	8010644 <_svfiprintf_r+0x130>
 80106b6:	9105      	str	r1, [sp, #20]
 80106b8:	e7c4      	b.n	8010644 <_svfiprintf_r+0x130>
 80106ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80106be:	4604      	mov	r4, r0
 80106c0:	2301      	movs	r3, #1
 80106c2:	e7f0      	b.n	80106a6 <_svfiprintf_r+0x192>
 80106c4:	ab03      	add	r3, sp, #12
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	462a      	mov	r2, r5
 80106ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010704 <_svfiprintf_r+0x1f0>)
 80106cc:	a904      	add	r1, sp, #16
 80106ce:	4638      	mov	r0, r7
 80106d0:	f7fd fd70 	bl	800e1b4 <_printf_float>
 80106d4:	1c42      	adds	r2, r0, #1
 80106d6:	4606      	mov	r6, r0
 80106d8:	d1d6      	bne.n	8010688 <_svfiprintf_r+0x174>
 80106da:	89ab      	ldrh	r3, [r5, #12]
 80106dc:	065b      	lsls	r3, r3, #25
 80106de:	f53f af2d 	bmi.w	801053c <_svfiprintf_r+0x28>
 80106e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106e4:	e72c      	b.n	8010540 <_svfiprintf_r+0x2c>
 80106e6:	ab03      	add	r3, sp, #12
 80106e8:	9300      	str	r3, [sp, #0]
 80106ea:	462a      	mov	r2, r5
 80106ec:	4b05      	ldr	r3, [pc, #20]	@ (8010704 <_svfiprintf_r+0x1f0>)
 80106ee:	a904      	add	r1, sp, #16
 80106f0:	4638      	mov	r0, r7
 80106f2:	f7fd fff7 	bl	800e6e4 <_printf_i>
 80106f6:	e7ed      	b.n	80106d4 <_svfiprintf_r+0x1c0>
 80106f8:	08012280 	.word	0x08012280
 80106fc:	0801228a 	.word	0x0801228a
 8010700:	0800e1b5 	.word	0x0800e1b5
 8010704:	0801045d 	.word	0x0801045d
 8010708:	08012286 	.word	0x08012286

0801070c <__sfputc_r>:
 801070c:	6893      	ldr	r3, [r2, #8]
 801070e:	3b01      	subs	r3, #1
 8010710:	2b00      	cmp	r3, #0
 8010712:	b410      	push	{r4}
 8010714:	6093      	str	r3, [r2, #8]
 8010716:	da08      	bge.n	801072a <__sfputc_r+0x1e>
 8010718:	6994      	ldr	r4, [r2, #24]
 801071a:	42a3      	cmp	r3, r4
 801071c:	db01      	blt.n	8010722 <__sfputc_r+0x16>
 801071e:	290a      	cmp	r1, #10
 8010720:	d103      	bne.n	801072a <__sfputc_r+0x1e>
 8010722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010726:	f7fe ba92 	b.w	800ec4e <__swbuf_r>
 801072a:	6813      	ldr	r3, [r2, #0]
 801072c:	1c58      	adds	r0, r3, #1
 801072e:	6010      	str	r0, [r2, #0]
 8010730:	7019      	strb	r1, [r3, #0]
 8010732:	4608      	mov	r0, r1
 8010734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010738:	4770      	bx	lr

0801073a <__sfputs_r>:
 801073a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073c:	4606      	mov	r6, r0
 801073e:	460f      	mov	r7, r1
 8010740:	4614      	mov	r4, r2
 8010742:	18d5      	adds	r5, r2, r3
 8010744:	42ac      	cmp	r4, r5
 8010746:	d101      	bne.n	801074c <__sfputs_r+0x12>
 8010748:	2000      	movs	r0, #0
 801074a:	e007      	b.n	801075c <__sfputs_r+0x22>
 801074c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010750:	463a      	mov	r2, r7
 8010752:	4630      	mov	r0, r6
 8010754:	f7ff ffda 	bl	801070c <__sfputc_r>
 8010758:	1c43      	adds	r3, r0, #1
 801075a:	d1f3      	bne.n	8010744 <__sfputs_r+0xa>
 801075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010760 <_vfiprintf_r>:
 8010760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	460d      	mov	r5, r1
 8010766:	b09d      	sub	sp, #116	@ 0x74
 8010768:	4614      	mov	r4, r2
 801076a:	4698      	mov	r8, r3
 801076c:	4606      	mov	r6, r0
 801076e:	b118      	cbz	r0, 8010778 <_vfiprintf_r+0x18>
 8010770:	6a03      	ldr	r3, [r0, #32]
 8010772:	b90b      	cbnz	r3, 8010778 <_vfiprintf_r+0x18>
 8010774:	f7fe f962 	bl	800ea3c <__sinit>
 8010778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801077a:	07d9      	lsls	r1, r3, #31
 801077c:	d405      	bmi.n	801078a <_vfiprintf_r+0x2a>
 801077e:	89ab      	ldrh	r3, [r5, #12]
 8010780:	059a      	lsls	r2, r3, #22
 8010782:	d402      	bmi.n	801078a <_vfiprintf_r+0x2a>
 8010784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010786:	f7fe fb8a 	bl	800ee9e <__retarget_lock_acquire_recursive>
 801078a:	89ab      	ldrh	r3, [r5, #12]
 801078c:	071b      	lsls	r3, r3, #28
 801078e:	d501      	bpl.n	8010794 <_vfiprintf_r+0x34>
 8010790:	692b      	ldr	r3, [r5, #16]
 8010792:	b99b      	cbnz	r3, 80107bc <_vfiprintf_r+0x5c>
 8010794:	4629      	mov	r1, r5
 8010796:	4630      	mov	r0, r6
 8010798:	f7fe fa98 	bl	800eccc <__swsetup_r>
 801079c:	b170      	cbz	r0, 80107bc <_vfiprintf_r+0x5c>
 801079e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107a0:	07dc      	lsls	r4, r3, #31
 80107a2:	d504      	bpl.n	80107ae <_vfiprintf_r+0x4e>
 80107a4:	f04f 30ff 	mov.w	r0, #4294967295
 80107a8:	b01d      	add	sp, #116	@ 0x74
 80107aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ae:	89ab      	ldrh	r3, [r5, #12]
 80107b0:	0598      	lsls	r0, r3, #22
 80107b2:	d4f7      	bmi.n	80107a4 <_vfiprintf_r+0x44>
 80107b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107b6:	f7fe fb73 	bl	800eea0 <__retarget_lock_release_recursive>
 80107ba:	e7f3      	b.n	80107a4 <_vfiprintf_r+0x44>
 80107bc:	2300      	movs	r3, #0
 80107be:	9309      	str	r3, [sp, #36]	@ 0x24
 80107c0:	2320      	movs	r3, #32
 80107c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80107ca:	2330      	movs	r3, #48	@ 0x30
 80107cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801097c <_vfiprintf_r+0x21c>
 80107d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107d4:	f04f 0901 	mov.w	r9, #1
 80107d8:	4623      	mov	r3, r4
 80107da:	469a      	mov	sl, r3
 80107dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107e0:	b10a      	cbz	r2, 80107e6 <_vfiprintf_r+0x86>
 80107e2:	2a25      	cmp	r2, #37	@ 0x25
 80107e4:	d1f9      	bne.n	80107da <_vfiprintf_r+0x7a>
 80107e6:	ebba 0b04 	subs.w	fp, sl, r4
 80107ea:	d00b      	beq.n	8010804 <_vfiprintf_r+0xa4>
 80107ec:	465b      	mov	r3, fp
 80107ee:	4622      	mov	r2, r4
 80107f0:	4629      	mov	r1, r5
 80107f2:	4630      	mov	r0, r6
 80107f4:	f7ff ffa1 	bl	801073a <__sfputs_r>
 80107f8:	3001      	adds	r0, #1
 80107fa:	f000 80a7 	beq.w	801094c <_vfiprintf_r+0x1ec>
 80107fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010800:	445a      	add	r2, fp
 8010802:	9209      	str	r2, [sp, #36]	@ 0x24
 8010804:	f89a 3000 	ldrb.w	r3, [sl]
 8010808:	2b00      	cmp	r3, #0
 801080a:	f000 809f 	beq.w	801094c <_vfiprintf_r+0x1ec>
 801080e:	2300      	movs	r3, #0
 8010810:	f04f 32ff 	mov.w	r2, #4294967295
 8010814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010818:	f10a 0a01 	add.w	sl, sl, #1
 801081c:	9304      	str	r3, [sp, #16]
 801081e:	9307      	str	r3, [sp, #28]
 8010820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010824:	931a      	str	r3, [sp, #104]	@ 0x68
 8010826:	4654      	mov	r4, sl
 8010828:	2205      	movs	r2, #5
 801082a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801082e:	4853      	ldr	r0, [pc, #332]	@ (801097c <_vfiprintf_r+0x21c>)
 8010830:	f7ef fca6 	bl	8000180 <memchr>
 8010834:	9a04      	ldr	r2, [sp, #16]
 8010836:	b9d8      	cbnz	r0, 8010870 <_vfiprintf_r+0x110>
 8010838:	06d1      	lsls	r1, r2, #27
 801083a:	bf44      	itt	mi
 801083c:	2320      	movmi	r3, #32
 801083e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010842:	0713      	lsls	r3, r2, #28
 8010844:	bf44      	itt	mi
 8010846:	232b      	movmi	r3, #43	@ 0x2b
 8010848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801084c:	f89a 3000 	ldrb.w	r3, [sl]
 8010850:	2b2a      	cmp	r3, #42	@ 0x2a
 8010852:	d015      	beq.n	8010880 <_vfiprintf_r+0x120>
 8010854:	9a07      	ldr	r2, [sp, #28]
 8010856:	4654      	mov	r4, sl
 8010858:	2000      	movs	r0, #0
 801085a:	f04f 0c0a 	mov.w	ip, #10
 801085e:	4621      	mov	r1, r4
 8010860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010864:	3b30      	subs	r3, #48	@ 0x30
 8010866:	2b09      	cmp	r3, #9
 8010868:	d94b      	bls.n	8010902 <_vfiprintf_r+0x1a2>
 801086a:	b1b0      	cbz	r0, 801089a <_vfiprintf_r+0x13a>
 801086c:	9207      	str	r2, [sp, #28]
 801086e:	e014      	b.n	801089a <_vfiprintf_r+0x13a>
 8010870:	eba0 0308 	sub.w	r3, r0, r8
 8010874:	fa09 f303 	lsl.w	r3, r9, r3
 8010878:	4313      	orrs	r3, r2
 801087a:	9304      	str	r3, [sp, #16]
 801087c:	46a2      	mov	sl, r4
 801087e:	e7d2      	b.n	8010826 <_vfiprintf_r+0xc6>
 8010880:	9b03      	ldr	r3, [sp, #12]
 8010882:	1d19      	adds	r1, r3, #4
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	9103      	str	r1, [sp, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	bfbb      	ittet	lt
 801088c:	425b      	neglt	r3, r3
 801088e:	f042 0202 	orrlt.w	r2, r2, #2
 8010892:	9307      	strge	r3, [sp, #28]
 8010894:	9307      	strlt	r3, [sp, #28]
 8010896:	bfb8      	it	lt
 8010898:	9204      	strlt	r2, [sp, #16]
 801089a:	7823      	ldrb	r3, [r4, #0]
 801089c:	2b2e      	cmp	r3, #46	@ 0x2e
 801089e:	d10a      	bne.n	80108b6 <_vfiprintf_r+0x156>
 80108a0:	7863      	ldrb	r3, [r4, #1]
 80108a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80108a4:	d132      	bne.n	801090c <_vfiprintf_r+0x1ac>
 80108a6:	9b03      	ldr	r3, [sp, #12]
 80108a8:	1d1a      	adds	r2, r3, #4
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	9203      	str	r2, [sp, #12]
 80108ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108b2:	3402      	adds	r4, #2
 80108b4:	9305      	str	r3, [sp, #20]
 80108b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801098c <_vfiprintf_r+0x22c>
 80108ba:	7821      	ldrb	r1, [r4, #0]
 80108bc:	2203      	movs	r2, #3
 80108be:	4650      	mov	r0, sl
 80108c0:	f7ef fc5e 	bl	8000180 <memchr>
 80108c4:	b138      	cbz	r0, 80108d6 <_vfiprintf_r+0x176>
 80108c6:	9b04      	ldr	r3, [sp, #16]
 80108c8:	eba0 000a 	sub.w	r0, r0, sl
 80108cc:	2240      	movs	r2, #64	@ 0x40
 80108ce:	4082      	lsls	r2, r0
 80108d0:	4313      	orrs	r3, r2
 80108d2:	3401      	adds	r4, #1
 80108d4:	9304      	str	r3, [sp, #16]
 80108d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108da:	4829      	ldr	r0, [pc, #164]	@ (8010980 <_vfiprintf_r+0x220>)
 80108dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108e0:	2206      	movs	r2, #6
 80108e2:	f7ef fc4d 	bl	8000180 <memchr>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d03f      	beq.n	801096a <_vfiprintf_r+0x20a>
 80108ea:	4b26      	ldr	r3, [pc, #152]	@ (8010984 <_vfiprintf_r+0x224>)
 80108ec:	bb1b      	cbnz	r3, 8010936 <_vfiprintf_r+0x1d6>
 80108ee:	9b03      	ldr	r3, [sp, #12]
 80108f0:	3307      	adds	r3, #7
 80108f2:	f023 0307 	bic.w	r3, r3, #7
 80108f6:	3308      	adds	r3, #8
 80108f8:	9303      	str	r3, [sp, #12]
 80108fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108fc:	443b      	add	r3, r7
 80108fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010900:	e76a      	b.n	80107d8 <_vfiprintf_r+0x78>
 8010902:	fb0c 3202 	mla	r2, ip, r2, r3
 8010906:	460c      	mov	r4, r1
 8010908:	2001      	movs	r0, #1
 801090a:	e7a8      	b.n	801085e <_vfiprintf_r+0xfe>
 801090c:	2300      	movs	r3, #0
 801090e:	3401      	adds	r4, #1
 8010910:	9305      	str	r3, [sp, #20]
 8010912:	4619      	mov	r1, r3
 8010914:	f04f 0c0a 	mov.w	ip, #10
 8010918:	4620      	mov	r0, r4
 801091a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801091e:	3a30      	subs	r2, #48	@ 0x30
 8010920:	2a09      	cmp	r2, #9
 8010922:	d903      	bls.n	801092c <_vfiprintf_r+0x1cc>
 8010924:	2b00      	cmp	r3, #0
 8010926:	d0c6      	beq.n	80108b6 <_vfiprintf_r+0x156>
 8010928:	9105      	str	r1, [sp, #20]
 801092a:	e7c4      	b.n	80108b6 <_vfiprintf_r+0x156>
 801092c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010930:	4604      	mov	r4, r0
 8010932:	2301      	movs	r3, #1
 8010934:	e7f0      	b.n	8010918 <_vfiprintf_r+0x1b8>
 8010936:	ab03      	add	r3, sp, #12
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	462a      	mov	r2, r5
 801093c:	4b12      	ldr	r3, [pc, #72]	@ (8010988 <_vfiprintf_r+0x228>)
 801093e:	a904      	add	r1, sp, #16
 8010940:	4630      	mov	r0, r6
 8010942:	f7fd fc37 	bl	800e1b4 <_printf_float>
 8010946:	4607      	mov	r7, r0
 8010948:	1c78      	adds	r0, r7, #1
 801094a:	d1d6      	bne.n	80108fa <_vfiprintf_r+0x19a>
 801094c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801094e:	07d9      	lsls	r1, r3, #31
 8010950:	d405      	bmi.n	801095e <_vfiprintf_r+0x1fe>
 8010952:	89ab      	ldrh	r3, [r5, #12]
 8010954:	059a      	lsls	r2, r3, #22
 8010956:	d402      	bmi.n	801095e <_vfiprintf_r+0x1fe>
 8010958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801095a:	f7fe faa1 	bl	800eea0 <__retarget_lock_release_recursive>
 801095e:	89ab      	ldrh	r3, [r5, #12]
 8010960:	065b      	lsls	r3, r3, #25
 8010962:	f53f af1f 	bmi.w	80107a4 <_vfiprintf_r+0x44>
 8010966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010968:	e71e      	b.n	80107a8 <_vfiprintf_r+0x48>
 801096a:	ab03      	add	r3, sp, #12
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	462a      	mov	r2, r5
 8010970:	4b05      	ldr	r3, [pc, #20]	@ (8010988 <_vfiprintf_r+0x228>)
 8010972:	a904      	add	r1, sp, #16
 8010974:	4630      	mov	r0, r6
 8010976:	f7fd feb5 	bl	800e6e4 <_printf_i>
 801097a:	e7e4      	b.n	8010946 <_vfiprintf_r+0x1e6>
 801097c:	08012280 	.word	0x08012280
 8010980:	0801228a 	.word	0x0801228a
 8010984:	0800e1b5 	.word	0x0800e1b5
 8010988:	0801073b 	.word	0x0801073b
 801098c:	08012286 	.word	0x08012286

08010990 <__sflush_r>:
 8010990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010998:	0716      	lsls	r6, r2, #28
 801099a:	4605      	mov	r5, r0
 801099c:	460c      	mov	r4, r1
 801099e:	d454      	bmi.n	8010a4a <__sflush_r+0xba>
 80109a0:	684b      	ldr	r3, [r1, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	dc02      	bgt.n	80109ac <__sflush_r+0x1c>
 80109a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	dd48      	ble.n	8010a3e <__sflush_r+0xae>
 80109ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109ae:	2e00      	cmp	r6, #0
 80109b0:	d045      	beq.n	8010a3e <__sflush_r+0xae>
 80109b2:	2300      	movs	r3, #0
 80109b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109b8:	682f      	ldr	r7, [r5, #0]
 80109ba:	6a21      	ldr	r1, [r4, #32]
 80109bc:	602b      	str	r3, [r5, #0]
 80109be:	d030      	beq.n	8010a22 <__sflush_r+0x92>
 80109c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109c2:	89a3      	ldrh	r3, [r4, #12]
 80109c4:	0759      	lsls	r1, r3, #29
 80109c6:	d505      	bpl.n	80109d4 <__sflush_r+0x44>
 80109c8:	6863      	ldr	r3, [r4, #4]
 80109ca:	1ad2      	subs	r2, r2, r3
 80109cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109ce:	b10b      	cbz	r3, 80109d4 <__sflush_r+0x44>
 80109d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109d2:	1ad2      	subs	r2, r2, r3
 80109d4:	2300      	movs	r3, #0
 80109d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109d8:	6a21      	ldr	r1, [r4, #32]
 80109da:	4628      	mov	r0, r5
 80109dc:	47b0      	blx	r6
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	d106      	bne.n	80109f2 <__sflush_r+0x62>
 80109e4:	6829      	ldr	r1, [r5, #0]
 80109e6:	291d      	cmp	r1, #29
 80109e8:	d82b      	bhi.n	8010a42 <__sflush_r+0xb2>
 80109ea:	4a2a      	ldr	r2, [pc, #168]	@ (8010a94 <__sflush_r+0x104>)
 80109ec:	410a      	asrs	r2, r1
 80109ee:	07d6      	lsls	r6, r2, #31
 80109f0:	d427      	bmi.n	8010a42 <__sflush_r+0xb2>
 80109f2:	2200      	movs	r2, #0
 80109f4:	6062      	str	r2, [r4, #4]
 80109f6:	04d9      	lsls	r1, r3, #19
 80109f8:	6922      	ldr	r2, [r4, #16]
 80109fa:	6022      	str	r2, [r4, #0]
 80109fc:	d504      	bpl.n	8010a08 <__sflush_r+0x78>
 80109fe:	1c42      	adds	r2, r0, #1
 8010a00:	d101      	bne.n	8010a06 <__sflush_r+0x76>
 8010a02:	682b      	ldr	r3, [r5, #0]
 8010a04:	b903      	cbnz	r3, 8010a08 <__sflush_r+0x78>
 8010a06:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a0a:	602f      	str	r7, [r5, #0]
 8010a0c:	b1b9      	cbz	r1, 8010a3e <__sflush_r+0xae>
 8010a0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a12:	4299      	cmp	r1, r3
 8010a14:	d002      	beq.n	8010a1c <__sflush_r+0x8c>
 8010a16:	4628      	mov	r0, r5
 8010a18:	f7ff f89e 	bl	800fb58 <_free_r>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a20:	e00d      	b.n	8010a3e <__sflush_r+0xae>
 8010a22:	2301      	movs	r3, #1
 8010a24:	4628      	mov	r0, r5
 8010a26:	47b0      	blx	r6
 8010a28:	4602      	mov	r2, r0
 8010a2a:	1c50      	adds	r0, r2, #1
 8010a2c:	d1c9      	bne.n	80109c2 <__sflush_r+0x32>
 8010a2e:	682b      	ldr	r3, [r5, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d0c6      	beq.n	80109c2 <__sflush_r+0x32>
 8010a34:	2b1d      	cmp	r3, #29
 8010a36:	d001      	beq.n	8010a3c <__sflush_r+0xac>
 8010a38:	2b16      	cmp	r3, #22
 8010a3a:	d11e      	bne.n	8010a7a <__sflush_r+0xea>
 8010a3c:	602f      	str	r7, [r5, #0]
 8010a3e:	2000      	movs	r0, #0
 8010a40:	e022      	b.n	8010a88 <__sflush_r+0xf8>
 8010a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a46:	b21b      	sxth	r3, r3
 8010a48:	e01b      	b.n	8010a82 <__sflush_r+0xf2>
 8010a4a:	690f      	ldr	r7, [r1, #16]
 8010a4c:	2f00      	cmp	r7, #0
 8010a4e:	d0f6      	beq.n	8010a3e <__sflush_r+0xae>
 8010a50:	0793      	lsls	r3, r2, #30
 8010a52:	680e      	ldr	r6, [r1, #0]
 8010a54:	bf08      	it	eq
 8010a56:	694b      	ldreq	r3, [r1, #20]
 8010a58:	600f      	str	r7, [r1, #0]
 8010a5a:	bf18      	it	ne
 8010a5c:	2300      	movne	r3, #0
 8010a5e:	eba6 0807 	sub.w	r8, r6, r7
 8010a62:	608b      	str	r3, [r1, #8]
 8010a64:	f1b8 0f00 	cmp.w	r8, #0
 8010a68:	dde9      	ble.n	8010a3e <__sflush_r+0xae>
 8010a6a:	6a21      	ldr	r1, [r4, #32]
 8010a6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a6e:	4643      	mov	r3, r8
 8010a70:	463a      	mov	r2, r7
 8010a72:	4628      	mov	r0, r5
 8010a74:	47b0      	blx	r6
 8010a76:	2800      	cmp	r0, #0
 8010a78:	dc08      	bgt.n	8010a8c <__sflush_r+0xfc>
 8010a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a82:	81a3      	strh	r3, [r4, #12]
 8010a84:	f04f 30ff 	mov.w	r0, #4294967295
 8010a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a8c:	4407      	add	r7, r0
 8010a8e:	eba8 0800 	sub.w	r8, r8, r0
 8010a92:	e7e7      	b.n	8010a64 <__sflush_r+0xd4>
 8010a94:	dfbffffe 	.word	0xdfbffffe

08010a98 <_fflush_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	690b      	ldr	r3, [r1, #16]
 8010a9c:	4605      	mov	r5, r0
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	b913      	cbnz	r3, 8010aa8 <_fflush_r+0x10>
 8010aa2:	2500      	movs	r5, #0
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	bd38      	pop	{r3, r4, r5, pc}
 8010aa8:	b118      	cbz	r0, 8010ab2 <_fflush_r+0x1a>
 8010aaa:	6a03      	ldr	r3, [r0, #32]
 8010aac:	b90b      	cbnz	r3, 8010ab2 <_fflush_r+0x1a>
 8010aae:	f7fd ffc5 	bl	800ea3c <__sinit>
 8010ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d0f3      	beq.n	8010aa2 <_fflush_r+0xa>
 8010aba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010abc:	07d0      	lsls	r0, r2, #31
 8010abe:	d404      	bmi.n	8010aca <_fflush_r+0x32>
 8010ac0:	0599      	lsls	r1, r3, #22
 8010ac2:	d402      	bmi.n	8010aca <_fflush_r+0x32>
 8010ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ac6:	f7fe f9ea 	bl	800ee9e <__retarget_lock_acquire_recursive>
 8010aca:	4628      	mov	r0, r5
 8010acc:	4621      	mov	r1, r4
 8010ace:	f7ff ff5f 	bl	8010990 <__sflush_r>
 8010ad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ad4:	07da      	lsls	r2, r3, #31
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	d4e4      	bmi.n	8010aa4 <_fflush_r+0xc>
 8010ada:	89a3      	ldrh	r3, [r4, #12]
 8010adc:	059b      	lsls	r3, r3, #22
 8010ade:	d4e1      	bmi.n	8010aa4 <_fflush_r+0xc>
 8010ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ae2:	f7fe f9dd 	bl	800eea0 <__retarget_lock_release_recursive>
 8010ae6:	e7dd      	b.n	8010aa4 <_fflush_r+0xc>

08010ae8 <__swhatbuf_r>:
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	460c      	mov	r4, r1
 8010aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010af0:	2900      	cmp	r1, #0
 8010af2:	b096      	sub	sp, #88	@ 0x58
 8010af4:	4615      	mov	r5, r2
 8010af6:	461e      	mov	r6, r3
 8010af8:	da0d      	bge.n	8010b16 <__swhatbuf_r+0x2e>
 8010afa:	89a3      	ldrh	r3, [r4, #12]
 8010afc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b00:	f04f 0100 	mov.w	r1, #0
 8010b04:	bf14      	ite	ne
 8010b06:	2340      	movne	r3, #64	@ 0x40
 8010b08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	6031      	str	r1, [r6, #0]
 8010b10:	602b      	str	r3, [r5, #0]
 8010b12:	b016      	add	sp, #88	@ 0x58
 8010b14:	bd70      	pop	{r4, r5, r6, pc}
 8010b16:	466a      	mov	r2, sp
 8010b18:	f000 f870 	bl	8010bfc <_fstat_r>
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	dbec      	blt.n	8010afa <__swhatbuf_r+0x12>
 8010b20:	9901      	ldr	r1, [sp, #4]
 8010b22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b2a:	4259      	negs	r1, r3
 8010b2c:	4159      	adcs	r1, r3
 8010b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b32:	e7eb      	b.n	8010b0c <__swhatbuf_r+0x24>

08010b34 <__smakebuf_r>:
 8010b34:	898b      	ldrh	r3, [r1, #12]
 8010b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b38:	079d      	lsls	r5, r3, #30
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	d507      	bpl.n	8010b50 <__smakebuf_r+0x1c>
 8010b40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b44:	6023      	str	r3, [r4, #0]
 8010b46:	6123      	str	r3, [r4, #16]
 8010b48:	2301      	movs	r3, #1
 8010b4a:	6163      	str	r3, [r4, #20]
 8010b4c:	b003      	add	sp, #12
 8010b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b50:	ab01      	add	r3, sp, #4
 8010b52:	466a      	mov	r2, sp
 8010b54:	f7ff ffc8 	bl	8010ae8 <__swhatbuf_r>
 8010b58:	9f00      	ldr	r7, [sp, #0]
 8010b5a:	4605      	mov	r5, r0
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	4630      	mov	r0, r6
 8010b60:	f7ff f86e 	bl	800fc40 <_malloc_r>
 8010b64:	b948      	cbnz	r0, 8010b7a <__smakebuf_r+0x46>
 8010b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b6a:	059a      	lsls	r2, r3, #22
 8010b6c:	d4ee      	bmi.n	8010b4c <__smakebuf_r+0x18>
 8010b6e:	f023 0303 	bic.w	r3, r3, #3
 8010b72:	f043 0302 	orr.w	r3, r3, #2
 8010b76:	81a3      	strh	r3, [r4, #12]
 8010b78:	e7e2      	b.n	8010b40 <__smakebuf_r+0xc>
 8010b7a:	89a3      	ldrh	r3, [r4, #12]
 8010b7c:	6020      	str	r0, [r4, #0]
 8010b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b82:	81a3      	strh	r3, [r4, #12]
 8010b84:	9b01      	ldr	r3, [sp, #4]
 8010b86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010b8a:	b15b      	cbz	r3, 8010ba4 <__smakebuf_r+0x70>
 8010b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b90:	4630      	mov	r0, r6
 8010b92:	f000 f845 	bl	8010c20 <_isatty_r>
 8010b96:	b128      	cbz	r0, 8010ba4 <__smakebuf_r+0x70>
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	f023 0303 	bic.w	r3, r3, #3
 8010b9e:	f043 0301 	orr.w	r3, r3, #1
 8010ba2:	81a3      	strh	r3, [r4, #12]
 8010ba4:	89a3      	ldrh	r3, [r4, #12]
 8010ba6:	431d      	orrs	r5, r3
 8010ba8:	81a5      	strh	r5, [r4, #12]
 8010baa:	e7cf      	b.n	8010b4c <__smakebuf_r+0x18>

08010bac <memmove>:
 8010bac:	4288      	cmp	r0, r1
 8010bae:	b510      	push	{r4, lr}
 8010bb0:	eb01 0402 	add.w	r4, r1, r2
 8010bb4:	d902      	bls.n	8010bbc <memmove+0x10>
 8010bb6:	4284      	cmp	r4, r0
 8010bb8:	4623      	mov	r3, r4
 8010bba:	d807      	bhi.n	8010bcc <memmove+0x20>
 8010bbc:	1e43      	subs	r3, r0, #1
 8010bbe:	42a1      	cmp	r1, r4
 8010bc0:	d008      	beq.n	8010bd4 <memmove+0x28>
 8010bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010bca:	e7f8      	b.n	8010bbe <memmove+0x12>
 8010bcc:	4402      	add	r2, r0
 8010bce:	4601      	mov	r1, r0
 8010bd0:	428a      	cmp	r2, r1
 8010bd2:	d100      	bne.n	8010bd6 <memmove+0x2a>
 8010bd4:	bd10      	pop	{r4, pc}
 8010bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bde:	e7f7      	b.n	8010bd0 <memmove+0x24>

08010be0 <strchr>:
 8010be0:	b2c9      	uxtb	r1, r1
 8010be2:	4603      	mov	r3, r0
 8010be4:	4618      	mov	r0, r3
 8010be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bea:	b112      	cbz	r2, 8010bf2 <strchr+0x12>
 8010bec:	428a      	cmp	r2, r1
 8010bee:	d1f9      	bne.n	8010be4 <strchr+0x4>
 8010bf0:	4770      	bx	lr
 8010bf2:	2900      	cmp	r1, #0
 8010bf4:	bf18      	it	ne
 8010bf6:	2000      	movne	r0, #0
 8010bf8:	4770      	bx	lr
	...

08010bfc <_fstat_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	4d07      	ldr	r5, [pc, #28]	@ (8010c1c <_fstat_r+0x20>)
 8010c00:	2300      	movs	r3, #0
 8010c02:	4604      	mov	r4, r0
 8010c04:	4608      	mov	r0, r1
 8010c06:	4611      	mov	r1, r2
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	f7f2 fd6d 	bl	80036e8 <_fstat>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	d102      	bne.n	8010c18 <_fstat_r+0x1c>
 8010c12:	682b      	ldr	r3, [r5, #0]
 8010c14:	b103      	cbz	r3, 8010c18 <_fstat_r+0x1c>
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	bd38      	pop	{r3, r4, r5, pc}
 8010c1a:	bf00      	nop
 8010c1c:	20001894 	.word	0x20001894

08010c20 <_isatty_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d06      	ldr	r5, [pc, #24]	@ (8010c3c <_isatty_r+0x1c>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4604      	mov	r4, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	602b      	str	r3, [r5, #0]
 8010c2c:	f7f2 fd6c 	bl	8003708 <_isatty>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_isatty_r+0x1a>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_isatty_r+0x1a>
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	20001894 	.word	0x20001894

08010c40 <_sbrk_r>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4d06      	ldr	r5, [pc, #24]	@ (8010c5c <_sbrk_r+0x1c>)
 8010c44:	2300      	movs	r3, #0
 8010c46:	4604      	mov	r4, r0
 8010c48:	4608      	mov	r0, r1
 8010c4a:	602b      	str	r3, [r5, #0]
 8010c4c:	f7f2 fd74 	bl	8003738 <_sbrk>
 8010c50:	1c43      	adds	r3, r0, #1
 8010c52:	d102      	bne.n	8010c5a <_sbrk_r+0x1a>
 8010c54:	682b      	ldr	r3, [r5, #0]
 8010c56:	b103      	cbz	r3, 8010c5a <_sbrk_r+0x1a>
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	20001894 	.word	0x20001894

08010c60 <__assert_func>:
 8010c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c62:	4614      	mov	r4, r2
 8010c64:	461a      	mov	r2, r3
 8010c66:	4b09      	ldr	r3, [pc, #36]	@ (8010c8c <__assert_func+0x2c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	68d8      	ldr	r0, [r3, #12]
 8010c6e:	b954      	cbnz	r4, 8010c86 <__assert_func+0x26>
 8010c70:	4b07      	ldr	r3, [pc, #28]	@ (8010c90 <__assert_func+0x30>)
 8010c72:	461c      	mov	r4, r3
 8010c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c78:	9100      	str	r1, [sp, #0]
 8010c7a:	462b      	mov	r3, r5
 8010c7c:	4905      	ldr	r1, [pc, #20]	@ (8010c94 <__assert_func+0x34>)
 8010c7e:	f000 f86f 	bl	8010d60 <fiprintf>
 8010c82:	f000 f87f 	bl	8010d84 <abort>
 8010c86:	4b04      	ldr	r3, [pc, #16]	@ (8010c98 <__assert_func+0x38>)
 8010c88:	e7f4      	b.n	8010c74 <__assert_func+0x14>
 8010c8a:	bf00      	nop
 8010c8c:	2000003c 	.word	0x2000003c
 8010c90:	080122d6 	.word	0x080122d6
 8010c94:	080122a8 	.word	0x080122a8
 8010c98:	0801229b 	.word	0x0801229b

08010c9c <_calloc_r>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8010ca2:	b93c      	cbnz	r4, 8010cb4 <_calloc_r+0x18>
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f7fe ffcb 	bl	800fc40 <_malloc_r>
 8010caa:	4606      	mov	r6, r0
 8010cac:	b928      	cbnz	r0, 8010cba <_calloc_r+0x1e>
 8010cae:	2600      	movs	r6, #0
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	220c      	movs	r2, #12
 8010cb6:	6002      	str	r2, [r0, #0]
 8010cb8:	e7f9      	b.n	8010cae <_calloc_r+0x12>
 8010cba:	462a      	mov	r2, r5
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	f7fe f85b 	bl	800ed78 <memset>
 8010cc2:	e7f5      	b.n	8010cb0 <_calloc_r+0x14>

08010cc4 <__ascii_mbtowc>:
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	b901      	cbnz	r1, 8010cca <__ascii_mbtowc+0x6>
 8010cc8:	a901      	add	r1, sp, #4
 8010cca:	b142      	cbz	r2, 8010cde <__ascii_mbtowc+0x1a>
 8010ccc:	b14b      	cbz	r3, 8010ce2 <__ascii_mbtowc+0x1e>
 8010cce:	7813      	ldrb	r3, [r2, #0]
 8010cd0:	600b      	str	r3, [r1, #0]
 8010cd2:	7812      	ldrb	r2, [r2, #0]
 8010cd4:	1e10      	subs	r0, r2, #0
 8010cd6:	bf18      	it	ne
 8010cd8:	2001      	movne	r0, #1
 8010cda:	b002      	add	sp, #8
 8010cdc:	4770      	bx	lr
 8010cde:	4610      	mov	r0, r2
 8010ce0:	e7fb      	b.n	8010cda <__ascii_mbtowc+0x16>
 8010ce2:	f06f 0001 	mvn.w	r0, #1
 8010ce6:	e7f8      	b.n	8010cda <__ascii_mbtowc+0x16>

08010ce8 <_realloc_r>:
 8010ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cec:	4680      	mov	r8, r0
 8010cee:	4615      	mov	r5, r2
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	b921      	cbnz	r1, 8010cfe <_realloc_r+0x16>
 8010cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	f7fe bfa1 	b.w	800fc40 <_malloc_r>
 8010cfe:	b92a      	cbnz	r2, 8010d0c <_realloc_r+0x24>
 8010d00:	f7fe ff2a 	bl	800fb58 <_free_r>
 8010d04:	2400      	movs	r4, #0
 8010d06:	4620      	mov	r0, r4
 8010d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d0c:	f000 f841 	bl	8010d92 <_malloc_usable_size_r>
 8010d10:	4285      	cmp	r5, r0
 8010d12:	4606      	mov	r6, r0
 8010d14:	d802      	bhi.n	8010d1c <_realloc_r+0x34>
 8010d16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010d1a:	d8f4      	bhi.n	8010d06 <_realloc_r+0x1e>
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	4640      	mov	r0, r8
 8010d20:	f7fe ff8e 	bl	800fc40 <_malloc_r>
 8010d24:	4607      	mov	r7, r0
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d0ec      	beq.n	8010d04 <_realloc_r+0x1c>
 8010d2a:	42b5      	cmp	r5, r6
 8010d2c:	462a      	mov	r2, r5
 8010d2e:	4621      	mov	r1, r4
 8010d30:	bf28      	it	cs
 8010d32:	4632      	movcs	r2, r6
 8010d34:	f7fe f8b5 	bl	800eea2 <memcpy>
 8010d38:	4621      	mov	r1, r4
 8010d3a:	4640      	mov	r0, r8
 8010d3c:	f7fe ff0c 	bl	800fb58 <_free_r>
 8010d40:	463c      	mov	r4, r7
 8010d42:	e7e0      	b.n	8010d06 <_realloc_r+0x1e>

08010d44 <__ascii_wctomb>:
 8010d44:	4603      	mov	r3, r0
 8010d46:	4608      	mov	r0, r1
 8010d48:	b141      	cbz	r1, 8010d5c <__ascii_wctomb+0x18>
 8010d4a:	2aff      	cmp	r2, #255	@ 0xff
 8010d4c:	d904      	bls.n	8010d58 <__ascii_wctomb+0x14>
 8010d4e:	228a      	movs	r2, #138	@ 0x8a
 8010d50:	601a      	str	r2, [r3, #0]
 8010d52:	f04f 30ff 	mov.w	r0, #4294967295
 8010d56:	4770      	bx	lr
 8010d58:	700a      	strb	r2, [r1, #0]
 8010d5a:	2001      	movs	r0, #1
 8010d5c:	4770      	bx	lr
	...

08010d60 <fiprintf>:
 8010d60:	b40e      	push	{r1, r2, r3}
 8010d62:	b503      	push	{r0, r1, lr}
 8010d64:	4601      	mov	r1, r0
 8010d66:	ab03      	add	r3, sp, #12
 8010d68:	4805      	ldr	r0, [pc, #20]	@ (8010d80 <fiprintf+0x20>)
 8010d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d6e:	6800      	ldr	r0, [r0, #0]
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	f7ff fcf5 	bl	8010760 <_vfiprintf_r>
 8010d76:	b002      	add	sp, #8
 8010d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d7c:	b003      	add	sp, #12
 8010d7e:	4770      	bx	lr
 8010d80:	2000003c 	.word	0x2000003c

08010d84 <abort>:
 8010d84:	b508      	push	{r3, lr}
 8010d86:	2006      	movs	r0, #6
 8010d88:	f000 f834 	bl	8010df4 <raise>
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	f7f2 fc77 	bl	8003680 <_exit>

08010d92 <_malloc_usable_size_r>:
 8010d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d96:	1f18      	subs	r0, r3, #4
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	bfbc      	itt	lt
 8010d9c:	580b      	ldrlt	r3, [r1, r0]
 8010d9e:	18c0      	addlt	r0, r0, r3
 8010da0:	4770      	bx	lr

08010da2 <_raise_r>:
 8010da2:	291f      	cmp	r1, #31
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4605      	mov	r5, r0
 8010da8:	460c      	mov	r4, r1
 8010daa:	d904      	bls.n	8010db6 <_raise_r+0x14>
 8010dac:	2316      	movs	r3, #22
 8010dae:	6003      	str	r3, [r0, #0]
 8010db0:	f04f 30ff 	mov.w	r0, #4294967295
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010db8:	b112      	cbz	r2, 8010dc0 <_raise_r+0x1e>
 8010dba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010dbe:	b94b      	cbnz	r3, 8010dd4 <_raise_r+0x32>
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	f000 f831 	bl	8010e28 <_getpid_r>
 8010dc6:	4622      	mov	r2, r4
 8010dc8:	4601      	mov	r1, r0
 8010dca:	4628      	mov	r0, r5
 8010dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dd0:	f000 b818 	b.w	8010e04 <_kill_r>
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d00a      	beq.n	8010dee <_raise_r+0x4c>
 8010dd8:	1c59      	adds	r1, r3, #1
 8010dda:	d103      	bne.n	8010de4 <_raise_r+0x42>
 8010ddc:	2316      	movs	r3, #22
 8010dde:	6003      	str	r3, [r0, #0]
 8010de0:	2001      	movs	r0, #1
 8010de2:	e7e7      	b.n	8010db4 <_raise_r+0x12>
 8010de4:	2100      	movs	r1, #0
 8010de6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010dea:	4620      	mov	r0, r4
 8010dec:	4798      	blx	r3
 8010dee:	2000      	movs	r0, #0
 8010df0:	e7e0      	b.n	8010db4 <_raise_r+0x12>
	...

08010df4 <raise>:
 8010df4:	4b02      	ldr	r3, [pc, #8]	@ (8010e00 <raise+0xc>)
 8010df6:	4601      	mov	r1, r0
 8010df8:	6818      	ldr	r0, [r3, #0]
 8010dfa:	f7ff bfd2 	b.w	8010da2 <_raise_r>
 8010dfe:	bf00      	nop
 8010e00:	2000003c 	.word	0x2000003c

08010e04 <_kill_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4d07      	ldr	r5, [pc, #28]	@ (8010e24 <_kill_r+0x20>)
 8010e08:	2300      	movs	r3, #0
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	4608      	mov	r0, r1
 8010e0e:	4611      	mov	r1, r2
 8010e10:	602b      	str	r3, [r5, #0]
 8010e12:	f7f2 fc25 	bl	8003660 <_kill>
 8010e16:	1c43      	adds	r3, r0, #1
 8010e18:	d102      	bne.n	8010e20 <_kill_r+0x1c>
 8010e1a:	682b      	ldr	r3, [r5, #0]
 8010e1c:	b103      	cbz	r3, 8010e20 <_kill_r+0x1c>
 8010e1e:	6023      	str	r3, [r4, #0]
 8010e20:	bd38      	pop	{r3, r4, r5, pc}
 8010e22:	bf00      	nop
 8010e24:	20001894 	.word	0x20001894

08010e28 <_getpid_r>:
 8010e28:	f7f2 bc12 	b.w	8003650 <_getpid>

08010e2c <roundf>:
 8010e2c:	ee10 0a10 	vmov	r0, s0
 8010e30:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010e34:	3a7f      	subs	r2, #127	@ 0x7f
 8010e36:	2a16      	cmp	r2, #22
 8010e38:	dc15      	bgt.n	8010e66 <roundf+0x3a>
 8010e3a:	2a00      	cmp	r2, #0
 8010e3c:	da08      	bge.n	8010e50 <roundf+0x24>
 8010e3e:	3201      	adds	r2, #1
 8010e40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8010e44:	d101      	bne.n	8010e4a <roundf+0x1e>
 8010e46:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8010e4a:	ee00 3a10 	vmov	s0, r3
 8010e4e:	4770      	bx	lr
 8010e50:	4907      	ldr	r1, [pc, #28]	@ (8010e70 <roundf+0x44>)
 8010e52:	4111      	asrs	r1, r2
 8010e54:	4201      	tst	r1, r0
 8010e56:	d0fa      	beq.n	8010e4e <roundf+0x22>
 8010e58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010e5c:	4113      	asrs	r3, r2
 8010e5e:	4403      	add	r3, r0
 8010e60:	ea23 0301 	bic.w	r3, r3, r1
 8010e64:	e7f1      	b.n	8010e4a <roundf+0x1e>
 8010e66:	2a80      	cmp	r2, #128	@ 0x80
 8010e68:	d1f1      	bne.n	8010e4e <roundf+0x22>
 8010e6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010e6e:	4770      	bx	lr
 8010e70:	007fffff 	.word	0x007fffff

08010e74 <_init>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	bf00      	nop
 8010e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e7a:	bc08      	pop	{r3}
 8010e7c:	469e      	mov	lr, r3
 8010e7e:	4770      	bx	lr

08010e80 <_fini>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	bf00      	nop
 8010e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e86:	bc08      	pop	{r3}
 8010e88:	469e      	mov	lr, r3
 8010e8a:	4770      	bx	lr
